@using System.Text.Json
<MSelect Value="_dateInputsStruct.Format"
         ValueChanged="@DateTemplateChanged"
         ValueExpression="() => _dateInputsStruct.Format"
         TValue="string?"
         TItemValue="string"
         TItem="string"
         Items="_items"
         ItemText="u => u"
         ItemValue="u => u"
         Filled
         Label="date-format">
</MSelect>

@code {

    [Parameter] public string? Value { get; set; }

    [Parameter] public EventCallback<string?> ValueChanged { get; set; }

    private static IList<string> _dateTemplates =
    [
        "yyyy-MM-dd", "yyyy/MM/dd", "MM/dd/yyyy", "dd/MM/yyyy",
        "yyyy-MM-dd HH:mm:ss", "yyyy/MM/dd HH:mm:ss", "MM/dd/yyyy HH:mm:ss", "dd/MM/yyyy HH:mm:ss",
        "yyyy-MM", "yyyy/MM", "MM/yyyy",
        "yyyy-MM-dd HH:mm", "yyyy/MM/dd HH:mm", "MM/dd/yyyy HH:mm", "dd/MM/yyyy HH:mm"
    ];

    private IList<string> _items = [];

    private DateInputsStruct _dateInputsStruct = new()
    {
        Format = _dateTemplates.First()
    };

    protected override void OnInitialized()
    {
        base.OnInitialized();

        // TODO: 时区
        _items = _dateTemplates.Select(template => DateTime.Now.ToString(template)).ToList();

        if (Value is not null)
        {
            var result = JsonSerializer.Deserialize<DateInputsStruct>(Value);
            if (result is not null)
            {
                _dateInputsStruct = result;
                _dateInputsStruct.Format ??= _dateTemplates.First();
            }
        }
    }

    private void DateTemplateChanged(string? value)
    {
        _dateInputsStruct.Format = value;
        ValueChanged.InvokeAsync(JsonSerializer.Serialize(_dateInputsStruct));
    }

    private class DateInputsStruct
    {
        public string? Format { get; set; }
    }

}