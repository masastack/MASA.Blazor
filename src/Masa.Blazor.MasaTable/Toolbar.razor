<div class="masa-table__toolbar">
    <div class="d-flex">
        <MSpacer/>
        <MButton Color="primary" LeftIconName="mdi-check" OnClick="@OnRelease">Release</MButton>
    </div>

    <MItemGroup Value="@ActiveView.ToString()"
                ValueChanged="@ActiveChanged"
                Class="masa-table__toolbar-tabs"
                Mandatory
                ActiveClass="active">
        @foreach (var view in Views)
        {
            <MItem Value="@view.Id.ToString()">
                <MButton Text
                         Large
                         Class="@($"view-tab {context.ActiveClass}")"
                         OnClick="@context.Toggle">
                    @view.Name

                    <Dropdown>
                        <DropdownItem PrependIcon="mdi-rename-outline"
                                      Title="Rename view"
                                      OnClick="@(() => RenameView(view))"/>
                        @if (Views.Count > 1)
                        {
                            <DropdownItem PrependIcon="mdi-trash-can-outline"
                                          Title="Delete view"
                                          OnClick="@(() => OnViewDelete.InvokeAsync(view))"/>
                        }
                    </Dropdown>
                </MButton>
            </MItem>
        }
        <MButton IconName="mdi-plus"
                 Class="ml-1"
                 OnClick="@OnViewAdd">
        </MButton>
    </MItemGroup>
    <div class="masa-table__toolbar-actions">
        <MButton LeftIconName="mdi-cog-outline" Text OnClick="@(() => _configDialog = true)">表格配置</MButton>
        <MButton LeftIconName="mdi-filter-variant" Text>筛选</MButton>
        <MButton LeftIconName="mdi-sort" Text>排序</MButton>
    </div>
</div>

<MDialog @bind-Value="_configDialog" MaxWidth="400">
    <MList Dense Class="masa-table__menu-list">
        <MSortable Items="@Columns"
                   ItemKey="@(column => column.Id)"
                   Order="@ColumnOrder"
                   OrderChanged="@ColumnOrderChanged"
                   Handle=".handle"
                   Context="column">
            @{
                var hidden = HiddenColumnIds.Contains(column.Id);
            }
            <MListItem Class="@(hidden ? "grey--text" : "")">
                <MListItemAction>
                    <MIcon Class="handle" Style="cursor: move; color: inherit;">mdi-drag</MIcon>
                </MListItemAction>
                <MListItemContent>
                    <MListItemTitle Class="d-flex align-center">
                        @RenderFragments.GenTypeIcon(column.Type)
                        <span>@column.Name</span>
                        <MSpacer/>
                        <MToggle Value="@(!hidden)"
                                 DataOn="@("mdi-eye-outline")"
                                 DataOff="@("mdi-eye-off-outline")"
                                 TData="string">
                            <MButton IconName="@context.Data"
                                     Style="color: inherit"
                                     OnClick="@(() => OnColumnToggle.InvokeAsync(column.Id))"/>
                        </MToggle>
                        <MButton IconName="mdi-pencil-outline"
                                 Style="color: inherit"
                                 OnClick="@(() => OnColumnEditClick.InvokeAsync(column))">
                        </MButton>
                    </MListItemTitle>
                </MListItemContent>
            </MListItem>
        </MSortable>
    </MList>
</MDialog>