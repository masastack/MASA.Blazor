@using System.Collections
@using System.Globalization
@using BemIt
@using Masa.Blazor.Core
@using Microsoft.AspNetCore.Components.Web.Virtualization
@typeparam TItem

<MSimpleTable FixedHeader
              Class="@_modifierBuilder.Add(RowHeight.ToString()).Add(_sized).Build()"
              Style="@($"--mt-row-height: {RowHeightValue}px")"
              Height="@Height"
              @ref="_simpleTable">
    <thead>
    <tr @ref="_headerTrRef">
        <MSortableProvider Items="ColumnTemplates"
                           ItemKey="@(u => u.Column.Id)"
                           GhostClass="accent"
                           ContainerRef="@_headerTrRef"
                           ForceFallback
                           Ignore=".actions"
                           Order="@ColumnOrder"
                           OrderChanged="@ColumnOrderChanged">
            <ItemContent Context="context">
                @{
                    var template = context.Item;
                    var type = template.Column.Type.ToString().ToLowerInvariant();
                    var isActionsType = template.Column.Type == ColumnType.Actions;
                    var sortableHandleCss = isActionsType ? "ignore-elements" : "handle";
                    var hidden = HiddenColumnIds.Contains(template.Column.Id);
                    _headerColumnStyleBuilder.Clear();
                    _headerColumnStyleBuilder.AddWidth(template.ViewColumn.Width, predicate: () => template.ViewColumn.Width != 0);
                    _headerColumnStyleBuilder.AddIf("--m-configurable-table-actions-count", ActionsCount.ToString(), isActionsType);
                    _headerColumnStyleBuilder.AddIf("display", "none", hidden);
                }

                <th class="masa-table-viewer__header-column @sortableHandleCss @type"
                    style="@_headerColumnStyleBuilder.Build()"
                    @key="@(template.Column.Id)"
                    @attributes="@context.Attrs">
                    @if (!hidden)
                    {
                        <div class="masa-table-viewer__header-column-content">
                            @Templates.GenTypeIcon(template.Column.Type, true)
                            <span class="text-truncate">
                                @template.Column.Name
                            </span>
                            <MSpacer/>
                            <Dropdown Icon="mdi-menu-down-outline">
                                <DropdownItem Title="Edit" PrependIcon="mdi-pencil-outline" OnClick="@(() => OnColumnEditClick.InvokeAsync(template.Column))"></DropdownItem>
                                <DropdownItem Title="Hide" PrependIcon="mdi-eye-off-outline" OnClick="@(() => OnColumnToggle.InvokeAsync(template.Column.Id))"></DropdownItem>
                            </Dropdown>
                        </div>
                        @if (!isActionsType)
                        {
                            <Resizor />
                        }
                    }
                </th>
            </ItemContent>
        </MSortableProvider>
    </tr>
    </thead>
    <tbody>
    <Virtualize ItemsProvider="@ItemsProvider"
                Context="item"
                ItemSize="RowHeightValue"
                OverscanCount="1">
        <tr class="masa-table-viewer__row">
            @foreach (var template in OrderedColumnTemplates)
            {
                var type = template.Column.Type.ToString().ToLowerInvariant();
                var hidden = HiddenColumnIds.Contains(template.Column.Id);

                <td class="@type"
                    style="@(hidden ? "display:none" : "")"
                    @key="template.Column.Id">
                    @if (!hidden)
                    {
                        <div class="masa-table-viewer__cell @type">
                            <div class="masa-table-viewer__cell-content">
                                @GenCell(template.Column, template.Value?.Invoke(item), item)
                            </div>
                        </div>
                    }
                </td>
            }
        </tr>
    </Virtualize>
    </tbody>
</MSimpleTable>

<MDialog @bind-Value="_imageViewer"
         @bind-Value:after="OnImageViewerChanged"
         ContentClass="image-viewer">
    <MCarousel HideDelimiters
               ShowArrows="@(_imagesToView.Count > 1)">
        @foreach (var item in _imagesToView)
        {
            <MCarouselItem Src="@item" OnClick="@(() => _imageViewer = false)">
            </MCarouselItem>
        }
    </MCarousel>
</MDialog>

@code {

    private RenderFragment GenCell(Column column, object? value, TItem? item = default) => __builder =>
    {
        switch (column.Type)
        {
            case ColumnType.Checkbox:
                var isChecked = (bool?)value is true;
                <MIcon Icon="@(isChecked ? "$checkboxOn" : "$checkboxOff")"
                       Color="@(isChecked ? "primary" : "")">
                </MIcon>
                break;
            case ColumnType.Text:
                @value?.ToString()
                break;
            case ColumnType.Email:
                @if (value is not null)
                {
                    <a href="mailto:@value">@value</a>
                }

                break;
            case ColumnType.Link:
                <a href="@value" target="_blank">@value</a>
                break;
            case ColumnType.Phone:
                @if (value is not null)
                {
                    <a href="tel:@value">@value</a>
                }

                break;
            case ColumnType.Image:
                @GenImageCell(value)
                break;
            case ColumnType.Select:
                @GenSelectCell(column.ConfigObject, value)
                break;
            case ColumnType.MultiSelect:
                @GenMultiSelectCell(column.ConfigObject, value)
                break;
            case ColumnType.Date:
                @GenDateCell(column.ConfigObject, value)
                break;
            case ColumnType.Number:
                @GenNumberCell(column.ConfigObject, value)
                break;
            case ColumnType.Progress:
                @GenProgressCell(column.ConfigObject, value)
                break;
            case ColumnType.Rating:
                @GenRatingCell(value)
                break;
            case ColumnType.Actions:
                @GenActionsCell(column.ConfigObject, value, item)
                break;
        }
    };

    private RenderFragment GenDateCell(object? configObject, object? value) => __builder =>
    {
        var format = CultureInfo.CurrentUICulture.DateTimeFormat.FullDateTimePattern;
        if (configObject is DateConfig dateConfig)
        {
            format = dateConfig.Format!;
        }

        if (DateTimeOffset.TryParse(value?.ToString(), out var date))
        {
            @date.ToString(format)
        }
        else
        {
            @value
        }
    };

    private RenderFragment GenSelectCell(object? configObject, object? value) => __builder =>
    {
        var text = value?.ToString();
        if (configObject is SelectConfig config)
        {
            var option = config.Options.FirstOrDefault(u => u.Value == text);
            if (option is not null)
            {
                text = option.Label;

                if (config.Color)
                {
                    var isDarken = option.Color?.Contains("darken") is true;
                    <MChip Label Small Color="@option.Color" Dark="isDarken">@text</MChip>
                    return;
                }
            }
        }

        @text
    };


    private RenderFragment GenMultiSelectCell(object? configObject, object? value) => __builder =>
    {
        IList<string?> values = [];

        if (value is IEnumerable enumerable)
        {
            foreach (var obj in enumerable)
            {
                values.Add(obj?.ToString());
            }
        }

        if (configObject is SelectConfig config)
        {
            foreach (var item in values)
            {
                var option = config.Options.FirstOrDefault(u => u.Value == item);
                var label = option?.Label ?? item;
                if (config.Color)
                {
                    var isDarken = option?.Color?.Contains("darken") is true;
                    <MChip Label Small Color="@option?.Color" Dark="isDarken">@label</MChip>
                }
                else
                {
                    <span class="option">@label</span>
                }
            }

            return;
        }

        foreach (var item in values)
        {
            <span class="option">@item</span>
        }
    };

    private RenderFragment GenProgressCell(object? configObject, object? value) => __builder =>
    {
        if (configObject is ProgressConfig config)
        {
            if (int.TryParse(value?.ToString(), out var progress))
            {
                <MProgressLinear Value="progress"
                                 Color="@config.Color"
                                 Height="8"
                                 Striped="@config.Striped">
                </MProgressLinear>
            }
            else
            {
                @("Invalid progress value: " + value)
            }

            return;
        }

        @value
    };

    private RenderFragment GenRatingCell(object? value) => __builder =>
    {
        if (double.TryParse(value?.ToString(), out var rating))
        {
            <MRating Value="@rating"
                     Color="yellow darken-3"
                     BackgroundColor="grey darken-1"
                     EmptyIcon="mdi-star"
                     Small
                     HalfIncrements
                     Readonly>
            </MRating>

            return;
        }

        @value
    };

    private RenderFragment GenNumberCell(object? configObject, object? value) => __builder =>
    {
        if (configObject is NumberConfig config)
        {
            if (double.TryParse(value?.ToString(), out var number))
            {
                var format = config.Type switch
                {
                    NumberType.Currency => "C",
                    NumberType.Number => "N",
                    NumberType.Percentage => "P",
                    _ => "D"
                };

                @number.ToString(format, new CultureInfo("zh-CN"))
            }
            else
            {
                @value
            }

            return;
        }

        @value
    };

    private RenderFragment GenImageCell(object? value) => __builder =>
    {
        List<string> urls = [];

        if (value is string str)
        {
            urls.Add(str);
        }
        else if (value is IEnumerable enumerable)
        {
            foreach (var item in enumerable)
            {
                if (item is string str2)
                {
                    urls.Add(str2);
                }
            }
        }

        if (urls.Count > 0)
        {
            <div class="image-list" @onclick="@(() => OpenImageViewer(urls))">
                @foreach (var url in urls)
                {
                    <img src="@url" alt=""/>
                }
            </div>

            return;
        }

        @value
    };

    private RenderFragment GenActionsCell(object? columnConfig, object? value, TItem item) => __builder =>
    {
        ActionsConfig config = columnConfig as ActionsConfig ?? new ActionsConfig();

        @GenAction(OnUpdate, config.UpdateIcon, config.UpdateTooltip, item)
        @GenAction(OnDelete, config.DeleteIcon, config.DeleteTooltip, item)
        @GenAction(OnAction1, config.Action1Icon, config.Action1Tooltip, item)
        @GenAction(OnAction2, config.Action2Icon, config.Action2Tooltip, item)
    };

    private RenderFragment GenAction(EventCallback<TItem> callback, string? icon, string? tooltip, TItem item) => __builder =>
    {
        @if (callback.HasDelegate)
        {
            <MTooltip Top Disabled="@(tooltip is null)">
                <ActivatorContent>
                    <MButton IconName="@icon"
                             Small
                             OnClick="@(() => callback.InvokeAsync(item))"
                             @attributes="@context.Attrs">
                    </MButton>
                </ActivatorContent>
                <ChildContent>
                    @tooltip
                </ChildContent>
            </MTooltip>
        }
    };

}