<MDialog @bind-Value="_menu"
         @bind-Value:after="OnDialogChanged"
         Width="440"
         ContentClass="px-6 pt-7 pb-6"
         Persistent>
    <MForm OnValidSubmit="@HandleOnSubmit">
        <MTextField @bind-Value="@_column.Name"
                    Filled
                    TValue="string"
                    OnChange="@HandleOnColumnNameChange"
                    Label="column-name"
                    Required>
        </MTextField>
        <MSelect @bind-Value="@_column.Type"
                 Items="@_columnTypeMetadata"
                 ItemValue="u => u.Value"
                 ItemText="u => u.Name"
                 Filled
                 Label="column-type"
                 HideDetails="true"
                 TItem="(string Name, ColumnType Value)"
                 TItemValue="ColumnType"
                 TValue="ColumnType"
                 OnSelect="@HandleOnColumnTypeSelect">
        </MSelect>

        <div class="mt-6">
            @if (_column.Type == ColumnType.Date)
            {
                <DateConfigInput @bind-Value="@_column.Config"/>
            }
            else if (_column.Type == ColumnType.Select)
            {
                <SelectConfigInput @bind-Value="@_column.Config"/>
            }
        </div>

        <div class="d-flex justify-end mt-4">
            <MButton Class="mr-2" OnClick="@(() => _menu = false)">Cancel</MButton>
            <MButton Type="submit" Color="primary">Confirm</MButton>
        </div>
    </MForm>
</MDialog>

@code {

    [Parameter] public EventCallback<Column> OnSave { get; set; }

    private bool _menu;

    private Column _column = new();

    private bool _isNameDirty;

    private static IList<(string Name, ColumnType Value)> _columnTypeMetadata = GetEnumMetadata<ColumnType>();

    private void HandleOnColumnNameChange()
    {
        _isNameDirty = true;
    }

    private void HandleOnColumnTypeSelect(((string Name, ColumnType Value) Item, bool Selected) item)
    {
        _column.Config = null;

        if (_isNameDirty)
        {
            return;
        }

        _column.Name = item.Item.Name;
    }

    private void HandleOnSubmit()
    {
        Console.Out.WriteLine($"HandleOnSubmit {_column.Config}");

        OnSave.InvokeAsync(_column);
        _menu = false;
    }

    public static IList<(string Name, T Value)> GetEnumMetadata<T>() where T : Enum
    {
        var metadataList = new List<(string Name, T Value)>();
        foreach (var value in Enum.GetValues(typeof(T)))
        {
            metadataList.Add((value.ToString(), (T)value));
        }

        return metadataList;
    }

    private void OnDialogChanged()
    {
        if (!_menu)
        {
            _column.Config = null;
        }
    }

    internal void Open(Column column)
    {
        _column = new Column()
        {
            Id = column.Id,
            Name = column.Name,
            Type = column.Type,
            Config = column.Config
        };

        _menu = true;
        StateHasChanged();
    }

    internal void Open()
    {
        _column = new Column
        {
            Name = nameof(ColumnType.Text),
            Type = ColumnType.Text
        };
        _isNameDirty = false;
        _menu = true;
        StateHasChanged();
    }

}