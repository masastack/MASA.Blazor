@using System.Text.Json
@typeparam TItem
@attribute [CascadingTypeParameter(nameof(TItem))]
@inject IPopupService PopupService

<div class="masa-table">
    <div class="d-flex">
        <MSpacer/>
        <MSelect @bind-Value="@_selectedMode"
                 Items="@_modes"
                 ItemValue="u => u"
                 ItemText="u => u"
                 Label="Mode"
                 Dense
                 Outlined
                 HideDetails="true"
                 Style="max-width: 160px;"
                 MenuProps="@(m => { m.Transition = "slide-y-transition"; m.OffsetY = true; })">
        </MSelect>
    </div>

    @if (_internalSheet is not null)
    {
        <Toolbar Mode="@_selectedMode"
                 ActiveView="@_internalSheet.ActiveViewId"
                 ActiveViewChanged="@HandleOnActiveViewChanged"
                 ColumnOrder="@_columnOrder"
                 ColumnOrderChanged="@HandleOnColumnOrderChanged"
                 RowHeight="_rowHeight"
                 RowHeightChanged="@HandleOnRowHeightChanged"
                 Views="_internalSheet.Views"
                 Columns="_internalSheet.Columns"
                 OnViewAdd="@AddNewView"
                 OnViewRename="@RenameView"
                 OnViewDelete="@DeleteView"
                 OnColumnEditClick="@OpenColumnEditDialog"
                 HiddenColumnIds="@_hiddenColumnIds"
                 OnColumnToggle="@ToggleColumn"
                 OnRelease="@Release"/>
    }

    <Viewer ColumnTemplates="@_activeViewColumns"
            HiddenColumnIds="@_hiddenColumnIds"
            ColumnOrder="_columnOrder"
            RowHeight="@_rowHeight"
            Rows="@Items"/>
</div>

<ColumnDialog @ref="_columnEditDialog"
              OnSave="UpsertColumn">
</ColumnDialog>

@code {

    private HashSet<string> _hiddenColumnIds = [];
    private ColumnDialog? _columnEditDialog;
    private RowHeight _rowHeight;

    private void AddNewView()
    {
        var view = new View()
        {
            Id = Guid.NewGuid(),
            Name = "New view",
            Type = ViewType.Grid,
            Columns = _internalSheet.ActiveView.Columns.Select(u => u.Create(u.ColumnId)).ToList()
        };

        _internalSheet.Views.Add(view);

        HandleOnActiveViewChanged(view.Id);
    }

    private void RenameView((Guid id, string Name) args)
    {
        var view = _internalSheet.Views.FirstOrDefault(u => u.Id == args.id);
        if (view is not null)
        {
            view.Name = args.Name;
        }
    }

    private async Task DeleteView(View view)
    {
        if (_internalSheet.Views.Count < 1)
        {
            return;
        }

        var confirmed =
            await PopupService.ConfirmAsync(
                "Delete view",
                $"Are you sure you want to delete this view ({view.Name})?",
                AlertTypes.Error);

        if (!confirmed) return;

        if (_internalSheet.ActiveViewId == view.Id)
        {
            _internalSheet.Views.Remove(_internalSheet.ActiveView);
            _internalSheet.ActiveViewId = _internalSheet.Views.First().Id;
        }
        else
        {
            var index = _internalSheet.Views.IndexOf(view);
            _internalSheet.Views.RemoveAt(index);
        }
    }

    private void ToggleColumn(string columnId)
    {
        var viewColumn = _internalSheet.ActiveView.Columns.FirstOrDefault(u => u.ColumnId == columnId);
        if (viewColumn.Hidden)
        {
            viewColumn.Hidden = false;
            _hiddenColumnIds.Remove(columnId);
        }
        else
        {
            viewColumn.Hidden = true;
            _hiddenColumnIds.Add(columnId);
        }
    }

    private void OpenColumnEditDialog(Column column)
    {
        _columnEditDialog?.Open(column);
    }

    private void UpsertColumn(Column data)
    {
        if (data.Id == null)
        {
            // TODO: add new column, need this?
            return;
        }

        // update column

        var column = _internalSheet!.Columns.FirstOrDefault(u => u.Id == data.Id);
        if (column is null)
        {
            return;
        }

        column.Name = data.Name;
        column.Type = data.Type;
        column.Config = data.Config;
    }

    private void HandleOnActiveViewChanged(Guid viewId)
    {
        _internalSheet.ActiveViewId = viewId;

        _rowHeight = _internalSheet.ActiveView.RowHeight;

        _columnOrder.Clear();
        _hiddenColumnIds.Clear();

        foreach (var viewColumn in _internalSheet.ActiveView.Columns)
        {
            _activeViewColumns.FirstOrDefault(u => u.Column.Id == viewColumn.ColumnId).ViewColumn = viewColumn;

            if (viewColumn.Hidden)
            {
                _hiddenColumnIds.Add(viewColumn.ColumnId);
            }

            _columnOrder.Add(viewColumn.ColumnId);
        }

        Console.Out.WriteLine("[MasaTable] HandleOnActiveViewChanged: " + JsonSerializer.Serialize(_columnOrder));
    }

    private void HandleOnColumnOrderChanged(List<string> order)
    {
        _columnOrder = order;

        _internalSheet.ActiveView.Columns.Sort((x, y) =>
        {
            var xIndex = order.IndexOf(x.ColumnId);
            var yIndex = order.IndexOf(y.ColumnId);
            return xIndex.CompareTo(yIndex);
        });
    }

    private void HandleOnRowHeightChanged(RowHeight rowHeight)
    {
        _rowHeight = rowHeight;

        _internalSheet.ActiveView.RowHeight = rowHeight;
    }

}