@namespace Masa.Blazor.MasaTable
@using System.Globalization
@typeparam TItem

<div class="masa-table-viewer masa-table-viewer--@RowHeight.ToString().ToLowerInvariant()">
    <table>
        <thead>
        <tr>
            <th>
                <div class="masa-table-viewer__header">
                    <div class=""></div>
                    @foreach (var template in ComputedColumnTemplates)
                    {
                        <div class="masa-table-viewer__header-column"
                             style="">
                            <div class="masa-table-viewer__header-column-content">
                                @RenderFragments.GenTypeIcon(template.Column.Type, true)
                                @template.Column.Name
                                @* <MSpacer/> *@
                                @* <MMenu MinWidth="180" OffsetY> *@
                                @*     <ActivatorContent> *@
                                @*         <MButton Class="menu" *@
                                @*                  Small *@
                                @*                  IconName="mdi-menu-down-outline" *@
                                @*                  @attributes="@context.Attrs"> *@
                                @*         </MButton> *@
                                @*     </ActivatorContent> *@
                                @*     <ChildContent> *@
                                @*         <MList Dense Class="masa-table-viewer__header_column-menu-content"> *@
                                @*             <MListItem Link *@
                                @*                        PrependIcon="mdi-eye-off-outline" *@
                                @*                        Title="Hide" *@
                                @*                        OnClick="@(() => HandleOnColumnHide(item.Id))"/> *@
                                @*             <MListItem Link *@
                                @*                        PrependIcon="mdi-delete-variant" *@
                                @*                        Title="Delete" *@
                                @*                        OnClick="@(() => HandleOnColumnDelete(item.Id))"/> *@
                                @*         </MList> *@
                                @*     </ChildContent> *@
                                @* </MMenu> *@
                            </div>
                        </div>
                    }
                    <div class="masa-table-viewer__header-column">
                        <div class="masa-table-viewer__header-column-content">
                            <ColumnEdit></ColumnEdit>
                        </div>
                    </div>
                </div>
            </th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in Rows)
        {
            <tr>
                <td>
                    <div class="masa-table-viewer__row">
                        @foreach (var template in ComputedColumnTemplates)
                        {
                            <div class="masa-table-viewer__cell @template.Column.Type.ToString().ToLowerInvariant()">
                                <div class="masa-table-viewer__cell-content">
                                    @GenCell(template.Column, template.Value.Invoke(item))
                                </div>
                            </div>
                        }
                    </div>
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>

@code {

    private RenderFragment GenCell(Column column, object value) => __builder =>
    {
        switch (column.Type)
        {
            case ColumnType.Checkbox:
                var isChecked = (bool)value;
                <MIcon Icon="@(isChecked ? "$checkboxOn" : "$checkboxOff")"
                       Color="@(isChecked ? "primary" : "")">
                </MIcon>
                break;
            case ColumnType.Text:
                @value.ToString()
                break;
            case ColumnType.Email:
                break;
            case ColumnType.Link:
                <a href="@value" target="_blank">@value</a>
                break;
            case ColumnType.Phone:
                break;
            case ColumnType.Image:
                break;
            case ColumnType.Select:
                @GenSelectCell(column.ConfigObject, value)
                break;
            case ColumnType.MultiSelect:
                @GenMultiSelectCell(column.ConfigObject, value)
                break;
            case ColumnType.Date:
                var format = CultureInfo.CurrentUICulture.DateTimeFormat.FullDateTimePattern;
                if (column.ConfigObject is DateConfig dateConfig)
                {
                    format = dateConfig.Format!;
                }

                if (DateTimeOffset.TryParse(value.ToString(), out var date))
                {
                    @date.ToString(format)
                }
                else
                {
                    @value
                }

                break;
            case ColumnType.CreatedAt:
                break;
            case ColumnType.Number:
                break;
            case ColumnType.Progress:
                break;
            case ColumnType.Rate:
                @value.ToString()
                break;
        }
    };

    private RenderFragment GenSelectCell(object? configObject, object value) => __builder =>
    {
        var text = value.ToString();
        if (configObject is SelectConfig config)
        {
            var option = config.Options.FirstOrDefault(u => u.Value == value.ToString());
            if (option is not null)
            {
                text = option.Label;

                if (config.Color)
                {
                    var isDarken = option.Color?.Contains("darken") is true;
                    <MChip Label Small Color="@option.Color" Dark="isDarken">@text</MChip>
                    return;
                }
            }
        }

        @text
    };


    private RenderFragment GenMultiSelectCell(object? configObject, object value) => __builder =>
    {
        if (value is not IEnumerable<string> values)
        {
            return;
        }

        if (configObject is SelectConfig config)
        {
            foreach (var item in values)
            {
                var option = config.Options.FirstOrDefault(u => u.Value == value.ToString());
                if (option is not null)
                {
                    var isDarken = option.Color?.Contains("darken") is true;
                    <MChip Label Small Color="@option.Color" Dark="isDarken">@option.Label</MChip>
                }
                else
                {
                    @(item + ",")
                }
            }
        }

        @(string.Join(", ", values))
    };

}