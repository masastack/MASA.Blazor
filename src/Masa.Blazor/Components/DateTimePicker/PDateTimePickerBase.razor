@namespace Masa.Blazor.Presets
@typeparam TValue
@inherits PDateTimePickerView<TValue>
@inject I18n I18n

@if (Dialog)
{
    <MDialog Value="_menu"
             ValueChanged="OnMenuChanged"
             ActivatorContent="@ActivatorContent"
             ContentClass="@Class">
        <ChildContent>
            @ViewContentRenderFragment()
            @ActionsContentRenderFragment()
        </ChildContent>
    </MDialog>
}
else
{
    <MMenu Value="_menu"
           ValueChanged="OnMenuChanged"
           CloseOnContentClick="false"
           OffsetY
           NudgeBottom="1"
           ActivatorContent="@ActivatorContent"
           ContentClass="@Class">
        <ChildContent>
            @ViewContentRenderFragment()
            @ActionsContentRenderFragment()
        </ChildContent>
    </MMenu>
}

@code {

    protected virtual RenderFragment CompactPickerView() => __builder => { };
    protected virtual RenderFragment DefaultPickerView() => __builder => { };

    private RenderFragment ViewContentRenderFragment() => __builder =>
    {
        @if (Compact)
        {
            @CompactPickerView()
        }
        else
        {
            @DefaultPickerView()
        }
    };

    private RenderFragment ActionsContentRenderFragment() => __builder =>
    {
        <MDivider />
        <div class="@BasePickerBlock.Element("actions")">
            <MButton Color="primary"
                     Text
                     OnClick="OnConfirm"
                     Dark="@Dark"
                     Light="@Light">
                @I18n.T("$masaBlazor.ok")
            </MButton>
        </div>
    };

    [Parameter]
    public RenderFragment<ActivatorProps>? ActivatorContent { get; set; }

    [Parameter]
    public bool Compact { get; set; }

    [Parameter]
    public bool Dialog { get; set; }

    [Parameter]
    public string? TabItemTransition { get; set; }

    private bool _menu;

    internal TValue? InternalDateTime;

    protected virtual string Class => BasePickerBlock.Modifier(Compact).AddTheme(IsDark).Build();

    private void OnMenuChanged(bool val)
    {
        _menu = val;

        if (_menu)
        {
            InternalDateTime = Value;
        }
    }

    private async Task OnConfirm()
    {
        _menu = false;
        await ValueChanged.InvokeAsync(InternalDateTime);
    }

}
