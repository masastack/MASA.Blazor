@namespace Masa.Blazor
@typeparam TValue
@using BemIt
@inherits BDomComponentBase

<div class="@Block.Modifier(Disabled, Readonly).AddTheme(IsDark).Add(Class)"
     style="@(new StyleBuilder().AddHeight(Height).Add(Style).GetStyle())">
    <ul class="@Block.Element("items")" @ref="@_hoursRef">
        @for (var i = 0; i < (Format == TimeFormat.AmPm ? 12 : 24); i = i + HourStep)
        {
            bool isActive;

            if (Format == TimeFormat.AmPm)
            {
                if (ComputedHour == 12 && i == 0)
                {
                    isActive = true;
                }
                else
                {
                    isActive = ComputedHour == i;
                }
            }
            else
            {
                isActive = ComputedHour == i;
            }

            var index = i;

            @ItemRenderFragment(index, isActive, HandleOnHourClick, h => TimeHelper.FormatAmHour(h, Format))
        }
    </ul>

    <ul class="@Block.Element("items")" @ref="@_minutesRef">
        @ItemsRenderFragment(60, MinuteStep, Minute, HandleOnMinuteClick)
    </ul>

    @if (UseSeconds)
    {
        <ul class="@Block.Element("items")" @ref="@_secondsRef">
            @ItemsRenderFragment(60, SecondStep, Second, HandleOnSecondClick)
        </ul>
    }

    @if (Format == TimeFormat.AmPm)
    {
        <ul class="@Block.Element("items")">
            @AmPmItemContentRenderFragment(TimePeriod.Am)
            @AmPmItemContentRenderFragment(TimePeriod.Pm)
        </ul>
    }
</div>

@code {

    private RenderFragment ItemsRenderFragment(int count, int step, int? current, Func<int, Task> onClick) => __builder =>
    {
        @for (var i = 0; i < count; i = i + step)
        {
            var isActive = current == i;
            var index = i;

            @ItemRenderFragment(index, isActive, onClick)
        }
    };

    private RenderFragment ItemRenderFragment(int index, bool active, Func<int, Task> onClick, Func<int, string>? format = null) => __builder =>
    {
        <li class="@Block.Element("item").Modifier("active", active)"
            @onclick="() => onClick(index)">
            @ItemContentRenderFragment(format?.Invoke(index) ?? index.ToString("00"), active)
        </li>
    };

    private RenderFragment ItemContentRenderFragment(string content, bool active) => __builder =>
    {
        <div class="@Block.Element("item-content").AddBackgroundColor(Color, active)" ripple="@IsRipple">
            @content
        </div>
    };

    private RenderFragment AmPmItemContentRenderFragment(TimePeriod period) => __builder =>
    {
        var active = _timePeriod == period;

        <li class="@Block.Element("item").Modifier("active", active)" @onclick="() => OnPeriodClick(period)">
            @ItemContentRenderFragment(period == TimePeriod.Am ? "AM" : "PM", active)
        </li>
    };

}
