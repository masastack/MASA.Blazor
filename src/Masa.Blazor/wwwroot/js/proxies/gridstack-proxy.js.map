{"version":3,"file":"gridstack-proxy.js","sources":["../../../../BlazorComponent/src/Component/BlazorComponent.Web/node_modules/gridstack/dist/utils.js","../../../../BlazorComponent/src/Component/BlazorComponent.Web/node_modules/gridstack/dist/gridstack-engine.js","../../../../BlazorComponent/src/Component/BlazorComponent.Web/node_modules/gridstack/dist/types.js","../../../../BlazorComponent/src/Component/BlazorComponent.Web/node_modules/gridstack/dist/dd-manager.js","../../../../BlazorComponent/src/Component/BlazorComponent.Web/node_modules/gridstack/dist/dd-touch.js","../../../../BlazorComponent/src/Component/BlazorComponent.Web/node_modules/gridstack/dist/dd-base-impl.js","../../../../BlazorComponent/src/Component/BlazorComponent.Web/node_modules/gridstack/dist/dd-resizable.js","../../../../BlazorComponent/src/Component/BlazorComponent.Web/node_modules/gridstack/dist/dd-resizable-handle.js","../../../../BlazorComponent/src/Component/BlazorComponent.Web/node_modules/gridstack/dist/dd-element.js","../../../../BlazorComponent/src/Component/BlazorComponent.Web/node_modules/gridstack/dist/dd-draggable.js","../../../../BlazorComponent/src/Component/BlazorComponent.Web/node_modules/gridstack/dist/dd-droppable.js","../../../../BlazorComponent/src/Component/BlazorComponent.Web/node_modules/gridstack/dist/gridstack.js","../../../../BlazorComponent/src/Component/BlazorComponent.Web/node_modules/gridstack/dist/dd-gridstack.js","../../../../BlazorComponent/src/Component/BlazorComponent.Web/src/proxies/gridstack/index.ts","../../../../BlazorComponent/src/Component/BlazorComponent.Web/node_modules/tslib/tslib.es6.js"],"sourcesContent":["\"use strict\";\r\n/**\r\n * utils.ts 7.1.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Utils = exports.obsoleteAttr = exports.obsoleteOptsDel = exports.obsoleteOpts = exports.obsolete = void 0;\r\n/** checks for obsolete method names */\r\n// eslint-disable-next-line\r\nfunction obsolete(self, f, oldName, newName, rev) {\r\n    let wrapper = (...args) => {\r\n        console.warn('gridstack.js: Function `' + oldName + '` is deprecated in ' + rev + ' and has been replaced ' +\r\n            'with `' + newName + '`. It will be **removed** in a future release');\r\n        return f.apply(self, args);\r\n    };\r\n    wrapper.prototype = f.prototype;\r\n    return wrapper;\r\n}\r\nexports.obsolete = obsolete;\r\n/** checks for obsolete grid options (can be used for any fields, but msg is about options) */\r\nfunction obsoleteOpts(opts, oldName, newName, rev) {\r\n    if (opts[oldName] !== undefined) {\r\n        opts[newName] = opts[oldName];\r\n        console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + ' and has been replaced with `' +\r\n            newName + '`. It will be **removed** in a future release');\r\n    }\r\n}\r\nexports.obsoleteOpts = obsoleteOpts;\r\n/** checks for obsolete grid options which are gone */\r\nfunction obsoleteOptsDel(opts, oldName, rev, info) {\r\n    if (opts[oldName] !== undefined) {\r\n        console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + info);\r\n    }\r\n}\r\nexports.obsoleteOptsDel = obsoleteOptsDel;\r\n/** checks for obsolete Jquery element attributes */\r\nfunction obsoleteAttr(el, oldName, newName, rev) {\r\n    let oldAttr = el.getAttribute(oldName);\r\n    if (oldAttr !== null) {\r\n        el.setAttribute(newName, oldAttr);\r\n        console.warn('gridstack.js: attribute `' + oldName + '`=' + oldAttr + ' is deprecated on this object in ' + rev + ' and has been replaced with `' +\r\n            newName + '`. It will be **removed** in a future release');\r\n    }\r\n}\r\nexports.obsoleteAttr = obsoleteAttr;\r\n/**\r\n * Utility methods\r\n */\r\nclass Utils {\r\n    /** convert a potential selector into actual list of html elements */\r\n    static getElements(els) {\r\n        if (typeof els === 'string') {\r\n            let list = document.querySelectorAll(els);\r\n            if (!list.length && els[0] !== '.' && els[0] !== '#') {\r\n                list = document.querySelectorAll('.' + els);\r\n                if (!list.length) {\r\n                    list = document.querySelectorAll('#' + els);\r\n                }\r\n            }\r\n            return Array.from(list);\r\n        }\r\n        return [els];\r\n    }\r\n    /** convert a potential selector into actual single element */\r\n    static getElement(els) {\r\n        if (typeof els === 'string') {\r\n            if (!els.length)\r\n                return null;\r\n            if (els[0] === '#') {\r\n                return document.getElementById(els.substring(1));\r\n            }\r\n            if (els[0] === '.' || els[0] === '[') {\r\n                return document.querySelector(els);\r\n            }\r\n            // if we start with a digit, assume it's an id (error calling querySelector('#1')) as class are not valid CSS\r\n            if (!isNaN(+els[0])) { // start with digit\r\n                return document.getElementById(els);\r\n            }\r\n            // finally try string, then id then class\r\n            let el = document.querySelector(els);\r\n            if (!el) {\r\n                el = document.getElementById(els);\r\n            }\r\n            if (!el) {\r\n                el = document.querySelector('.' + els);\r\n            }\r\n            return el;\r\n        }\r\n        return els;\r\n    }\r\n    /** returns true if a and b overlap */\r\n    static isIntercepted(a, b) {\r\n        return !(a.y >= b.y + b.h || a.y + a.h <= b.y || a.x + a.w <= b.x || a.x >= b.x + b.w);\r\n    }\r\n    /** returns true if a and b touch edges or corners */\r\n    static isTouching(a, b) {\r\n        return Utils.isIntercepted(a, { x: b.x - 0.5, y: b.y - 0.5, w: b.w + 1, h: b.h + 1 });\r\n    }\r\n    /** returns the area a and b overlap */\r\n    static areaIntercept(a, b) {\r\n        let x0 = (a.x > b.x) ? a.x : b.x;\r\n        let x1 = (a.x + a.w < b.x + b.w) ? a.x + a.w : b.x + b.w;\r\n        if (x1 <= x0)\r\n            return 0; // no overlap\r\n        let y0 = (a.y > b.y) ? a.y : b.y;\r\n        let y1 = (a.y + a.h < b.y + b.h) ? a.y + a.h : b.y + b.h;\r\n        if (y1 <= y0)\r\n            return 0; // no overlap\r\n        return (x1 - x0) * (y1 - y0);\r\n    }\r\n    /** returns the area */\r\n    static area(a) {\r\n        return a.w * a.h;\r\n    }\r\n    /**\r\n     * Sorts array of nodes\r\n     * @param nodes array to sort\r\n     * @param dir 1 for asc, -1 for desc (optional)\r\n     * @param width width of the grid. If undefined the width will be calculated automatically (optional).\r\n     **/\r\n    static sort(nodes, dir, column) {\r\n        column = column || nodes.reduce((col, n) => Math.max(n.x + n.w, col), 0) || 12;\r\n        if (dir === -1)\r\n            return nodes.sort((a, b) => (b.x + b.y * column) - (a.x + a.y * column));\r\n        else\r\n            return nodes.sort((b, a) => (b.x + b.y * column) - (a.x + a.y * column));\r\n    }\r\n    /**\r\n     * creates a style sheet with style id under given parent\r\n     * @param id will set the 'gs-style-id' attribute to that id\r\n     * @param parent to insert the stylesheet as first child,\r\n     * if none supplied it will be appended to the document head instead.\r\n     */\r\n    static createStylesheet(id, parent) {\r\n        let style = document.createElement('style');\r\n        style.setAttribute('type', 'text/css');\r\n        style.setAttribute('gs-style-id', id);\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        if (style.styleSheet) { // TODO: only CSSImportRule have that and different beast ??\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            style.styleSheet.cssText = '';\r\n        }\r\n        else {\r\n            style.appendChild(document.createTextNode('')); // WebKit hack\r\n        }\r\n        if (!parent) {\r\n            // default to head\r\n            parent = document.getElementsByTagName('head')[0];\r\n            parent.appendChild(style);\r\n        }\r\n        else {\r\n            parent.insertBefore(style, parent.firstChild);\r\n        }\r\n        return style.sheet;\r\n    }\r\n    /** removed the given stylesheet id */\r\n    static removeStylesheet(id) {\r\n        let el = document.querySelector('STYLE[gs-style-id=' + id + ']');\r\n        if (el && el.parentNode)\r\n            el.remove();\r\n    }\r\n    /** inserts a CSS rule */\r\n    static addCSSRule(sheet, selector, rules) {\r\n        if (typeof sheet.addRule === 'function') {\r\n            sheet.addRule(selector, rules);\r\n        }\r\n        else if (typeof sheet.insertRule === 'function') {\r\n            sheet.insertRule(`${selector}{${rules}}`);\r\n        }\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    static toBool(v) {\r\n        if (typeof v === 'boolean') {\r\n            return v;\r\n        }\r\n        if (typeof v === 'string') {\r\n            v = v.toLowerCase();\r\n            return !(v === '' || v === 'no' || v === 'false' || v === '0');\r\n        }\r\n        return Boolean(v);\r\n    }\r\n    static toNumber(value) {\r\n        return (value === null || value.length === 0) ? undefined : Number(value);\r\n    }\r\n    static parseHeight(val) {\r\n        let h;\r\n        let unit = 'px';\r\n        if (typeof val === 'string') {\r\n            let match = val.match(/^(-[0-9]+\\.[0-9]+|[0-9]*\\.[0-9]+|-[0-9]+|[0-9]+)(px|em|rem|vh|vw|%)?$/);\r\n            if (!match) {\r\n                throw new Error('Invalid height');\r\n            }\r\n            unit = match[2] || 'px';\r\n            h = parseFloat(match[1]);\r\n        }\r\n        else {\r\n            h = val;\r\n        }\r\n        return { h, unit };\r\n    }\r\n    /** copies unset fields in target to use the given default sources values */\r\n    // eslint-disable-next-line\r\n    static defaults(target, ...sources) {\r\n        sources.forEach(source => {\r\n            for (const key in source) {\r\n                if (!source.hasOwnProperty(key))\r\n                    return;\r\n                if (target[key] === null || target[key] === undefined) {\r\n                    target[key] = source[key];\r\n                }\r\n                else if (typeof source[key] === 'object' && typeof target[key] === 'object') {\r\n                    // property is an object, recursively add it's field over... #1373\r\n                    this.defaults(target[key], source[key]);\r\n                }\r\n            }\r\n        });\r\n        return target;\r\n    }\r\n    /** given 2 objects return true if they have the same values. Checks for Object {} having same fields and values (just 1 level down) */\r\n    static same(a, b) {\r\n        if (typeof a !== 'object')\r\n            return a == b;\r\n        if (typeof a !== typeof b)\r\n            return false;\r\n        // else we have object, check just 1 level deep for being same things...\r\n        if (Object.keys(a).length !== Object.keys(b).length)\r\n            return false;\r\n        for (const key in a) {\r\n            if (a[key] !== b[key])\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n    /** copies over b size & position (GridStackPosition), and optionally min/max as well */\r\n    static copyPos(a, b, doMinMax = false) {\r\n        a.x = b.x;\r\n        a.y = b.y;\r\n        a.w = b.w;\r\n        a.h = b.h;\r\n        if (doMinMax) {\r\n            if (b.minW)\r\n                a.minW = b.minW;\r\n            if (b.minH)\r\n                a.minH = b.minH;\r\n            if (b.maxW)\r\n                a.maxW = b.maxW;\r\n            if (b.maxH)\r\n                a.maxH = b.maxH;\r\n        }\r\n        return a;\r\n    }\r\n    /** true if a and b has same size & position */\r\n    static samePos(a, b) {\r\n        return a && b && a.x === b.x && a.y === b.y && a.w === b.w && a.h === b.h;\r\n    }\r\n    /** removes field from the first object if same as the second objects (like diffing) and internal '_' for saving */\r\n    static removeInternalAndSame(a, b) {\r\n        if (typeof a !== 'object' || typeof b !== 'object')\r\n            return;\r\n        for (let key in a) {\r\n            let val = a[key];\r\n            if (key[0] === '_' || val === b[key]) {\r\n                delete a[key];\r\n            }\r\n            else if (val && typeof val === 'object' && b[key] !== undefined) {\r\n                for (let i in val) {\r\n                    if (val[i] === b[key][i] || i[0] === '_') {\r\n                        delete val[i];\r\n                    }\r\n                }\r\n                if (!Object.keys(val).length) {\r\n                    delete a[key];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /** removes internal fields '_' and default values for saving */\r\n    static removeInternalForSave(n, removeEl = true) {\r\n        for (let key in n) {\r\n            if (key[0] === '_' || n[key] === null || n[key] === undefined)\r\n                delete n[key];\r\n        }\r\n        delete n.grid;\r\n        if (removeEl)\r\n            delete n.el;\r\n        // delete default values (will be re-created on read)\r\n        if (!n.autoPosition)\r\n            delete n.autoPosition;\r\n        if (!n.noResize)\r\n            delete n.noResize;\r\n        if (!n.noMove)\r\n            delete n.noMove;\r\n        if (!n.locked)\r\n            delete n.locked;\r\n        if (n.w === 1 || n.w === n.minW)\r\n            delete n.w;\r\n        if (n.h === 1 || n.h === n.minH)\r\n            delete n.h;\r\n    }\r\n    /** return the closest parent (or itself) matching the given class */\r\n    static closestUpByClass(el, name) {\r\n        while (el) {\r\n            if (el.classList.contains(name))\r\n                return el;\r\n            el = el.parentElement;\r\n        }\r\n        return null;\r\n    }\r\n    /** delay calling the given function for given delay, preventing new calls from happening while waiting */\r\n    static throttle(func, delay) {\r\n        let isWaiting = false;\r\n        return (...args) => {\r\n            if (!isWaiting) {\r\n                isWaiting = true;\r\n                setTimeout(() => { func(...args); isWaiting = false; }, delay);\r\n            }\r\n        };\r\n    }\r\n    static removePositioningStyles(el) {\r\n        let style = el.style;\r\n        if (style.position) {\r\n            style.removeProperty('position');\r\n        }\r\n        if (style.left) {\r\n            style.removeProperty('left');\r\n        }\r\n        if (style.top) {\r\n            style.removeProperty('top');\r\n        }\r\n        if (style.width) {\r\n            style.removeProperty('width');\r\n        }\r\n        if (style.height) {\r\n            style.removeProperty('height');\r\n        }\r\n    }\r\n    /** @internal returns the passed element if scrollable, else the closest parent that will, up to the entire document scrolling element */\r\n    static getScrollElement(el) {\r\n        if (!el)\r\n            return document.scrollingElement || document.documentElement; // IE support\r\n        const style = getComputedStyle(el);\r\n        const overflowRegex = /(auto|scroll)/;\r\n        if (overflowRegex.test(style.overflow + style.overflowY)) {\r\n            return el;\r\n        }\r\n        else {\r\n            return this.getScrollElement(el.parentElement);\r\n        }\r\n    }\r\n    /** @internal */\r\n    static updateScrollPosition(el, position, distance) {\r\n        // is widget in view?\r\n        let rect = el.getBoundingClientRect();\r\n        let innerHeightOrClientHeight = (window.innerHeight || document.documentElement.clientHeight);\r\n        if (rect.top < 0 ||\r\n            rect.bottom > innerHeightOrClientHeight) {\r\n            // set scrollTop of first parent that scrolls\r\n            // if parent is larger than el, set as low as possible\r\n            // to get entire widget on screen\r\n            let offsetDiffDown = rect.bottom - innerHeightOrClientHeight;\r\n            let offsetDiffUp = rect.top;\r\n            let scrollEl = this.getScrollElement(el);\r\n            if (scrollEl !== null) {\r\n                let prevScroll = scrollEl.scrollTop;\r\n                if (rect.top < 0 && distance < 0) {\r\n                    // moving up\r\n                    if (el.offsetHeight > innerHeightOrClientHeight) {\r\n                        scrollEl.scrollTop += distance;\r\n                    }\r\n                    else {\r\n                        scrollEl.scrollTop += Math.abs(offsetDiffUp) > Math.abs(distance) ? distance : offsetDiffUp;\r\n                    }\r\n                }\r\n                else if (distance > 0) {\r\n                    // moving down\r\n                    if (el.offsetHeight > innerHeightOrClientHeight) {\r\n                        scrollEl.scrollTop += distance;\r\n                    }\r\n                    else {\r\n                        scrollEl.scrollTop += offsetDiffDown > distance ? distance : offsetDiffDown;\r\n                    }\r\n                }\r\n                // move widget y by amount scrolled\r\n                position.top += scrollEl.scrollTop - prevScroll;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @internal Function used to scroll the page.\r\n     *\r\n     * @param event `MouseEvent` that triggers the resize\r\n     * @param el `HTMLElement` that's being resized\r\n     * @param distance Distance from the V edges to start scrolling\r\n     */\r\n    static updateScrollResize(event, el, distance) {\r\n        const scrollEl = this.getScrollElement(el);\r\n        const height = scrollEl.clientHeight;\r\n        // #1727 event.clientY is relative to viewport, so must compare this against position of scrollEl getBoundingClientRect().top\r\n        // #1745 Special situation if scrollEl is document 'html': here browser spec states that\r\n        // clientHeight is height of viewport, but getBoundingClientRect() is rectangle of html element;\r\n        // this discrepancy arises because in reality scrollbar is attached to viewport, not html element itself.\r\n        const offsetTop = (scrollEl === this.getScrollElement()) ? 0 : scrollEl.getBoundingClientRect().top;\r\n        const pointerPosY = event.clientY - offsetTop;\r\n        const top = pointerPosY < distance;\r\n        const bottom = pointerPosY > height - distance;\r\n        if (top) {\r\n            // This also can be done with a timeout to keep scrolling while the mouse is\r\n            // in the scrolling zone. (will have smoother behavior)\r\n            scrollEl.scrollBy({ behavior: 'smooth', top: pointerPosY - distance });\r\n        }\r\n        else if (bottom) {\r\n            scrollEl.scrollBy({ behavior: 'smooth', top: distance - (height - pointerPosY) });\r\n        }\r\n    }\r\n    /** single level clone, returning a new object with same top fields. This will share sub objects and arrays */\r\n    static clone(obj) {\r\n        if (obj === null || obj === undefined || typeof (obj) !== 'object') {\r\n            return obj;\r\n        }\r\n        // return Object.assign({}, obj);\r\n        if (obj instanceof Array) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            return [...obj];\r\n        }\r\n        return Object.assign({}, obj);\r\n    }\r\n    /**\r\n     * Recursive clone version that returns a full copy, checking for nested objects and arrays ONLY.\r\n     * Note: this will use as-is any key starting with double __ (and not copy inside) some lib have circular dependencies.\r\n     */\r\n    static cloneDeep(obj) {\r\n        // list of fields we will skip during cloneDeep (nested objects, other internal)\r\n        const skipFields = ['parentGrid', 'el', 'grid', 'subGrid', 'engine'];\r\n        // return JSON.parse(JSON.stringify(obj)); // doesn't work with date format ?\r\n        const ret = Utils.clone(obj);\r\n        for (const key in ret) {\r\n            // NOTE: we don't support function/circular dependencies so skip those properties for now...\r\n            if (ret.hasOwnProperty(key) && typeof (ret[key]) === 'object' && key.substring(0, 2) !== '__' && !skipFields.find(k => k === key)) {\r\n                ret[key] = Utils.cloneDeep(obj[key]);\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    /** deep clone the given HTML node, removing teh unique id field */\r\n    static cloneNode(el) {\r\n        const node = el.cloneNode(true);\r\n        node.removeAttribute('id');\r\n        return node;\r\n    }\r\n    static appendTo(el, parent) {\r\n        let parentNode;\r\n        if (typeof parent === 'string') {\r\n            parentNode = document.querySelector(parent);\r\n        }\r\n        else {\r\n            parentNode = parent;\r\n        }\r\n        if (parentNode) {\r\n            parentNode.appendChild(el);\r\n        }\r\n    }\r\n    // public static setPositionRelative(el: HTMLElement): void {\r\n    //   if (!(/^(?:r|a|f)/).test(window.getComputedStyle(el).position)) {\r\n    //     el.style.position = \"relative\";\r\n    //   }\r\n    // }\r\n    static addElStyles(el, styles) {\r\n        if (styles instanceof Object) {\r\n            for (const s in styles) {\r\n                if (styles.hasOwnProperty(s)) {\r\n                    if (Array.isArray(styles[s])) {\r\n                        // support fallback value\r\n                        styles[s].forEach(val => {\r\n                            el.style[s] = val;\r\n                        });\r\n                    }\r\n                    else {\r\n                        el.style[s] = styles[s];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    static initEvent(e, info) {\r\n        const evt = { type: info.type };\r\n        const obj = {\r\n            button: 0,\r\n            which: 0,\r\n            buttons: 1,\r\n            bubbles: true,\r\n            cancelable: true,\r\n            target: info.target ? info.target : e.target\r\n        };\r\n        // don't check for `instanceof DragEvent` as Safari use MouseEvent #1540\r\n        if (e.dataTransfer) {\r\n            evt['dataTransfer'] = e.dataTransfer; // workaround 'readonly' field.\r\n        }\r\n        ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'].forEach(p => evt[p] = e[p]); // keys\r\n        ['pageX', 'pageY', 'clientX', 'clientY', 'screenX', 'screenY'].forEach(p => evt[p] = e[p]); // point info\r\n        return Object.assign(Object.assign({}, evt), obj);\r\n    }\r\n    /** copies the MouseEvent properties and sends it as another event to the given target */\r\n    static simulateMouseEvent(e, simulatedType, target) {\r\n        const simulatedEvent = document.createEvent('MouseEvents');\r\n        simulatedEvent.initMouseEvent(simulatedType, // type\r\n        true, // bubbles\r\n        true, // cancelable\r\n        window, // view\r\n        1, // detail\r\n        e.screenX, // screenX\r\n        e.screenY, // screenY\r\n        e.clientX, // clientX\r\n        e.clientY, // clientY\r\n        e.ctrlKey, // ctrlKey\r\n        e.altKey, // altKey\r\n        e.shiftKey, // shiftKey\r\n        e.metaKey, // metaKey\r\n        0, // button\r\n        e.target // relatedTarget\r\n        );\r\n        (target || e.target).dispatchEvent(simulatedEvent);\r\n    }\r\n}\r\nexports.Utils = Utils;\r\n//# sourceMappingURL=utils.js.map","\"use strict\";\r\n/**\r\n * gridstack-engine.ts 7.1.0\r\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GridStackEngine = void 0;\r\nconst utils_1 = require(\"./utils\");\r\n/**\r\n * Defines the GridStack engine that does most no DOM grid manipulation.\r\n * See GridStack methods and vars for descriptions.\r\n *\r\n * NOTE: values should not be modified directly - call the main GridStack API instead\r\n */\r\nclass GridStackEngine {\r\n    constructor(opts = {}) {\r\n        this.addedNodes = [];\r\n        this.removedNodes = [];\r\n        this.column = opts.column || 12;\r\n        this.maxRow = opts.maxRow;\r\n        this._float = opts.float;\r\n        this.nodes = opts.nodes || [];\r\n        this.onChange = opts.onChange;\r\n    }\r\n    batchUpdate(flag = true) {\r\n        if (!!this.batchMode === flag)\r\n            return this;\r\n        this.batchMode = flag;\r\n        if (flag) {\r\n            this._prevFloat = this._float;\r\n            this._float = true; // let things go anywhere for now... will restore and possibly reposition later\r\n            this.saveInitial(); // since begin update (which is called multiple times) won't do this\r\n        }\r\n        else {\r\n            this._float = this._prevFloat;\r\n            delete this._prevFloat;\r\n            this._packNodes()._notify();\r\n        }\r\n        return this;\r\n    }\r\n    // use entire row for hitting area (will use bottom reverse sorted first) if we not actively moving DOWN and didn't already skip\r\n    _useEntireRowArea(node, nn) {\r\n        return !this.float && !this._hasLocked && (!node._moving || node._skipDown || nn.y <= node.y);\r\n    }\r\n    /** @internal fix collision on given 'node', going to given new location 'nn', with optional 'collide' node already found.\r\n     * return true if we moved. */\r\n    _fixCollisions(node, nn = node, collide, opt = {}) {\r\n        this.sortNodes(-1); // from last to first, so recursive collision move items in the right order\r\n        collide = collide || this.collide(node, nn); // REAL area collide for swap and skip if none...\r\n        if (!collide)\r\n            return false;\r\n        // swap check: if we're actively moving in gravity mode, see if we collide with an object the same size\r\n        if (node._moving && !opt.nested && !this.float) {\r\n            if (this.swap(node, collide))\r\n                return true;\r\n        }\r\n        // during while() collisions MAKE SURE to check entire row so larger items don't leap frog small ones (push them all down starting last in grid)\r\n        let area = nn;\r\n        if (this._useEntireRowArea(node, nn)) {\r\n            area = { x: 0, w: this.column, y: nn.y, h: nn.h };\r\n            collide = this.collide(node, area, opt.skip); // force new hit\r\n        }\r\n        let didMove = false;\r\n        let newOpt = { nested: true, pack: false };\r\n        while (collide = collide || this.collide(node, area, opt.skip)) { // could collide with more than 1 item... so repeat for each\r\n            let moved;\r\n            // if colliding with a locked item OR moving down with top gravity (and collide could move up) -> skip past the collide,\r\n            // but remember that skip down so we only do this once (and push others otherwise).\r\n            if (collide.locked || node._moving && !node._skipDown && nn.y > node.y && !this.float &&\r\n                // can take space we had, or before where we're going\r\n                (!this.collide(collide, Object.assign(Object.assign({}, collide), { y: node.y }), node) || !this.collide(collide, Object.assign(Object.assign({}, collide), { y: nn.y - collide.h }), node))) {\r\n                node._skipDown = (node._skipDown || nn.y > node.y);\r\n                moved = this.moveNode(node, Object.assign(Object.assign(Object.assign({}, nn), { y: collide.y + collide.h }), newOpt));\r\n                if (collide.locked && moved) {\r\n                    utils_1.Utils.copyPos(nn, node); // moving after lock become our new desired location\r\n                }\r\n                else if (!collide.locked && moved && opt.pack) {\r\n                    // we moved after and will pack: do it now and keep the original drop location, but past the old collide to see what else we might push way\r\n                    this._packNodes();\r\n                    nn.y = collide.y + collide.h;\r\n                    utils_1.Utils.copyPos(node, nn);\r\n                }\r\n                didMove = didMove || moved;\r\n            }\r\n            else {\r\n                // move collide down *after* where we will be, ignoring where we are now (don't collide with us)\r\n                moved = this.moveNode(collide, Object.assign(Object.assign(Object.assign({}, collide), { y: nn.y + nn.h, skip: node }), newOpt));\r\n            }\r\n            if (!moved) {\r\n                return didMove;\r\n            } // break inf loop if we couldn't move after all (ex: maxRow, fixed)\r\n            collide = undefined;\r\n        }\r\n        return didMove;\r\n    }\r\n    /** return the nodes that intercept the given node. Optionally a different area can be used, as well as a second node to skip */\r\n    collide(skip, area = skip, skip2) {\r\n        return this.nodes.find(n => n !== skip && n !== skip2 && utils_1.Utils.isIntercepted(n, area));\r\n    }\r\n    collideAll(skip, area = skip, skip2) {\r\n        return this.nodes.filter(n => n !== skip && n !== skip2 && utils_1.Utils.isIntercepted(n, area));\r\n    }\r\n    /** does a pixel coverage collision based on where we started, returning the node that has the most coverage that is >50% mid line */\r\n    directionCollideCoverage(node, o, collides) {\r\n        if (!o.rect || !node._rect)\r\n            return;\r\n        let r0 = node._rect; // where started\r\n        let r = Object.assign({}, o.rect); // where we are\r\n        // update dragged rect to show where it's coming from (above or below, etc...)\r\n        if (r.y > r0.y) {\r\n            r.h += r.y - r0.y;\r\n            r.y = r0.y;\r\n        }\r\n        else {\r\n            r.h += r0.y - r.y;\r\n        }\r\n        if (r.x > r0.x) {\r\n            r.w += r.x - r0.x;\r\n            r.x = r0.x;\r\n        }\r\n        else {\r\n            r.w += r0.x - r.x;\r\n        }\r\n        let collide;\r\n        collides.forEach(n => {\r\n            if (n.locked || !n._rect)\r\n                return;\r\n            let r2 = n._rect; // overlapping target\r\n            let yOver = Number.MAX_VALUE, xOver = Number.MAX_VALUE, overMax = 0.5; // need >50%\r\n            // depending on which side we started from, compute the overlap % of coverage\r\n            // (ex: from above/below we only compute the max horizontal line coverage)\r\n            if (r0.y < r2.y) { // from above\r\n                yOver = ((r.y + r.h) - r2.y) / r2.h;\r\n            }\r\n            else if (r0.y + r0.h > r2.y + r2.h) { // from below\r\n                yOver = ((r2.y + r2.h) - r.y) / r2.h;\r\n            }\r\n            if (r0.x < r2.x) { // from the left\r\n                xOver = ((r.x + r.w) - r2.x) / r2.w;\r\n            }\r\n            else if (r0.x + r0.w > r2.x + r2.w) { // from the right\r\n                xOver = ((r2.x + r2.w) - r.x) / r2.w;\r\n            }\r\n            let over = Math.min(xOver, yOver);\r\n            if (over > overMax) {\r\n                overMax = over;\r\n                collide = n;\r\n            }\r\n        });\r\n        o.collide = collide; // save it so we don't have to find it again\r\n        return collide;\r\n    }\r\n    /** does a pixel coverage returning the node that has the most coverage by area */\r\n    /*\r\n    protected collideCoverage(r: GridStackPosition, collides: GridStackNode[]): {collide: GridStackNode, over: number} {\r\n      let collide: GridStackNode;\r\n      let overMax = 0;\r\n      collides.forEach(n => {\r\n        if (n.locked || !n._rect) return;\r\n        let over = Utils.areaIntercept(r, n._rect);\r\n        if (over > overMax) {\r\n          overMax = over;\r\n          collide = n;\r\n        }\r\n      });\r\n      return {collide, over: overMax};\r\n    }\r\n    */\r\n    /** called to cache the nodes pixel rectangles used for collision detection during drag */\r\n    cacheRects(w, h, top, right, bottom, left) {\r\n        this.nodes.forEach(n => n._rect = {\r\n            y: n.y * h + top,\r\n            x: n.x * w + left,\r\n            w: n.w * w - left - right,\r\n            h: n.h * h - top - bottom\r\n        });\r\n        return this;\r\n    }\r\n    /** called to possibly swap between 2 nodes (same size or column, not locked, touching), returning true if successful */\r\n    swap(a, b) {\r\n        if (!b || b.locked || !a || a.locked)\r\n            return false;\r\n        function _doSwap() {\r\n            let x = b.x, y = b.y;\r\n            b.x = a.x;\r\n            b.y = a.y; // b -> a position\r\n            if (a.h != b.h) {\r\n                a.x = x;\r\n                a.y = b.y + b.h; // a -> goes after b\r\n            }\r\n            else if (a.w != b.w) {\r\n                a.x = b.x + b.w;\r\n                a.y = y; // a -> goes after b\r\n            }\r\n            else {\r\n                a.x = x;\r\n                a.y = y; // a -> old b position\r\n            }\r\n            a._dirty = b._dirty = true;\r\n            return true;\r\n        }\r\n        let touching; // remember if we called it (vs undefined)\r\n        // same size and same row or column, and touching\r\n        if (a.w === b.w && a.h === b.h && (a.x === b.x || a.y === b.y) && (touching = utils_1.Utils.isTouching(a, b)))\r\n            return _doSwap();\r\n        if (touching === false)\r\n            return; // IFF ran test and fail, bail out\r\n        // check for taking same columns (but different height) and touching\r\n        if (a.w === b.w && a.x === b.x && (touching || (touching = utils_1.Utils.isTouching(a, b)))) {\r\n            if (b.y < a.y) {\r\n                let t = a;\r\n                a = b;\r\n                b = t;\r\n            } // swap a <-> b vars so a is first\r\n            return _doSwap();\r\n        }\r\n        if (touching === false)\r\n            return;\r\n        // check if taking same row (but different width) and touching\r\n        if (a.h === b.h && a.y === b.y && (touching || (touching = utils_1.Utils.isTouching(a, b)))) {\r\n            if (b.x < a.x) {\r\n                let t = a;\r\n                a = b;\r\n                b = t;\r\n            } // swap a <-> b vars so a is first\r\n            return _doSwap();\r\n        }\r\n        return false;\r\n    }\r\n    isAreaEmpty(x, y, w, h) {\r\n        let nn = { x: x || 0, y: y || 0, w: w || 1, h: h || 1 };\r\n        return !this.collide(nn);\r\n    }\r\n    /** re-layout grid items to reclaim any empty space */\r\n    compact() {\r\n        if (this.nodes.length === 0)\r\n            return this;\r\n        this.batchUpdate()\r\n            .sortNodes();\r\n        let copyNodes = this.nodes;\r\n        this.nodes = []; // pretend we have no nodes to conflict layout to start with...\r\n        copyNodes.forEach(node => {\r\n            if (!node.locked) {\r\n                node.autoPosition = true;\r\n            }\r\n            this.addNode(node, false); // 'false' for add event trigger\r\n            node._dirty = true; // will force attr update\r\n        });\r\n        return this.batchUpdate(false);\r\n    }\r\n    /** enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html) */\r\n    set float(val) {\r\n        if (this._float === val)\r\n            return;\r\n        this._float = val || false;\r\n        if (!val) {\r\n            this._packNodes()._notify();\r\n        }\r\n    }\r\n    /** float getter method */\r\n    get float() { return this._float || false; }\r\n    /** sort the nodes array from first to last, or reverse. Called during collision/placement to force an order */\r\n    sortNodes(dir) {\r\n        this.nodes = utils_1.Utils.sort(this.nodes, dir, this.column);\r\n        return this;\r\n    }\r\n    /** @internal called to top gravity pack the items back OR revert back to original Y positions when floating */\r\n    _packNodes() {\r\n        if (this.batchMode) {\r\n            return this;\r\n        }\r\n        this.sortNodes(); // first to last\r\n        if (this.float) {\r\n            // restore original Y pos\r\n            this.nodes.forEach(n => {\r\n                if (n._updating || n._orig === undefined || n.y === n._orig.y)\r\n                    return;\r\n                let newY = n.y;\r\n                while (newY > n._orig.y) {\r\n                    --newY;\r\n                    let collide = this.collide(n, { x: n.x, y: newY, w: n.w, h: n.h });\r\n                    if (!collide) {\r\n                        n._dirty = true;\r\n                        n.y = newY;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            // top gravity pack\r\n            this.nodes.forEach((n, i) => {\r\n                if (n.locked)\r\n                    return;\r\n                while (n.y > 0) {\r\n                    let newY = i === 0 ? 0 : n.y - 1;\r\n                    let canBeMoved = i === 0 || !this.collide(n, { x: n.x, y: newY, w: n.w, h: n.h });\r\n                    if (!canBeMoved)\r\n                        break;\r\n                    // Note: must be dirty (from last position) for GridStack::OnChange CB to update positions\r\n                    // and move items back. The user 'change' CB should detect changes from the original\r\n                    // starting position instead.\r\n                    n._dirty = (n.y !== newY);\r\n                    n.y = newY;\r\n                }\r\n            });\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * given a random node, makes sure it's coordinates/values are valid in the current grid\r\n     * @param node to adjust\r\n     * @param resizing if out of bound, resize down or move into the grid to fit ?\r\n     */\r\n    prepareNode(node, resizing) {\r\n        node = node || {};\r\n        node._id = node._id || GridStackEngine._idSeq++;\r\n        // if we're missing position, have the grid position us automatically (before we set them to 0,0)\r\n        if (node.x === undefined || node.y === undefined || node.x === null || node.y === null) {\r\n            node.autoPosition = true;\r\n        }\r\n        // assign defaults for missing required fields\r\n        let defaults = { x: 0, y: 0, w: 1, h: 1 };\r\n        utils_1.Utils.defaults(node, defaults);\r\n        if (!node.autoPosition) {\r\n            delete node.autoPosition;\r\n        }\r\n        if (!node.noResize) {\r\n            delete node.noResize;\r\n        }\r\n        if (!node.noMove) {\r\n            delete node.noMove;\r\n        }\r\n        // check for NaN (in case messed up strings were passed. can't do parseInt() || defaults.x above as 0 is valid #)\r\n        if (typeof node.x == 'string') {\r\n            node.x = Number(node.x);\r\n        }\r\n        if (typeof node.y == 'string') {\r\n            node.y = Number(node.y);\r\n        }\r\n        if (typeof node.w == 'string') {\r\n            node.w = Number(node.w);\r\n        }\r\n        if (typeof node.h == 'string') {\r\n            node.h = Number(node.h);\r\n        }\r\n        if (isNaN(node.x)) {\r\n            node.x = defaults.x;\r\n            node.autoPosition = true;\r\n        }\r\n        if (isNaN(node.y)) {\r\n            node.y = defaults.y;\r\n            node.autoPosition = true;\r\n        }\r\n        if (isNaN(node.w)) {\r\n            node.w = defaults.w;\r\n        }\r\n        if (isNaN(node.h)) {\r\n            node.h = defaults.h;\r\n        }\r\n        return this.nodeBoundFix(node, resizing);\r\n    }\r\n    /** part2 of preparing a node to fit inside our grid - checks for x,y,w from grid dimensions */\r\n    nodeBoundFix(node, resizing) {\r\n        let before = node._orig || utils_1.Utils.copyPos({}, node);\r\n        if (node.maxW) {\r\n            node.w = Math.min(node.w, node.maxW);\r\n        }\r\n        if (node.maxH) {\r\n            node.h = Math.min(node.h, node.maxH);\r\n        }\r\n        if (node.minW && node.minW <= this.column) {\r\n            node.w = Math.max(node.w, node.minW);\r\n        }\r\n        if (node.minH) {\r\n            node.h = Math.max(node.h, node.minH);\r\n        }\r\n        // if user loaded a larger than allowed widget for current # of columns (or force 1 column mode),\r\n        // remember it's position & width so we can restore back (1 -> 12 column) #1655 #1985\r\n        // IFF we're not in the middle of column resizing!\r\n        const saveOrig = this.column === 1 || node.x + node.w > this.column;\r\n        if (saveOrig && this.column < 12 && !this._inColumnResize && !node.autoPosition && node._id && this.findCacheLayout(node, 12) === -1) {\r\n            let copy = Object.assign({}, node); // need _id + positions\r\n            copy.x = Math.min(11, copy.x);\r\n            copy.w = Math.min(12, copy.w);\r\n            this.cacheOneLayout(copy, 12);\r\n        }\r\n        if (node.w > this.column) {\r\n            node.w = this.column;\r\n        }\r\n        else if (node.w < 1) {\r\n            node.w = 1;\r\n        }\r\n        if (this.maxRow && node.h > this.maxRow) {\r\n            node.h = this.maxRow;\r\n        }\r\n        else if (node.h < 1) {\r\n            node.h = 1;\r\n        }\r\n        if (node.x < 0) {\r\n            node.x = 0;\r\n        }\r\n        if (node.y < 0) {\r\n            node.y = 0;\r\n        }\r\n        if (node.x + node.w > this.column) {\r\n            if (resizing) {\r\n                node.w = this.column - node.x;\r\n            }\r\n            else {\r\n                node.x = this.column - node.w;\r\n            }\r\n        }\r\n        if (this.maxRow && node.y + node.h > this.maxRow) {\r\n            if (resizing) {\r\n                node.h = this.maxRow - node.y;\r\n            }\r\n            else {\r\n                node.y = this.maxRow - node.h;\r\n            }\r\n        }\r\n        if (!utils_1.Utils.samePos(node, before)) {\r\n            node._dirty = true;\r\n        }\r\n        return node;\r\n    }\r\n    /** returns a list of modified nodes from their original values */\r\n    getDirtyNodes(verify) {\r\n        // compare original x,y,w,h instead as _dirty can be a temporary state\r\n        if (verify) {\r\n            return this.nodes.filter(n => n._dirty && !utils_1.Utils.samePos(n, n._orig));\r\n        }\r\n        return this.nodes.filter(n => n._dirty);\r\n    }\r\n    /** @internal call this to call onChange callback with dirty nodes so DOM can be updated */\r\n    _notify(removedNodes) {\r\n        if (this.batchMode || !this.onChange)\r\n            return this;\r\n        let dirtyNodes = (removedNodes || []).concat(this.getDirtyNodes());\r\n        this.onChange(dirtyNodes);\r\n        return this;\r\n    }\r\n    /** @internal remove dirty and last tried info */\r\n    cleanNodes() {\r\n        if (this.batchMode)\r\n            return this;\r\n        this.nodes.forEach(n => {\r\n            delete n._dirty;\r\n            delete n._lastTried;\r\n        });\r\n        return this;\r\n    }\r\n    /** @internal called to save initial position/size to track real dirty state.\r\n     * Note: should be called right after we call change event (so next API is can detect changes)\r\n     * as well as right before we start move/resize/enter (so we can restore items to prev values) */\r\n    saveInitial() {\r\n        this.nodes.forEach(n => {\r\n            n._orig = utils_1.Utils.copyPos({}, n);\r\n            delete n._dirty;\r\n        });\r\n        this._hasLocked = this.nodes.some(n => n.locked);\r\n        return this;\r\n    }\r\n    /** @internal restore all the nodes back to initial values (called when we leave) */\r\n    restoreInitial() {\r\n        this.nodes.forEach(n => {\r\n            if (utils_1.Utils.samePos(n, n._orig))\r\n                return;\r\n            utils_1.Utils.copyPos(n, n._orig);\r\n            n._dirty = true;\r\n        });\r\n        this._notify();\r\n        return this;\r\n    }\r\n    /** find the first available empty spot for the given node width/height, updating the x,y attributes. return true if found */\r\n    findEmptyPosition(node) {\r\n        this.sortNodes();\r\n        let found = false;\r\n        for (let i = 0; !found; ++i) {\r\n            let x = i % this.column;\r\n            let y = Math.floor(i / this.column);\r\n            if (x + node.w > this.column) {\r\n                continue;\r\n            }\r\n            let box = { x, y, w: node.w, h: node.h };\r\n            if (!this.nodes.find(n => utils_1.Utils.isIntercepted(box, n))) {\r\n                node.x = x;\r\n                node.y = y;\r\n                found = true;\r\n            }\r\n        }\r\n        return found;\r\n    }\r\n    /** call to add the given node to our list, fixing collision and re-packing */\r\n    addNode(node, triggerAddEvent = false) {\r\n        let dup = this.nodes.find(n => n._id === node._id);\r\n        if (dup)\r\n            return dup; // prevent inserting twice! return it instead.\r\n        // skip prepareNode if we're in middle of column resize (not new) but do check for bounds!\r\n        node = this._inColumnResize ? this.nodeBoundFix(node) : this.prepareNode(node);\r\n        delete node._temporaryRemoved;\r\n        delete node._removeDOM;\r\n        if (node.autoPosition && this.findEmptyPosition(node)) {\r\n            delete node.autoPosition; // found our slot\r\n        }\r\n        this.nodes.push(node);\r\n        if (triggerAddEvent) {\r\n            this.addedNodes.push(node);\r\n        }\r\n        this._fixCollisions(node);\r\n        if (!this.batchMode) {\r\n            this._packNodes()._notify();\r\n        }\r\n        return node;\r\n    }\r\n    removeNode(node, removeDOM = true, triggerEvent = false) {\r\n        if (!this.nodes.find(n => n === node)) {\r\n            // TEST console.log(`Error: GridStackEngine.removeNode() node._id=${node._id} not found!`)\r\n            return this;\r\n        }\r\n        if (triggerEvent) { // we wait until final drop to manually track removed items (rather than during drag)\r\n            this.removedNodes.push(node);\r\n        }\r\n        if (removeDOM)\r\n            node._removeDOM = true; // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\r\n        // don't use 'faster' .splice(findIndex(),1) in case node isn't in our list, or in multiple times.\r\n        this.nodes = this.nodes.filter(n => n !== node);\r\n        return this._packNodes()\r\n            ._notify([node]);\r\n    }\r\n    removeAll(removeDOM = true) {\r\n        delete this._layouts;\r\n        if (this.nodes.length === 0)\r\n            return this;\r\n        removeDOM && this.nodes.forEach(n => n._removeDOM = true); // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\r\n        this.removedNodes = this.nodes;\r\n        this.nodes = [];\r\n        return this._notify(this.removedNodes);\r\n    }\r\n    /** checks if item can be moved (layout constrain) vs moveNode(), returning true if was able to move.\r\n     * In more complicated cases (maxRow) it will attempt at moving the item and fixing\r\n     * others in a clone first, then apply those changes if still within specs. */\r\n    moveNodeCheck(node, o) {\r\n        // if (node.locked) return false;\r\n        if (!this.changedPosConstrain(node, o))\r\n            return false;\r\n        o.pack = true;\r\n        // simpler case: move item directly...\r\n        if (!this.maxRow) {\r\n            return this.moveNode(node, o);\r\n        }\r\n        // complex case: create a clone with NO maxRow (will check for out of bounds at the end)\r\n        let clonedNode;\r\n        let clone = new GridStackEngine({\r\n            column: this.column,\r\n            float: this.float,\r\n            nodes: this.nodes.map(n => {\r\n                if (n === node) {\r\n                    clonedNode = Object.assign({}, n);\r\n                    return clonedNode;\r\n                }\r\n                return Object.assign({}, n);\r\n            })\r\n        });\r\n        if (!clonedNode)\r\n            return false;\r\n        // check if we're covering 50% collision and could move\r\n        let canMove = clone.moveNode(clonedNode, o) && clone.getRow() <= this.maxRow;\r\n        // else check if we can force a swap (float=true, or different shapes) on non-resize\r\n        if (!canMove && !o.resizing && o.collide) {\r\n            let collide = o.collide.el.gridstackNode; // find the source node the clone collided with at 50%\r\n            if (this.swap(node, collide)) { // swaps and mark dirty\r\n                this._notify();\r\n                return true;\r\n            }\r\n        }\r\n        if (!canMove)\r\n            return false;\r\n        // if clone was able to move, copy those mods over to us now instead of caller trying to do this all over!\r\n        // Note: we can't use the list directly as elements and other parts point to actual node, so copy content\r\n        clone.nodes.filter(n => n._dirty).forEach(c => {\r\n            let n = this.nodes.find(a => a._id === c._id);\r\n            if (!n)\r\n                return;\r\n            utils_1.Utils.copyPos(n, c);\r\n            n._dirty = true;\r\n        });\r\n        this._notify();\r\n        return true;\r\n    }\r\n    /** return true if can fit in grid height constrain only (always true if no maxRow) */\r\n    willItFit(node) {\r\n        delete node._willFitPos;\r\n        if (!this.maxRow)\r\n            return true;\r\n        // create a clone with NO maxRow and check if still within size\r\n        let clone = new GridStackEngine({\r\n            column: this.column,\r\n            float: this.float,\r\n            nodes: this.nodes.map(n => { return Object.assign({}, n); })\r\n        });\r\n        let n = Object.assign({}, node); // clone node so we don't mod any settings on it but have full autoPosition and min/max as well! #1687\r\n        this.cleanupNode(n);\r\n        delete n.el;\r\n        delete n._id;\r\n        delete n.content;\r\n        delete n.grid;\r\n        clone.addNode(n);\r\n        if (clone.getRow() <= this.maxRow) {\r\n            node._willFitPos = utils_1.Utils.copyPos({}, n);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /** true if x,y or w,h are different after clamping to min/max */\r\n    changedPosConstrain(node, p) {\r\n        // first make sure w,h are set for caller\r\n        p.w = p.w || node.w;\r\n        p.h = p.h || node.h;\r\n        if (node.x !== p.x || node.y !== p.y)\r\n            return true;\r\n        // check constrained w,h\r\n        if (node.maxW) {\r\n            p.w = Math.min(p.w, node.maxW);\r\n        }\r\n        if (node.maxH) {\r\n            p.h = Math.min(p.h, node.maxH);\r\n        }\r\n        if (node.minW) {\r\n            p.w = Math.max(p.w, node.minW);\r\n        }\r\n        if (node.minH) {\r\n            p.h = Math.max(p.h, node.minH);\r\n        }\r\n        return (node.w !== p.w || node.h !== p.h);\r\n    }\r\n    /** return true if the passed in node was actually moved (checks for no-op and locked) */\r\n    moveNode(node, o) {\r\n        var _a, _b;\r\n        if (!node || /*node.locked ||*/ !o)\r\n            return false;\r\n        let wasUndefinedPack;\r\n        if (o.pack === undefined) {\r\n            wasUndefinedPack = o.pack = true;\r\n        }\r\n        // constrain the passed in values and check if we're still changing our node\r\n        if (typeof o.x !== 'number') {\r\n            o.x = node.x;\r\n        }\r\n        if (typeof o.y !== 'number') {\r\n            o.y = node.y;\r\n        }\r\n        if (typeof o.w !== 'number') {\r\n            o.w = node.w;\r\n        }\r\n        if (typeof o.h !== 'number') {\r\n            o.h = node.h;\r\n        }\r\n        let resizing = (node.w !== o.w || node.h !== o.h);\r\n        let nn = utils_1.Utils.copyPos({}, node, true); // get min/max out first, then opt positions next\r\n        utils_1.Utils.copyPos(nn, o);\r\n        nn = this.nodeBoundFix(nn, resizing);\r\n        utils_1.Utils.copyPos(o, nn);\r\n        if (utils_1.Utils.samePos(node, o))\r\n            return false;\r\n        let prevPos = utils_1.Utils.copyPos({}, node);\r\n        // check if we will need to fix collision at our new location\r\n        let collides = this.collideAll(node, nn, o.skip);\r\n        let needToMove = true;\r\n        if (collides.length) {\r\n            let activeDrag = node._moving && !o.nested;\r\n            // check to make sure we actually collided over 50% surface area while dragging\r\n            let collide = activeDrag ? this.directionCollideCoverage(node, o, collides) : collides[0];\r\n            // if we're enabling creation of sub-grids on the fly, see if we're covering 80% of either one, if we didn't already do that\r\n            if (activeDrag && collide && ((_b = (_a = node.grid) === null || _a === void 0 ? void 0 : _a.opts) === null || _b === void 0 ? void 0 : _b.subGridDynamic) && !node.grid._isTemp) {\r\n                let over = utils_1.Utils.areaIntercept(o.rect, collide._rect);\r\n                let a1 = utils_1.Utils.area(o.rect);\r\n                let a2 = utils_1.Utils.area(collide._rect);\r\n                let perc = over / (a1 < a2 ? a1 : a2);\r\n                if (perc > .8) {\r\n                    collide.grid.makeSubGrid(collide.el, undefined, node);\r\n                    collide = undefined;\r\n                }\r\n            }\r\n            if (collide) {\r\n                needToMove = !this._fixCollisions(node, nn, collide, o); // check if already moved...\r\n            }\r\n            else {\r\n                needToMove = false; // we didn't cover >50% for a move, skip...\r\n                if (wasUndefinedPack)\r\n                    delete o.pack;\r\n            }\r\n        }\r\n        // now move (to the original ask vs the collision version which might differ) and repack things\r\n        if (needToMove) {\r\n            node._dirty = true;\r\n            utils_1.Utils.copyPos(node, nn);\r\n        }\r\n        if (o.pack) {\r\n            this._packNodes()\r\n                ._notify();\r\n        }\r\n        return !utils_1.Utils.samePos(node, prevPos); // pack might have moved things back\r\n    }\r\n    getRow() {\r\n        return this.nodes.reduce((row, n) => Math.max(row, n.y + n.h), 0);\r\n    }\r\n    beginUpdate(node) {\r\n        if (!node._updating) {\r\n            node._updating = true;\r\n            delete node._skipDown;\r\n            if (!this.batchMode)\r\n                this.saveInitial();\r\n        }\r\n        return this;\r\n    }\r\n    endUpdate() {\r\n        let n = this.nodes.find(n => n._updating);\r\n        if (n) {\r\n            delete n._updating;\r\n            delete n._skipDown;\r\n        }\r\n        return this;\r\n    }\r\n    /** saves a copy of the largest column layout (eg 12 even when rendering oneColumnMode) so we don't loose orig layout,\r\n     * returning a list of widgets for serialization */\r\n    save(saveElement = true) {\r\n        var _a;\r\n        // use the highest layout for any saved info so we can have full detail on reload #1849\r\n        let len = (_a = this._layouts) === null || _a === void 0 ? void 0 : _a.length;\r\n        let layout = len && this.column !== (len - 1) ? this._layouts[len - 1] : null;\r\n        let list = [];\r\n        this.sortNodes();\r\n        this.nodes.forEach(n => {\r\n            let wl = layout === null || layout === void 0 ? void 0 : layout.find(l => l._id === n._id);\r\n            let w = Object.assign({}, n);\r\n            // use layout info instead if set\r\n            if (wl) {\r\n                w.x = wl.x;\r\n                w.y = wl.y;\r\n                w.w = wl.w;\r\n            }\r\n            utils_1.Utils.removeInternalForSave(w, !saveElement);\r\n            list.push(w);\r\n        });\r\n        return list;\r\n    }\r\n    /** @internal called whenever a node is added or moved - updates the cached layouts */\r\n    layoutsNodesChange(nodes) {\r\n        if (!this._layouts || this._inColumnResize)\r\n            return this;\r\n        // remove smaller layouts - we will re-generate those on the fly... larger ones need to update\r\n        this._layouts.forEach((layout, column) => {\r\n            if (!layout || column === this.column)\r\n                return this;\r\n            if (column < this.column) {\r\n                this._layouts[column] = undefined;\r\n            }\r\n            else {\r\n                // we save the original x,y,w (h isn't cached) to see what actually changed to propagate better.\r\n                // NOTE: we don't need to check against out of bound scaling/moving as that will be done when using those cache values. #1785\r\n                let ratio = column / this.column;\r\n                nodes.forEach(node => {\r\n                    if (!node._orig)\r\n                        return; // didn't change (newly added ?)\r\n                    let n = layout.find(l => l._id === node._id);\r\n                    if (!n)\r\n                        return; // no cache for new nodes. Will use those values.\r\n                    // Y changed, push down same amount\r\n                    // TODO: detect doing item 'swaps' will help instead of move (especially in 1 column mode)\r\n                    if (node.y !== node._orig.y) {\r\n                        n.y += (node.y - node._orig.y);\r\n                    }\r\n                    // X changed, scale from new position\r\n                    if (node.x !== node._orig.x) {\r\n                        n.x = Math.round(node.x * ratio);\r\n                    }\r\n                    // width changed, scale from new width\r\n                    if (node.w !== node._orig.w) {\r\n                        n.w = Math.round(node.w * ratio);\r\n                    }\r\n                    // ...height always carries over from cache\r\n                });\r\n            }\r\n        });\r\n        return this;\r\n    }\r\n    /**\r\n     * @internal Called to scale the widget width & position up/down based on the column change.\r\n     * Note we store previous layouts (especially original ones) to make it possible to go\r\n     * from say 12 -> 1 -> 12 and get back to where we were.\r\n     *\r\n     * @param prevColumn previous number of columns\r\n     * @param column  new column number\r\n     * @param nodes different sorted list (ex: DOM order) instead of current list\r\n     * @param layout specify the type of re-layout that will happen (position, size, etc...).\r\n     * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\r\n     */\r\n    updateNodeWidths(prevColumn, column, nodes, layout = 'moveScale') {\r\n        var _a;\r\n        if (!this.nodes.length || !column || prevColumn === column)\r\n            return this;\r\n        // cache the current layout in case they want to go back (like 12 -> 1 -> 12) as it requires original data\r\n        this.cacheLayout(this.nodes, prevColumn);\r\n        this.batchUpdate(); // do this EARLY as it will call saveInitial() so we can detect where we started for _dirty and collision\r\n        let newNodes = [];\r\n        // if we're going to 1 column and using DOM order rather than default sorting, then generate that layout\r\n        let domOrder = false;\r\n        if (column === 1 && (nodes === null || nodes === void 0 ? void 0 : nodes.length)) {\r\n            domOrder = true;\r\n            let top = 0;\r\n            nodes.forEach(n => {\r\n                n.x = 0;\r\n                n.w = 1;\r\n                n.y = Math.max(n.y, top);\r\n                top = n.y + n.h;\r\n            });\r\n            newNodes = nodes;\r\n            nodes = [];\r\n        }\r\n        else {\r\n            nodes = utils_1.Utils.sort(this.nodes, -1, prevColumn); // current column reverse sorting so we can insert last to front (limit collision)\r\n        }\r\n        // see if we have cached previous layout IFF we are going up in size (restore) otherwise always\r\n        // generate next size down from where we are (looks more natural as you gradually size down).\r\n        let cacheNodes = [];\r\n        if (column > prevColumn) {\r\n            cacheNodes = this._layouts[column] || [];\r\n            // ...if not, start with the largest layout (if not already there) as down-scaling is more accurate\r\n            // by pretending we came from that larger column by assigning those values as starting point\r\n            let lastIndex = this._layouts.length - 1;\r\n            if (!cacheNodes.length && prevColumn !== lastIndex && ((_a = this._layouts[lastIndex]) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                prevColumn = lastIndex;\r\n                this._layouts[lastIndex].forEach(cacheNode => {\r\n                    let n = nodes.find(n => n._id === cacheNode._id);\r\n                    if (n) {\r\n                        // still current, use cache info positions\r\n                        n.x = cacheNode.x;\r\n                        n.y = cacheNode.y;\r\n                        n.w = cacheNode.w;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        // if we found cache re-use those nodes that are still current\r\n        cacheNodes.forEach(cacheNode => {\r\n            let j = nodes.findIndex(n => n._id === cacheNode._id);\r\n            if (j !== -1) {\r\n                // still current, use cache info positions\r\n                nodes[j].x = cacheNode.x;\r\n                nodes[j].y = cacheNode.y;\r\n                nodes[j].w = cacheNode.w;\r\n                newNodes.push(nodes[j]);\r\n                nodes.splice(j, 1);\r\n            }\r\n        });\r\n        // ...and add any extra non-cached ones\r\n        if (nodes.length) {\r\n            if (typeof layout === 'function') {\r\n                layout(column, prevColumn, newNodes, nodes);\r\n            }\r\n            else if (!domOrder) {\r\n                let ratio = column / prevColumn;\r\n                let move = (layout === 'move' || layout === 'moveScale');\r\n                let scale = (layout === 'scale' || layout === 'moveScale');\r\n                nodes.forEach(node => {\r\n                    // NOTE: x + w could be outside of the grid, but addNode() below will handle that\r\n                    node.x = (column === 1 ? 0 : (move ? Math.round(node.x * ratio) : Math.min(node.x, column - 1)));\r\n                    node.w = ((column === 1 || prevColumn === 1) ? 1 :\r\n                        scale ? (Math.round(node.w * ratio) || 1) : (Math.min(node.w, column)));\r\n                    newNodes.push(node);\r\n                });\r\n                nodes = [];\r\n            }\r\n        }\r\n        // finally re-layout them in reverse order (to get correct placement)\r\n        if (!domOrder)\r\n            newNodes = utils_1.Utils.sort(newNodes, -1, column);\r\n        this._inColumnResize = true; // prevent cache update\r\n        this.nodes = []; // pretend we have no nodes to start with (add() will use same structures) to simplify layout\r\n        newNodes.forEach(node => {\r\n            this.addNode(node, false); // 'false' for add event trigger\r\n            delete node._orig; // make sure the commit doesn't try to restore things back to original\r\n        });\r\n        this.batchUpdate(false);\r\n        delete this._inColumnResize;\r\n        return this;\r\n    }\r\n    /**\r\n     * call to cache the given layout internally to the given location so we can restore back when column changes size\r\n     * @param nodes list of nodes\r\n     * @param column corresponding column index to save it under\r\n     * @param clear if true, will force other caches to be removed (default false)\r\n     */\r\n    cacheLayout(nodes, column, clear = false) {\r\n        let copy = [];\r\n        nodes.forEach((n, i) => {\r\n            n._id = n._id || GridStackEngine._idSeq++; // make sure we have an id in case this is new layout, else re-use id already set\r\n            copy[i] = { x: n.x, y: n.y, w: n.w, _id: n._id }; // only thing we change is x,y,w and id to find it back\r\n        });\r\n        this._layouts = clear ? [] : this._layouts || []; // use array to find larger quick\r\n        this._layouts[column] = copy;\r\n        return this;\r\n    }\r\n    /**\r\n     * call to cache the given node layout internally to the given location so we can restore back when column changes size\r\n     * @param node single node to cache\r\n     * @param column corresponding column index to save it under\r\n     */\r\n    cacheOneLayout(n, column) {\r\n        n._id = n._id || GridStackEngine._idSeq++;\r\n        let layout = { x: n.x, y: n.y, w: n.w, _id: n._id };\r\n        this._layouts = this._layouts || [];\r\n        this._layouts[column] = this._layouts[column] || [];\r\n        let index = this.findCacheLayout(n, column);\r\n        if (index === -1)\r\n            this._layouts[column].push(layout);\r\n        else\r\n            this._layouts[column][index] = layout;\r\n        return this;\r\n    }\r\n    findCacheLayout(n, column) {\r\n        var _a, _b, _c;\r\n        return (_c = (_b = (_a = this._layouts) === null || _a === void 0 ? void 0 : _a[column]) === null || _b === void 0 ? void 0 : _b.findIndex(l => l._id === n._id)) !== null && _c !== void 0 ? _c : -1;\r\n    }\r\n    /** called to remove all internal values but the _id */\r\n    cleanupNode(node) {\r\n        for (let prop in node) {\r\n            if (prop[0] === '_' && prop !== '_id')\r\n                delete node[prop];\r\n        }\r\n        return this;\r\n    }\r\n}\r\nexports.GridStackEngine = GridStackEngine;\r\n/** @internal unique global internal _id counter NOT starting at 0 */\r\nGridStackEngine._idSeq = 1;\r\n//# sourceMappingURL=gridstack-engine.js.map","\"use strict\";\r\n/**\r\n * types.ts 7.1.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.dragInDefaultOptions = exports.gridDefaults = void 0;\r\n// default values for grid options - used during init and when saving out\r\nexports.gridDefaults = {\r\n    alwaysShowResizeHandle: 'mobile',\r\n    animate: true,\r\n    auto: true,\r\n    cellHeight: 'auto',\r\n    cellHeightThrottle: 100,\r\n    cellHeightUnit: 'px',\r\n    column: 12,\r\n    draggable: { handle: '.grid-stack-item-content', appendTo: 'body' },\r\n    handle: '.grid-stack-item-content',\r\n    itemClass: 'grid-stack-item',\r\n    margin: 10,\r\n    marginUnit: 'px',\r\n    maxRow: 0,\r\n    minRow: 0,\r\n    oneColumnSize: 768,\r\n    placeholderClass: 'grid-stack-placeholder',\r\n    placeholderText: '',\r\n    removableOptions: { accept: '.grid-stack-item' },\r\n    resizable: { handles: 'se' },\r\n    rtl: 'auto',\r\n};\r\n/** default dragIn options */\r\nexports.dragInDefaultOptions = {\r\n    handle: '.grid-stack-item-content',\r\n    appendTo: 'body',\r\n};\r\n//# sourceMappingURL=types.js.map","\"use strict\";\r\n/**\r\n * dd-manager.ts 7.1.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DDManager = void 0;\r\n/**\r\n * globals that are shared across Drag & Drop instances\r\n */\r\nclass DDManager {\r\n}\r\nexports.DDManager = DDManager;\r\n//# sourceMappingURL=dd-manager.js.map","\"use strict\";\r\n/**\r\n * touch.ts 7.1.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.pointerleave = exports.pointerenter = exports.pointerdown = exports.touchend = exports.touchmove = exports.touchstart = exports.isTouch = void 0;\r\nconst dd_manager_1 = require(\"./dd-manager\");\r\n/**\r\n * Detect touch support - Windows Surface devices and other touch devices\r\n * should we use this instead ? (what we had for always showing resize handles)\r\n * /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)\r\n */\r\nexports.isTouch = typeof window !== 'undefined' && typeof document !== 'undefined' &&\r\n    ('ontouchstart' in document\r\n        || 'ontouchstart' in window\r\n        // || !!window.TouchEvent // true on Windows 10 Chrome desktop so don't use this\r\n        || (window.DocumentTouch && document instanceof window.DocumentTouch)\r\n        || navigator.maxTouchPoints > 0\r\n        || navigator.msMaxTouchPoints > 0);\r\n// interface TouchCoord {x: number, y: number};\r\nclass DDTouch {\r\n}\r\n/**\r\n* Get the x,y position of a touch event\r\n*/\r\n// function getTouchCoords(e: TouchEvent): TouchCoord {\r\n//   return {\r\n//     x: e.changedTouches[0].pageX,\r\n//     y: e.changedTouches[0].pageY\r\n//   };\r\n// }\r\n/**\r\n * Simulate a mouse event based on a corresponding touch event\r\n * @param {Object} e A touch event\r\n * @param {String} simulatedType The corresponding mouse event\r\n */\r\nfunction simulateMouseEvent(e, simulatedType) {\r\n    // Ignore multi-touch events\r\n    if (e.touches.length > 1)\r\n        return;\r\n    // Prevent \"Ignored attempt to cancel a touchmove event with cancelable=false\" errors\r\n    if (e.cancelable)\r\n        e.preventDefault();\r\n    const touch = e.changedTouches[0], simulatedEvent = document.createEvent('MouseEvents');\r\n    // Initialize the simulated mouse event using the touch event's coordinates\r\n    simulatedEvent.initMouseEvent(simulatedType, // type\r\n    true, // bubbles\r\n    true, // cancelable\r\n    window, // view\r\n    1, // detail\r\n    touch.screenX, // screenX\r\n    touch.screenY, // screenY\r\n    touch.clientX, // clientX\r\n    touch.clientY, // clientY\r\n    false, // ctrlKey\r\n    false, // altKey\r\n    false, // shiftKey\r\n    false, // metaKey\r\n    0, // button\r\n    null // relatedTarget\r\n    );\r\n    // Dispatch the simulated event to the target element\r\n    e.target.dispatchEvent(simulatedEvent);\r\n}\r\n/**\r\n * Simulate a mouse event based on a corresponding Pointer event\r\n * @param {Object} e A pointer event\r\n * @param {String} simulatedType The corresponding mouse event\r\n */\r\nfunction simulatePointerMouseEvent(e, simulatedType) {\r\n    // Prevent \"Ignored attempt to cancel a touchmove event with cancelable=false\" errors\r\n    if (e.cancelable)\r\n        e.preventDefault();\r\n    const simulatedEvent = document.createEvent('MouseEvents');\r\n    // Initialize the simulated mouse event using the touch event's coordinates\r\n    simulatedEvent.initMouseEvent(simulatedType, // type\r\n    true, // bubbles\r\n    true, // cancelable\r\n    window, // view\r\n    1, // detail\r\n    e.screenX, // screenX\r\n    e.screenY, // screenY\r\n    e.clientX, // clientX\r\n    e.clientY, // clientY\r\n    false, // ctrlKey\r\n    false, // altKey\r\n    false, // shiftKey\r\n    false, // metaKey\r\n    0, // button\r\n    null // relatedTarget\r\n    );\r\n    // Dispatch the simulated event to the target element\r\n    e.target.dispatchEvent(simulatedEvent);\r\n}\r\n/**\r\n * Handle the touchstart events\r\n * @param {Object} e The widget element's touchstart event\r\n */\r\nfunction touchstart(e) {\r\n    // Ignore the event if another widget is already being handled\r\n    if (DDTouch.touchHandled)\r\n        return;\r\n    DDTouch.touchHandled = true;\r\n    // Simulate the mouse events\r\n    // simulateMouseEvent(e, 'mouseover');\r\n    // simulateMouseEvent(e, 'mousemove');\r\n    simulateMouseEvent(e, 'mousedown');\r\n}\r\nexports.touchstart = touchstart;\r\n/**\r\n * Handle the touchmove events\r\n * @param {Object} e The document's touchmove event\r\n */\r\nfunction touchmove(e) {\r\n    // Ignore event if not handled by us\r\n    if (!DDTouch.touchHandled)\r\n        return;\r\n    simulateMouseEvent(e, 'mousemove');\r\n}\r\nexports.touchmove = touchmove;\r\n/**\r\n * Handle the touchend events\r\n * @param {Object} e The document's touchend event\r\n */\r\nfunction touchend(e) {\r\n    // Ignore event if not handled\r\n    if (!DDTouch.touchHandled)\r\n        return;\r\n    // cancel delayed leave event when we release on ourself which happens BEFORE we get this!\r\n    if (DDTouch.pointerLeaveTimeout) {\r\n        window.clearTimeout(DDTouch.pointerLeaveTimeout);\r\n        delete DDTouch.pointerLeaveTimeout;\r\n    }\r\n    const wasDragging = !!dd_manager_1.DDManager.dragElement;\r\n    // Simulate the mouseup event\r\n    simulateMouseEvent(e, 'mouseup');\r\n    // simulateMouseEvent(event, 'mouseout');\r\n    // If the touch interaction did not move, it should trigger a click\r\n    if (!wasDragging) {\r\n        simulateMouseEvent(e, 'click');\r\n    }\r\n    // Unset the flag to allow other widgets to inherit the touch event\r\n    DDTouch.touchHandled = false;\r\n}\r\nexports.touchend = touchend;\r\n/**\r\n * Note we don't get touchenter/touchleave (which are deprecated)\r\n * see https://stackoverflow.com/questions/27908339/js-touch-equivalent-for-mouseenter\r\n * so instead of PointerEvent to still get enter/leave and send the matching mouse event.\r\n */\r\nfunction pointerdown(e) {\r\n    e.target.releasePointerCapture(e.pointerId); // <- Important!\r\n}\r\nexports.pointerdown = pointerdown;\r\nfunction pointerenter(e) {\r\n    // ignore the initial one we get on pointerdown on ourself\r\n    if (!dd_manager_1.DDManager.dragElement) {\r\n        // console.log('pointerenter ignored');\r\n        return;\r\n    }\r\n    // console.log('pointerenter');\r\n    simulatePointerMouseEvent(e, 'mouseenter');\r\n}\r\nexports.pointerenter = pointerenter;\r\nfunction pointerleave(e) {\r\n    // ignore the leave on ourself we get before releasing the mouse over ourself\r\n    // by delaying sending the event and having the up event cancel us\r\n    if (!dd_manager_1.DDManager.dragElement) {\r\n        // console.log('pointerleave ignored');\r\n        return;\r\n    }\r\n    DDTouch.pointerLeaveTimeout = window.setTimeout(() => {\r\n        delete DDTouch.pointerLeaveTimeout;\r\n        // console.log('pointerleave delayed');\r\n        simulatePointerMouseEvent(e, 'mouseleave');\r\n    }, 10);\r\n}\r\nexports.pointerleave = pointerleave;\r\n//# sourceMappingURL=dd-touch.js.map","\"use strict\";\r\n/**\r\n * dd-base-impl.ts 7.1.0\r\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DDBaseImplement = void 0;\r\nclass DDBaseImplement {\r\n    constructor() {\r\n        /** @internal */\r\n        this._eventRegister = {};\r\n    }\r\n    /** returns the enable state, but you have to call enable()/disable() to change (as other things need to happen) */\r\n    get disabled() { return this._disabled; }\r\n    on(event, callback) {\r\n        this._eventRegister[event] = callback;\r\n    }\r\n    off(event) {\r\n        delete this._eventRegister[event];\r\n    }\r\n    enable() {\r\n        this._disabled = false;\r\n    }\r\n    disable() {\r\n        this._disabled = true;\r\n    }\r\n    destroy() {\r\n        delete this._eventRegister;\r\n    }\r\n    triggerEvent(eventName, event) {\r\n        if (!this.disabled && this._eventRegister && this._eventRegister[eventName])\r\n            return this._eventRegister[eventName](event);\r\n    }\r\n}\r\nexports.DDBaseImplement = DDBaseImplement;\r\n//# sourceMappingURL=dd-base-impl.js.map","\"use strict\";\r\n/**\r\n * dd-resizable.ts 7.1.0\r\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DDResizable = void 0;\r\nconst dd_resizable_handle_1 = require(\"./dd-resizable-handle\");\r\nconst dd_base_impl_1 = require(\"./dd-base-impl\");\r\nconst utils_1 = require(\"./utils\");\r\nconst dd_manager_1 = require(\"./dd-manager\");\r\nclass DDResizable extends dd_base_impl_1.DDBaseImplement {\r\n    constructor(el, opts = {}) {\r\n        super();\r\n        /** @internal */\r\n        this._ui = () => {\r\n            const containmentEl = this.el.parentElement;\r\n            const containmentRect = containmentEl.getBoundingClientRect();\r\n            const newRect = {\r\n                width: this.originalRect.width,\r\n                height: this.originalRect.height + this.scrolled,\r\n                left: this.originalRect.left,\r\n                top: this.originalRect.top - this.scrolled\r\n            };\r\n            const rect = this.temporalRect || newRect;\r\n            return {\r\n                position: {\r\n                    left: rect.left - containmentRect.left,\r\n                    top: rect.top - containmentRect.top\r\n                },\r\n                size: {\r\n                    width: rect.width,\r\n                    height: rect.height\r\n                }\r\n                /* Gridstack ONLY needs position set above... keep around in case.\r\n                element: [this.el], // The object representing the element to be resized\r\n                helper: [], // TODO: not support yet - The object representing the helper that's being resized\r\n                originalElement: [this.el],// we don't wrap here, so simplify as this.el //The object representing the original element before it is wrapped\r\n                originalPosition: { // The position represented as { left, top } before the resizable is resized\r\n                  left: this.originalRect.left - containmentRect.left,\r\n                  top: this.originalRect.top - containmentRect.top\r\n                },\r\n                originalSize: { // The size represented as { width, height } before the resizable is resized\r\n                  width: this.originalRect.width,\r\n                  height: this.originalRect.height\r\n                }\r\n                */\r\n            };\r\n        };\r\n        this.el = el;\r\n        this.option = opts;\r\n        // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\r\n        this._mouseOver = this._mouseOver.bind(this);\r\n        this._mouseOut = this._mouseOut.bind(this);\r\n        this.enable();\r\n        this._setupAutoHide(this.option.autoHide);\r\n        this._setupHandlers();\r\n    }\r\n    on(event, callback) {\r\n        super.on(event, callback);\r\n    }\r\n    off(event) {\r\n        super.off(event);\r\n    }\r\n    enable() {\r\n        super.enable();\r\n        this.el.classList.add('ui-resizable');\r\n        this.el.classList.remove('ui-resizable-disabled');\r\n        this._setupAutoHide(this.option.autoHide);\r\n    }\r\n    disable() {\r\n        super.disable();\r\n        this.el.classList.add('ui-resizable-disabled');\r\n        this.el.classList.remove('ui-resizable');\r\n        this._setupAutoHide(false);\r\n    }\r\n    destroy() {\r\n        this._removeHandlers();\r\n        this._setupAutoHide(false);\r\n        this.el.classList.remove('ui-resizable');\r\n        delete this.el;\r\n        super.destroy();\r\n    }\r\n    updateOption(opts) {\r\n        let updateHandles = (opts.handles && opts.handles !== this.option.handles);\r\n        let updateAutoHide = (opts.autoHide && opts.autoHide !== this.option.autoHide);\r\n        Object.keys(opts).forEach(key => this.option[key] = opts[key]);\r\n        if (updateHandles) {\r\n            this._removeHandlers();\r\n            this._setupHandlers();\r\n        }\r\n        if (updateAutoHide) {\r\n            this._setupAutoHide(this.option.autoHide);\r\n        }\r\n        return this;\r\n    }\r\n    /** @internal turns auto hide on/off */\r\n    _setupAutoHide(auto) {\r\n        if (auto) {\r\n            this.el.classList.add('ui-resizable-autohide');\r\n            // use mouseover and not mouseenter to get better performance and track for nested cases\r\n            this.el.addEventListener('mouseover', this._mouseOver);\r\n            this.el.addEventListener('mouseout', this._mouseOut);\r\n        }\r\n        else {\r\n            this.el.classList.remove('ui-resizable-autohide');\r\n            this.el.removeEventListener('mouseover', this._mouseOver);\r\n            this.el.removeEventListener('mouseout', this._mouseOut);\r\n            if (dd_manager_1.DDManager.overResizeElement === this) {\r\n                delete dd_manager_1.DDManager.overResizeElement;\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    /** @internal */\r\n    _mouseOver(e) {\r\n        // console.log(`${count++} pre-enter ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\r\n        // already over a child, ignore. Ideally we just call e.stopPropagation() but see https://github.com/gridstack/gridstack.js/issues/2018\r\n        if (dd_manager_1.DDManager.overResizeElement || dd_manager_1.DDManager.dragElement)\r\n            return;\r\n        dd_manager_1.DDManager.overResizeElement = this;\r\n        // console.log(`${count++} enter ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\r\n        this.el.classList.remove('ui-resizable-autohide');\r\n    }\r\n    /** @internal */\r\n    _mouseOut(e) {\r\n        // console.log(`${count++} pre-leave ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\r\n        if (dd_manager_1.DDManager.overResizeElement !== this)\r\n            return;\r\n        delete dd_manager_1.DDManager.overResizeElement;\r\n        // console.log(`${count++} leave ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\r\n        this.el.classList.add('ui-resizable-autohide');\r\n    }\r\n    /** @internal */\r\n    _setupHandlers() {\r\n        let handlerDirection = this.option.handles || 'e,s,se';\r\n        if (handlerDirection === 'all') {\r\n            handlerDirection = 'n,e,s,w,se,sw,ne,nw';\r\n        }\r\n        this.handlers = handlerDirection.split(',')\r\n            .map(dir => dir.trim())\r\n            .map(dir => new dd_resizable_handle_1.DDResizableHandle(this.el, dir, {\r\n            start: (event) => {\r\n                this._resizeStart(event);\r\n            },\r\n            stop: (event) => {\r\n                this._resizeStop(event);\r\n            },\r\n            move: (event) => {\r\n                this._resizing(event, dir);\r\n            }\r\n        }));\r\n        return this;\r\n    }\r\n    /** @internal */\r\n    _resizeStart(event) {\r\n        this.originalRect = this.el.getBoundingClientRect();\r\n        this.scrollEl = utils_1.Utils.getScrollElement(this.el);\r\n        this.scrollY = this.scrollEl.scrollTop;\r\n        this.scrolled = 0;\r\n        this.startEvent = event;\r\n        this._setupHelper();\r\n        this._applyChange();\r\n        const ev = utils_1.Utils.initEvent(event, { type: 'resizestart', target: this.el });\r\n        if (this.option.start) {\r\n            this.option.start(ev, this._ui());\r\n        }\r\n        this.el.classList.add('ui-resizable-resizing');\r\n        this.triggerEvent('resizestart', ev);\r\n        return this;\r\n    }\r\n    /** @internal */\r\n    _resizing(event, dir) {\r\n        this.scrolled = this.scrollEl.scrollTop - this.scrollY;\r\n        this.temporalRect = this._getChange(event, dir);\r\n        this._applyChange();\r\n        const ev = utils_1.Utils.initEvent(event, { type: 'resize', target: this.el });\r\n        if (this.option.resize) {\r\n            this.option.resize(ev, this._ui());\r\n        }\r\n        this.triggerEvent('resize', ev);\r\n        return this;\r\n    }\r\n    /** @internal */\r\n    _resizeStop(event) {\r\n        const ev = utils_1.Utils.initEvent(event, { type: 'resizestop', target: this.el });\r\n        if (this.option.stop) {\r\n            this.option.stop(ev); // Note: ui() not used by gridstack so don't pass\r\n        }\r\n        this.el.classList.remove('ui-resizable-resizing');\r\n        this.triggerEvent('resizestop', ev);\r\n        this._cleanHelper();\r\n        delete this.startEvent;\r\n        delete this.originalRect;\r\n        delete this.temporalRect;\r\n        delete this.scrollY;\r\n        delete this.scrolled;\r\n        return this;\r\n    }\r\n    /** @internal */\r\n    _setupHelper() {\r\n        this.elOriginStyleVal = DDResizable._originStyleProp.map(prop => this.el.style[prop]);\r\n        this.parentOriginStylePosition = this.el.parentElement.style.position;\r\n        if (window.getComputedStyle(this.el.parentElement).position.match(/static/)) {\r\n            this.el.parentElement.style.position = 'relative';\r\n        }\r\n        this.el.style.position = 'absolute';\r\n        this.el.style.opacity = '0.8';\r\n        return this;\r\n    }\r\n    /** @internal */\r\n    _cleanHelper() {\r\n        DDResizable._originStyleProp.forEach((prop, i) => {\r\n            this.el.style[prop] = this.elOriginStyleVal[i] || null;\r\n        });\r\n        this.el.parentElement.style.position = this.parentOriginStylePosition || null;\r\n        return this;\r\n    }\r\n    /** @internal */\r\n    _getChange(event, dir) {\r\n        const oEvent = this.startEvent;\r\n        const newRect = {\r\n            width: this.originalRect.width,\r\n            height: this.originalRect.height + this.scrolled,\r\n            left: this.originalRect.left,\r\n            top: this.originalRect.top - this.scrolled\r\n        };\r\n        const offsetX = event.clientX - oEvent.clientX;\r\n        const offsetY = event.clientY - oEvent.clientY;\r\n        if (dir.indexOf('e') > -1) {\r\n            newRect.width += offsetX;\r\n        }\r\n        else if (dir.indexOf('w') > -1) {\r\n            newRect.width -= offsetX;\r\n            newRect.left += offsetX;\r\n        }\r\n        if (dir.indexOf('s') > -1) {\r\n            newRect.height += offsetY;\r\n        }\r\n        else if (dir.indexOf('n') > -1) {\r\n            newRect.height -= offsetY;\r\n            newRect.top += offsetY;\r\n        }\r\n        const constrain = this._constrainSize(newRect.width, newRect.height);\r\n        if (Math.round(newRect.width) !== Math.round(constrain.width)) { // round to ignore slight round-off errors\r\n            if (dir.indexOf('w') > -1) {\r\n                newRect.left += newRect.width - constrain.width;\r\n            }\r\n            newRect.width = constrain.width;\r\n        }\r\n        if (Math.round(newRect.height) !== Math.round(constrain.height)) {\r\n            if (dir.indexOf('n') > -1) {\r\n                newRect.top += newRect.height - constrain.height;\r\n            }\r\n            newRect.height = constrain.height;\r\n        }\r\n        return newRect;\r\n    }\r\n    /** @internal constrain the size to the set min/max values */\r\n    _constrainSize(oWidth, oHeight) {\r\n        const maxWidth = this.option.maxWidth || Number.MAX_SAFE_INTEGER;\r\n        const minWidth = this.option.minWidth || oWidth;\r\n        const maxHeight = this.option.maxHeight || Number.MAX_SAFE_INTEGER;\r\n        const minHeight = this.option.minHeight || oHeight;\r\n        const width = Math.min(maxWidth, Math.max(minWidth, oWidth));\r\n        const height = Math.min(maxHeight, Math.max(minHeight, oHeight));\r\n        return { width, height };\r\n    }\r\n    /** @internal */\r\n    _applyChange() {\r\n        let containmentRect = { left: 0, top: 0, width: 0, height: 0 };\r\n        if (this.el.style.position === 'absolute') {\r\n            const containmentEl = this.el.parentElement;\r\n            const { left, top } = containmentEl.getBoundingClientRect();\r\n            containmentRect = { left, top, width: 0, height: 0 };\r\n        }\r\n        if (!this.temporalRect)\r\n            return this;\r\n        Object.keys(this.temporalRect).forEach(key => {\r\n            const value = this.temporalRect[key];\r\n            this.el.style[key] = value - containmentRect[key] + 'px';\r\n        });\r\n        return this;\r\n    }\r\n    /** @internal */\r\n    _removeHandlers() {\r\n        this.handlers.forEach(handle => handle.destroy());\r\n        delete this.handlers;\r\n        return this;\r\n    }\r\n}\r\nexports.DDResizable = DDResizable;\r\n/** @internal */\r\nDDResizable._originStyleProp = ['width', 'height', 'position', 'left', 'top', 'opacity', 'zIndex'];\r\n//# sourceMappingURL=dd-resizable.js.map","\"use strict\";\r\n/**\r\n * dd-resizable-handle.ts 7.1.0\r\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DDResizableHandle = void 0;\r\nconst dd_touch_1 = require(\"./dd-touch\");\r\nclass DDResizableHandle {\r\n    constructor(host, direction, option) {\r\n        /** @internal true after we've moved enough pixels to start a resize */\r\n        this.moving = false;\r\n        this.host = host;\r\n        this.dir = direction;\r\n        this.option = option;\r\n        // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\r\n        this._mouseDown = this._mouseDown.bind(this);\r\n        this._mouseMove = this._mouseMove.bind(this);\r\n        this._mouseUp = this._mouseUp.bind(this);\r\n        this._init();\r\n    }\r\n    /** @internal */\r\n    _init() {\r\n        const el = document.createElement('div');\r\n        el.classList.add('ui-resizable-handle');\r\n        el.classList.add(`${DDResizableHandle.prefix}${this.dir}`);\r\n        el.style.zIndex = '100';\r\n        el.style.userSelect = 'none';\r\n        this.el = el;\r\n        this.host.appendChild(this.el);\r\n        this.el.addEventListener('mousedown', this._mouseDown);\r\n        if (dd_touch_1.isTouch) {\r\n            this.el.addEventListener('touchstart', dd_touch_1.touchstart);\r\n            this.el.addEventListener('pointerdown', dd_touch_1.pointerdown);\r\n            // this.el.style.touchAction = 'none'; // not needed unlike pointerdown doc comment\r\n        }\r\n        return this;\r\n    }\r\n    /** call this when resize handle needs to be removed and cleaned up */\r\n    destroy() {\r\n        if (this.moving)\r\n            this._mouseUp(this.mouseDownEvent);\r\n        this.el.removeEventListener('mousedown', this._mouseDown);\r\n        if (dd_touch_1.isTouch) {\r\n            this.el.removeEventListener('touchstart', dd_touch_1.touchstart);\r\n            this.el.removeEventListener('pointerdown', dd_touch_1.pointerdown);\r\n        }\r\n        this.host.removeChild(this.el);\r\n        delete this.el;\r\n        delete this.host;\r\n        return this;\r\n    }\r\n    /** @internal called on mouse down on us: capture move on the entire document (mouse might not stay on us) until we release the mouse */\r\n    _mouseDown(e) {\r\n        this.mouseDownEvent = e;\r\n        document.addEventListener('mousemove', this._mouseMove, true); // capture, not bubble\r\n        document.addEventListener('mouseup', this._mouseUp, true);\r\n        if (dd_touch_1.isTouch) {\r\n            this.el.addEventListener('touchmove', dd_touch_1.touchmove);\r\n            this.el.addEventListener('touchend', dd_touch_1.touchend);\r\n        }\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n    }\r\n    /** @internal */\r\n    _mouseMove(e) {\r\n        let s = this.mouseDownEvent;\r\n        if (this.moving) {\r\n            this._triggerEvent('move', e);\r\n        }\r\n        else if (Math.abs(e.x - s.x) + Math.abs(e.y - s.y) > 2) {\r\n            // don't start unless we've moved at least 3 pixels\r\n            this.moving = true;\r\n            this._triggerEvent('start', this.mouseDownEvent);\r\n            this._triggerEvent('move', e);\r\n        }\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n    }\r\n    /** @internal */\r\n    _mouseUp(e) {\r\n        if (this.moving) {\r\n            this._triggerEvent('stop', e);\r\n        }\r\n        document.removeEventListener('mousemove', this._mouseMove, true);\r\n        document.removeEventListener('mouseup', this._mouseUp, true);\r\n        if (dd_touch_1.isTouch) {\r\n            this.el.removeEventListener('touchmove', dd_touch_1.touchmove);\r\n            this.el.removeEventListener('touchend', dd_touch_1.touchend);\r\n        }\r\n        delete this.moving;\r\n        delete this.mouseDownEvent;\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n    }\r\n    /** @internal */\r\n    _triggerEvent(name, event) {\r\n        if (this.option[name])\r\n            this.option[name](event);\r\n        return this;\r\n    }\r\n}\r\nexports.DDResizableHandle = DDResizableHandle;\r\n/** @internal */\r\nDDResizableHandle.prefix = 'ui-resizable-';\r\n//# sourceMappingURL=dd-resizable-handle.js.map","\"use strict\";\r\n/**\r\n * dd-elements.ts 7.1.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DDElement = void 0;\r\nconst dd_resizable_1 = require(\"./dd-resizable\");\r\nconst dd_draggable_1 = require(\"./dd-draggable\");\r\nconst dd_droppable_1 = require(\"./dd-droppable\");\r\nclass DDElement {\r\n    constructor(el) {\r\n        this.el = el;\r\n    }\r\n    static init(el) {\r\n        if (!el.ddElement) {\r\n            el.ddElement = new DDElement(el);\r\n        }\r\n        return el.ddElement;\r\n    }\r\n    on(eventName, callback) {\r\n        if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\r\n            this.ddDraggable.on(eventName, callback);\r\n        }\r\n        else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\r\n            this.ddDroppable.on(eventName, callback);\r\n        }\r\n        else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\r\n            this.ddResizable.on(eventName, callback);\r\n        }\r\n        return this;\r\n    }\r\n    off(eventName) {\r\n        if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\r\n            this.ddDraggable.off(eventName);\r\n        }\r\n        else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\r\n            this.ddDroppable.off(eventName);\r\n        }\r\n        else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\r\n            this.ddResizable.off(eventName);\r\n        }\r\n        return this;\r\n    }\r\n    setupDraggable(opts) {\r\n        if (!this.ddDraggable) {\r\n            this.ddDraggable = new dd_draggable_1.DDDraggable(this.el, opts);\r\n        }\r\n        else {\r\n            this.ddDraggable.updateOption(opts);\r\n        }\r\n        return this;\r\n    }\r\n    cleanDraggable() {\r\n        if (this.ddDraggable) {\r\n            this.ddDraggable.destroy();\r\n            delete this.ddDraggable;\r\n        }\r\n        return this;\r\n    }\r\n    setupResizable(opts) {\r\n        if (!this.ddResizable) {\r\n            this.ddResizable = new dd_resizable_1.DDResizable(this.el, opts);\r\n        }\r\n        else {\r\n            this.ddResizable.updateOption(opts);\r\n        }\r\n        return this;\r\n    }\r\n    cleanResizable() {\r\n        if (this.ddResizable) {\r\n            this.ddResizable.destroy();\r\n            delete this.ddResizable;\r\n        }\r\n        return this;\r\n    }\r\n    setupDroppable(opts) {\r\n        if (!this.ddDroppable) {\r\n            this.ddDroppable = new dd_droppable_1.DDDroppable(this.el, opts);\r\n        }\r\n        else {\r\n            this.ddDroppable.updateOption(opts);\r\n        }\r\n        return this;\r\n    }\r\n    cleanDroppable() {\r\n        if (this.ddDroppable) {\r\n            this.ddDroppable.destroy();\r\n            delete this.ddDroppable;\r\n        }\r\n        return this;\r\n    }\r\n}\r\nexports.DDElement = DDElement;\r\n//# sourceMappingURL=dd-element.js.map","\"use strict\";\r\n/**\r\n * dd-draggable.ts 7.1.0\r\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DDDraggable = void 0;\r\nconst dd_manager_1 = require(\"./dd-manager\");\r\nconst utils_1 = require(\"./utils\");\r\nconst dd_base_impl_1 = require(\"./dd-base-impl\");\r\nconst dd_touch_1 = require(\"./dd-touch\");\r\n// let count = 0; // TEST\r\nclass DDDraggable extends dd_base_impl_1.DDBaseImplement {\r\n    constructor(el, option = {}) {\r\n        super();\r\n        this.el = el;\r\n        this.option = option;\r\n        // get the element that is actually supposed to be dragged by\r\n        let className = option.handle.substring(1);\r\n        this.dragEl = el.classList.contains(className) ? el : el.querySelector(option.handle) || el;\r\n        // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\r\n        this._mouseDown = this._mouseDown.bind(this);\r\n        this._mouseMove = this._mouseMove.bind(this);\r\n        this._mouseUp = this._mouseUp.bind(this);\r\n        this.enable();\r\n    }\r\n    on(event, callback) {\r\n        super.on(event, callback);\r\n    }\r\n    off(event) {\r\n        super.off(event);\r\n    }\r\n    enable() {\r\n        if (this.disabled === false)\r\n            return;\r\n        super.enable();\r\n        this.dragEl.addEventListener('mousedown', this._mouseDown);\r\n        if (dd_touch_1.isTouch) {\r\n            this.dragEl.addEventListener('touchstart', dd_touch_1.touchstart);\r\n            this.dragEl.addEventListener('pointerdown', dd_touch_1.pointerdown);\r\n            // this.dragEl.style.touchAction = 'none'; // not needed unlike pointerdown doc comment\r\n        }\r\n        this.el.classList.remove('ui-draggable-disabled');\r\n        this.el.classList.add('ui-draggable');\r\n    }\r\n    disable(forDestroy = false) {\r\n        if (this.disabled === true)\r\n            return;\r\n        super.disable();\r\n        this.dragEl.removeEventListener('mousedown', this._mouseDown);\r\n        if (dd_touch_1.isTouch) {\r\n            this.dragEl.removeEventListener('touchstart', dd_touch_1.touchstart);\r\n            this.dragEl.removeEventListener('pointerdown', dd_touch_1.pointerdown);\r\n        }\r\n        this.el.classList.remove('ui-draggable');\r\n        if (!forDestroy)\r\n            this.el.classList.add('ui-draggable-disabled');\r\n    }\r\n    destroy() {\r\n        if (this.dragTimeout)\r\n            window.clearTimeout(this.dragTimeout);\r\n        delete this.dragTimeout;\r\n        if (this.dragging)\r\n            this._mouseUp(this.mouseDownEvent);\r\n        this.disable(true);\r\n        delete this.el;\r\n        delete this.helper;\r\n        delete this.option;\r\n        super.destroy();\r\n    }\r\n    updateOption(opts) {\r\n        Object.keys(opts).forEach(key => this.option[key] = opts[key]);\r\n        return this;\r\n    }\r\n    /** @internal call when mouse goes down before a dragstart happens */\r\n    _mouseDown(e) {\r\n        // don't let more than one widget handle mouseStart\r\n        if (dd_manager_1.DDManager.mouseHandled)\r\n            return;\r\n        if (e.button !== 0)\r\n            return true; // only left click\r\n        // make sure we are not clicking on known object that handles mouseDown (TODO: make this extensible ?) #2054\r\n        const skipMouseDown = ['input', 'textarea', 'button', 'select', 'option'];\r\n        const name = e.target.nodeName.toLowerCase();\r\n        if (skipMouseDown.find(skip => skip === name))\r\n            return true;\r\n        // make sure we are clicking on a drag handle or child of it...\r\n        // Note: we don't need to check that's handle is an immediate child, as mouseHandled will prevent parents from also handling it (lowest wins)\r\n        //\r\n        // REMOVE: why would we get the event if it wasn't for us or child ?\r\n        // let className = this.option.handle.substring(1);\r\n        // let el = e.target as HTMLElement;\r\n        // while (el && !el.classList.contains(className)) { el = el.parentElement; }\r\n        // if (!el) return;\r\n        this.mouseDownEvent = e;\r\n        delete this.dragging;\r\n        delete dd_manager_1.DDManager.dragElement;\r\n        delete dd_manager_1.DDManager.dropElement;\r\n        // document handler so we can continue receiving moves as the item is 'fixed' position, and capture=true so WE get a first crack\r\n        document.addEventListener('mousemove', this._mouseMove, true); // true=capture, not bubble\r\n        document.addEventListener('mouseup', this._mouseUp, true);\r\n        if (dd_touch_1.isTouch) {\r\n            this.dragEl.addEventListener('touchmove', dd_touch_1.touchmove);\r\n            this.dragEl.addEventListener('touchend', dd_touch_1.touchend);\r\n        }\r\n        e.preventDefault();\r\n        dd_manager_1.DDManager.mouseHandled = true;\r\n        return true;\r\n    }\r\n    /** @internal method to call actual drag event */\r\n    _callDrag(e) {\r\n        if (!this.dragging)\r\n            return;\r\n        const ev = utils_1.Utils.initEvent(e, { target: this.el, type: 'drag' });\r\n        if (this.option.drag) {\r\n            this.option.drag(ev, this.ui());\r\n        }\r\n        this.triggerEvent('drag', ev);\r\n    }\r\n    /** @internal called when the main page (after successful mousedown) receives a move event to drag the item around the screen */\r\n    _mouseMove(e) {\r\n        var _a;\r\n        // console.log(`${count++} move ${e.x},${e.y}`)\r\n        let s = this.mouseDownEvent;\r\n        if (this.dragging) {\r\n            this._dragFollow(e);\r\n            // delay actual grid handling drag until we pause for a while if set\r\n            if (dd_manager_1.DDManager.pauseDrag) {\r\n                const pause = Number.isInteger(dd_manager_1.DDManager.pauseDrag) ? dd_manager_1.DDManager.pauseDrag : 100;\r\n                if (this.dragTimeout)\r\n                    window.clearTimeout(this.dragTimeout);\r\n                this.dragTimeout = window.setTimeout(() => this._callDrag(e), pause);\r\n            }\r\n            else {\r\n                this._callDrag(e);\r\n            }\r\n        }\r\n        else if (Math.abs(e.x - s.x) + Math.abs(e.y - s.y) > 3) {\r\n            /**\r\n             * don't start unless we've moved at least 3 pixels\r\n             */\r\n            this.dragging = true;\r\n            dd_manager_1.DDManager.dragElement = this;\r\n            // if we're dragging an actual grid item, set the current drop as the grid (to detect enter/leave)\r\n            let grid = (_a = this.el.gridstackNode) === null || _a === void 0 ? void 0 : _a.grid;\r\n            if (grid) {\r\n                dd_manager_1.DDManager.dropElement = grid.el.ddElement.ddDroppable;\r\n            }\r\n            else {\r\n                delete dd_manager_1.DDManager.dropElement;\r\n            }\r\n            this.helper = this._createHelper(e);\r\n            this._setupHelperContainmentStyle();\r\n            this.dragOffset = this._getDragOffset(e, this.el, this.helperContainment);\r\n            const ev = utils_1.Utils.initEvent(e, { target: this.el, type: 'dragstart' });\r\n            this._setupHelperStyle(e);\r\n            if (this.option.start) {\r\n                this.option.start(ev, this.ui());\r\n            }\r\n            this.triggerEvent('dragstart', ev);\r\n        }\r\n        e.preventDefault(); // needed otherwise we get text sweep text selection as we drag around\r\n        return true;\r\n    }\r\n    /** @internal call when the mouse gets released to drop the item at current location */\r\n    _mouseUp(e) {\r\n        var _a;\r\n        document.removeEventListener('mousemove', this._mouseMove, true);\r\n        document.removeEventListener('mouseup', this._mouseUp, true);\r\n        if (dd_touch_1.isTouch) {\r\n            this.dragEl.removeEventListener('touchmove', dd_touch_1.touchmove, true);\r\n            this.dragEl.removeEventListener('touchend', dd_touch_1.touchend, true);\r\n        }\r\n        if (this.dragging) {\r\n            delete this.dragging;\r\n            // reset the drop target if dragging over ourself (already parented, just moving during stop callback below)\r\n            if (((_a = dd_manager_1.DDManager.dropElement) === null || _a === void 0 ? void 0 : _a.el) === this.el.parentElement) {\r\n                delete dd_manager_1.DDManager.dropElement;\r\n            }\r\n            this.helperContainment.style.position = this.parentOriginStylePosition || null;\r\n            if (this.helper === this.el) {\r\n                this._removeHelperStyle();\r\n            }\r\n            else {\r\n                this.helper.remove();\r\n            }\r\n            const ev = utils_1.Utils.initEvent(e, { target: this.el, type: 'dragstop' });\r\n            if (this.option.stop) {\r\n                this.option.stop(ev); // NOTE: destroy() will be called when removing item, so expect NULL ptr after!\r\n            }\r\n            this.triggerEvent('dragstop', ev);\r\n            // call the droppable method to receive the item\r\n            if (dd_manager_1.DDManager.dropElement) {\r\n                dd_manager_1.DDManager.dropElement.drop(e);\r\n            }\r\n        }\r\n        delete this.helper;\r\n        delete this.mouseDownEvent;\r\n        delete dd_manager_1.DDManager.dragElement;\r\n        delete dd_manager_1.DDManager.dropElement;\r\n        delete dd_manager_1.DDManager.mouseHandled;\r\n        e.preventDefault();\r\n    }\r\n    /** @internal create a clone copy (or user defined method) of the original drag item if set */\r\n    _createHelper(event) {\r\n        let helper = this.el;\r\n        if (typeof this.option.helper === 'function') {\r\n            helper = this.option.helper(event);\r\n        }\r\n        else if (this.option.helper === 'clone') {\r\n            helper = utils_1.Utils.cloneNode(this.el);\r\n        }\r\n        if (!document.body.contains(helper)) {\r\n            utils_1.Utils.appendTo(helper, this.option.appendTo === 'parent' ? this.el.parentNode : this.option.appendTo);\r\n        }\r\n        if (helper === this.el) {\r\n            this.dragElementOriginStyle = DDDraggable.originStyleProp.map(prop => this.el.style[prop]);\r\n        }\r\n        return helper;\r\n    }\r\n    /** @internal set the fix position of the dragged item */\r\n    _setupHelperStyle(e) {\r\n        this.helper.classList.add('ui-draggable-dragging');\r\n        // TODO: set all at once with style.cssText += ... ? https://stackoverflow.com/questions/3968593\r\n        const style = this.helper.style;\r\n        style.pointerEvents = 'none'; // needed for over items to get enter/leave\r\n        // style.cursor = 'move'; //  TODO: can't set with pointerEvents=none ! (done in CSS as well)\r\n        style['min-width'] = 0; // since we no longer relative to our parent and we don't resize anyway (normally 100/#column %)\r\n        style.width = this.dragOffset.width + 'px';\r\n        style.height = this.dragOffset.height + 'px';\r\n        style.willChange = 'left, top';\r\n        style.position = 'fixed'; // let us drag between grids by not clipping as parent .grid-stack is position: 'relative'\r\n        this._dragFollow(e); // now position it\r\n        style.transition = 'none'; // show up instantly\r\n        setTimeout(() => {\r\n            if (this.helper) {\r\n                style.transition = null; // recover animation\r\n            }\r\n        }, 0);\r\n        return this;\r\n    }\r\n    /** @internal restore back the original style before dragging */\r\n    _removeHelperStyle() {\r\n        var _a;\r\n        this.helper.classList.remove('ui-draggable-dragging');\r\n        let node = (_a = this.helper) === null || _a === void 0 ? void 0 : _a.gridstackNode;\r\n        // don't bother restoring styles if we're gonna remove anyway...\r\n        if (this.dragElementOriginStyle && (!node || !node._isAboutToRemove)) {\r\n            let helper = this.helper;\r\n            // don't animate, otherwise we animate offseted when switching back to 'absolute' from 'fixed'\r\n            let transition = this.dragElementOriginStyle['transition'] || null;\r\n            helper.style.transition = this.dragElementOriginStyle['transition'] = 'none';\r\n            DDDraggable.originStyleProp.forEach(prop => helper.style[prop] = this.dragElementOriginStyle[prop] || null);\r\n            setTimeout(() => helper.style.transition = transition, 50); // recover animation from saved vars after a pause (0 isn't enough #1973)\r\n        }\r\n        delete this.dragElementOriginStyle;\r\n        return this;\r\n    }\r\n    /** @internal updates the top/left position to follow the mouse */\r\n    _dragFollow(e) {\r\n        let containmentRect = { left: 0, top: 0 };\r\n        // if (this.helper.style.position === 'absolute') { // we use 'fixed'\r\n        //   const { left, top } = this.helperContainment.getBoundingClientRect();\r\n        //   containmentRect = { left, top };\r\n        // }\r\n        const style = this.helper.style;\r\n        const offset = this.dragOffset;\r\n        style.left = e.clientX + offset.offsetLeft - containmentRect.left + 'px';\r\n        style.top = e.clientY + offset.offsetTop - containmentRect.top + 'px';\r\n    }\r\n    /** @internal */\r\n    _setupHelperContainmentStyle() {\r\n        this.helperContainment = this.helper.parentElement;\r\n        if (this.helper.style.position !== 'fixed') {\r\n            this.parentOriginStylePosition = this.helperContainment.style.position;\r\n            if (window.getComputedStyle(this.helperContainment).position.match(/static/)) {\r\n                this.helperContainment.style.position = 'relative';\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    /** @internal */\r\n    _getDragOffset(event, el, parent) {\r\n        // in case ancestor has transform/perspective css properties that change the viewpoint\r\n        let xformOffsetX = 0;\r\n        let xformOffsetY = 0;\r\n        if (parent) {\r\n            const testEl = document.createElement('div');\r\n            utils_1.Utils.addElStyles(testEl, {\r\n                opacity: '0',\r\n                position: 'fixed',\r\n                top: 0 + 'px',\r\n                left: 0 + 'px',\r\n                width: '1px',\r\n                height: '1px',\r\n                zIndex: '-999999',\r\n            });\r\n            parent.appendChild(testEl);\r\n            const testElPosition = testEl.getBoundingClientRect();\r\n            parent.removeChild(testEl);\r\n            xformOffsetX = testElPosition.left;\r\n            xformOffsetY = testElPosition.top;\r\n            // TODO: scale ?\r\n        }\r\n        const targetOffset = el.getBoundingClientRect();\r\n        return {\r\n            left: targetOffset.left,\r\n            top: targetOffset.top,\r\n            offsetLeft: -event.clientX + targetOffset.left - xformOffsetX,\r\n            offsetTop: -event.clientY + targetOffset.top - xformOffsetY,\r\n            width: targetOffset.width,\r\n            height: targetOffset.height\r\n        };\r\n    }\r\n    /** @internal TODO: set to public as called by DDDroppable! */\r\n    ui() {\r\n        const containmentEl = this.el.parentElement;\r\n        const containmentRect = containmentEl.getBoundingClientRect();\r\n        const offset = this.helper.getBoundingClientRect();\r\n        return {\r\n            position: {\r\n                top: offset.top - containmentRect.top,\r\n                left: offset.left - containmentRect.left\r\n            }\r\n            /* not used by GridStack for now...\r\n            helper: [this.helper], //The object arr representing the helper that's being dragged.\r\n            offset: { top: offset.top, left: offset.left } // Current offset position of the helper as { top, left } object.\r\n            */\r\n        };\r\n    }\r\n}\r\nexports.DDDraggable = DDDraggable;\r\n/** @internal properties we change during dragging, and restore back */\r\nDDDraggable.originStyleProp = ['transition', 'pointerEvents', 'position', 'left', 'top'];\r\n//# sourceMappingURL=dd-draggable.js.map","\"use strict\";\r\n/**\r\n * dd-droppable.ts 7.1.0\r\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DDDroppable = void 0;\r\nconst dd_manager_1 = require(\"./dd-manager\");\r\nconst dd_base_impl_1 = require(\"./dd-base-impl\");\r\nconst utils_1 = require(\"./utils\");\r\nconst dd_touch_1 = require(\"./dd-touch\");\r\n// let count = 0; // TEST\r\nclass DDDroppable extends dd_base_impl_1.DDBaseImplement {\r\n    constructor(el, opts = {}) {\r\n        super();\r\n        this.el = el;\r\n        this.option = opts;\r\n        // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\r\n        this._mouseEnter = this._mouseEnter.bind(this);\r\n        this._mouseLeave = this._mouseLeave.bind(this);\r\n        this.enable();\r\n        this._setupAccept();\r\n    }\r\n    on(event, callback) {\r\n        super.on(event, callback);\r\n    }\r\n    off(event) {\r\n        super.off(event);\r\n    }\r\n    enable() {\r\n        if (this.disabled === false)\r\n            return;\r\n        super.enable();\r\n        this.el.classList.add('ui-droppable');\r\n        this.el.classList.remove('ui-droppable-disabled');\r\n        this.el.addEventListener('mouseenter', this._mouseEnter);\r\n        this.el.addEventListener('mouseleave', this._mouseLeave);\r\n        if (dd_touch_1.isTouch) {\r\n            this.el.addEventListener('pointerenter', dd_touch_1.pointerenter);\r\n            this.el.addEventListener('pointerleave', dd_touch_1.pointerleave);\r\n        }\r\n    }\r\n    disable(forDestroy = false) {\r\n        if (this.disabled === true)\r\n            return;\r\n        super.disable();\r\n        this.el.classList.remove('ui-droppable');\r\n        if (!forDestroy)\r\n            this.el.classList.add('ui-droppable-disabled');\r\n        this.el.removeEventListener('mouseenter', this._mouseEnter);\r\n        this.el.removeEventListener('mouseleave', this._mouseLeave);\r\n        if (dd_touch_1.isTouch) {\r\n            this.el.removeEventListener('pointerenter', dd_touch_1.pointerenter);\r\n            this.el.removeEventListener('pointerleave', dd_touch_1.pointerleave);\r\n        }\r\n    }\r\n    destroy() {\r\n        this.disable(true);\r\n        this.el.classList.remove('ui-droppable');\r\n        this.el.classList.remove('ui-droppable-disabled');\r\n        super.destroy();\r\n    }\r\n    updateOption(opts) {\r\n        Object.keys(opts).forEach(key => this.option[key] = opts[key]);\r\n        this._setupAccept();\r\n        return this;\r\n    }\r\n    /** @internal called when the cursor enters our area - prepare for a possible drop and track leaving */\r\n    _mouseEnter(e) {\r\n        // console.log(`${count++} Enter ${this.el.id || (this.el as GridHTMLElement).gridstack.opts.id}`); // TEST\r\n        if (!dd_manager_1.DDManager.dragElement)\r\n            return;\r\n        if (!this._canDrop(dd_manager_1.DDManager.dragElement.el))\r\n            return;\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        // make sure when we enter this, that the last one gets a leave FIRST to correctly cleanup as we don't always do\r\n        if (dd_manager_1.DDManager.dropElement && dd_manager_1.DDManager.dropElement !== this) {\r\n            dd_manager_1.DDManager.dropElement._mouseLeave(e);\r\n        }\r\n        dd_manager_1.DDManager.dropElement = this;\r\n        const ev = utils_1.Utils.initEvent(e, { target: this.el, type: 'dropover' });\r\n        if (this.option.over) {\r\n            this.option.over(ev, this._ui(dd_manager_1.DDManager.dragElement));\r\n        }\r\n        this.triggerEvent('dropover', ev);\r\n        this.el.classList.add('ui-droppable-over');\r\n        // console.log('tracking'); // TEST\r\n    }\r\n    /** @internal called when the item is leaving our area, stop tracking if we had moving item */\r\n    _mouseLeave(e) {\r\n        var _a;\r\n        // console.log(`${count++} Leave ${this.el.id || (this.el as GridHTMLElement).gridstack.opts.id}`); // TEST\r\n        if (!dd_manager_1.DDManager.dragElement || dd_manager_1.DDManager.dropElement !== this)\r\n            return;\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        const ev = utils_1.Utils.initEvent(e, { target: this.el, type: 'dropout' });\r\n        if (this.option.out) {\r\n            this.option.out(ev, this._ui(dd_manager_1.DDManager.dragElement));\r\n        }\r\n        this.triggerEvent('dropout', ev);\r\n        if (dd_manager_1.DDManager.dropElement === this) {\r\n            delete dd_manager_1.DDManager.dropElement;\r\n            // console.log('not tracking'); // TEST\r\n            // if we're still over a parent droppable, send it an enter as we don't get one from leaving nested children\r\n            let parentDrop;\r\n            let parent = this.el.parentElement;\r\n            while (!parentDrop && parent) {\r\n                parentDrop = (_a = parent.ddElement) === null || _a === void 0 ? void 0 : _a.ddDroppable;\r\n                parent = parent.parentElement;\r\n            }\r\n            if (parentDrop) {\r\n                parentDrop._mouseEnter(e);\r\n            }\r\n        }\r\n    }\r\n    /** item is being dropped on us - called by the drag mouseup handler - this calls the client drop event */\r\n    drop(e) {\r\n        e.preventDefault();\r\n        const ev = utils_1.Utils.initEvent(e, { target: this.el, type: 'drop' });\r\n        if (this.option.drop) {\r\n            this.option.drop(ev, this._ui(dd_manager_1.DDManager.dragElement));\r\n        }\r\n        this.triggerEvent('drop', ev);\r\n    }\r\n    /** @internal true if element matches the string/method accept option */\r\n    _canDrop(el) {\r\n        return el && (!this.accept || this.accept(el));\r\n    }\r\n    /** @internal */\r\n    _setupAccept() {\r\n        if (!this.option.accept)\r\n            return this;\r\n        if (typeof this.option.accept === 'string') {\r\n            this.accept = (el) => el.matches(this.option.accept);\r\n        }\r\n        else {\r\n            this.accept = this.option.accept;\r\n        }\r\n        return this;\r\n    }\r\n    /** @internal */\r\n    _ui(drag) {\r\n        return Object.assign({ draggable: drag.el }, drag.ui());\r\n    }\r\n}\r\nexports.DDDroppable = DDDroppable;\r\n//# sourceMappingURL=dd-droppable.js.map","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GridStack = void 0;\r\n/*!\r\n * GridStack 7.1.0\r\n * https://gridstackjs.com/\r\n *\r\n * Copyright (c) 2021-2022 Alain Dumesny\r\n * see root license https://github.com/gridstack/gridstack.js/tree/master/LICENSE\r\n */\r\nconst gridstack_engine_1 = require(\"./gridstack-engine\");\r\nconst utils_1 = require(\"./utils\");\r\nconst types_1 = require(\"./types\");\r\n// export all dependent file as well to make it easier for users to just import the main file\r\n__exportStar(require(\"./types\"), exports);\r\n__exportStar(require(\"./utils\"), exports);\r\n__exportStar(require(\"./gridstack-engine\"), exports);\r\n/**\r\n * Main gridstack class - you will need to call `GridStack.init()` first to initialize your grid.\r\n * Note: your grid elements MUST have the following classes for the CSS layout to work:\r\n * @example\r\n * <div class=\"grid-stack\">\r\n *   <div class=\"grid-stack-item\">\r\n *     <div class=\"grid-stack-item-content\">Item 1</div>\r\n *   </div>\r\n * </div>\r\n */\r\nclass GridStack {\r\n    /**\r\n     * Construct a grid item from the given element and options\r\n     * @param el\r\n     * @param opts\r\n     */\r\n    constructor(el, opts = {}) {\r\n        var _a, _b;\r\n        /** @internal */\r\n        this._gsEventHandler = {};\r\n        /** @internal extra row added when dragging at the bottom of the grid */\r\n        this._extraDragRow = 0;\r\n        this.el = el; // exposed HTML element to the user\r\n        opts = opts || {}; // handles null/undefined/0\r\n        // if row property exists, replace minRow and maxRow instead\r\n        if (opts.row) {\r\n            opts.minRow = opts.maxRow = opts.row;\r\n            delete opts.row;\r\n        }\r\n        let rowAttr = utils_1.Utils.toNumber(el.getAttribute('gs-row'));\r\n        // flag only valid in sub-grids (handled by parent, not here)\r\n        if (opts.column === 'auto') {\r\n            delete opts.column;\r\n        }\r\n        // 'minWidth' legacy support in 5.1\r\n        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\r\n        let anyOpts = opts;\r\n        if (anyOpts.minWidth !== undefined) {\r\n            opts.oneColumnSize = opts.oneColumnSize || anyOpts.minWidth;\r\n            delete anyOpts.minWidth;\r\n        }\r\n        // save original setting so we can restore on save\r\n        if (opts.alwaysShowResizeHandle !== undefined) {\r\n            opts._alwaysShowResizeHandle = opts.alwaysShowResizeHandle;\r\n        }\r\n        // elements DOM attributes override any passed options (like CSS style) - merge the two together\r\n        let defaults = Object.assign(Object.assign({}, utils_1.Utils.cloneDeep(types_1.gridDefaults)), { column: utils_1.Utils.toNumber(el.getAttribute('gs-column')) || types_1.gridDefaults.column, minRow: rowAttr ? rowAttr : utils_1.Utils.toNumber(el.getAttribute('gs-min-row')) || types_1.gridDefaults.minRow, maxRow: rowAttr ? rowAttr : utils_1.Utils.toNumber(el.getAttribute('gs-max-row')) || types_1.gridDefaults.maxRow, staticGrid: utils_1.Utils.toBool(el.getAttribute('gs-static')) || types_1.gridDefaults.staticGrid, draggable: {\r\n                handle: (opts.handleClass ? '.' + opts.handleClass : (opts.handle ? opts.handle : '')) || types_1.gridDefaults.draggable.handle,\r\n            }, removableOptions: {\r\n                accept: opts.itemClass ? '.' + opts.itemClass : types_1.gridDefaults.removableOptions.accept,\r\n            } });\r\n        if (el.getAttribute('gs-animate')) { // default to true, but if set to false use that instead\r\n            defaults.animate = utils_1.Utils.toBool(el.getAttribute('gs-animate'));\r\n        }\r\n        this.opts = utils_1.Utils.defaults(opts, defaults);\r\n        opts = null; // make sure we use this.opts instead\r\n        this._initMargin(); // part of settings defaults...\r\n        // Now check if we're loading into 1 column mode FIRST so we don't do un-necessary work (like cellHeight = width / 12 then go 1 column)\r\n        if (this.opts.column !== 1 && !this.opts.disableOneColumnMode && this._widthOrContainer() <= this.opts.oneColumnSize) {\r\n            this._prevColumn = this.getColumn();\r\n            this.opts.column = 1;\r\n        }\r\n        if (this.opts.rtl === 'auto') {\r\n            this.opts.rtl = (el.style.direction === 'rtl');\r\n        }\r\n        if (this.opts.rtl) {\r\n            this.el.classList.add('grid-stack-rtl');\r\n        }\r\n        // check if we're been nested, and if so update our style and keep pointer around (used during save)\r\n        let parentGridItem = (_a = utils_1.Utils.closestUpByClass(this.el, types_1.gridDefaults.itemClass)) === null || _a === void 0 ? void 0 : _a.gridstackNode;\r\n        if (parentGridItem) {\r\n            parentGridItem.subGrid = this;\r\n            this.parentGridItem = parentGridItem;\r\n            this.el.classList.add('grid-stack-nested');\r\n            parentGridItem.el.classList.add('grid-stack-sub-grid');\r\n        }\r\n        this._isAutoCellHeight = (this.opts.cellHeight === 'auto');\r\n        if (this._isAutoCellHeight || this.opts.cellHeight === 'initial') {\r\n            // make the cell content square initially (will use resize/column event to keep it square)\r\n            this.cellHeight(undefined, false);\r\n        }\r\n        else {\r\n            // append unit if any are set\r\n            if (typeof this.opts.cellHeight == 'number' && this.opts.cellHeightUnit && this.opts.cellHeightUnit !== types_1.gridDefaults.cellHeightUnit) {\r\n                this.opts.cellHeight = this.opts.cellHeight + this.opts.cellHeightUnit;\r\n                delete this.opts.cellHeightUnit;\r\n            }\r\n            this.cellHeight(this.opts.cellHeight, false);\r\n        }\r\n        // see if we need to adjust auto-hide\r\n        if (this.opts.alwaysShowResizeHandle === 'mobile') {\r\n            this.opts.alwaysShowResizeHandle = dd_touch_1.isTouch;\r\n        }\r\n        this._styleSheetClass = 'grid-stack-instance-' + gridstack_engine_1.GridStackEngine._idSeq++;\r\n        this.el.classList.add(this._styleSheetClass);\r\n        this._setStaticClass();\r\n        let engineClass = this.opts.engineClass || GridStack.engineClass || gridstack_engine_1.GridStackEngine;\r\n        this.engine = new engineClass({\r\n            column: this.getColumn(),\r\n            float: this.opts.float,\r\n            maxRow: this.opts.maxRow,\r\n            onChange: (cbNodes) => {\r\n                let maxH = 0;\r\n                this.engine.nodes.forEach(n => { maxH = Math.max(maxH, n.y + n.h); });\r\n                cbNodes.forEach(n => {\r\n                    let el = n.el;\r\n                    if (!el)\r\n                        return;\r\n                    if (n._removeDOM) {\r\n                        if (el)\r\n                            el.remove();\r\n                        delete n._removeDOM;\r\n                    }\r\n                    else {\r\n                        this._writePosAttr(el, n);\r\n                    }\r\n                });\r\n                this._updateStyles(false, maxH); // false = don't recreate, just append if need be\r\n            }\r\n        });\r\n        if (this.opts.auto) {\r\n            this.batchUpdate(); // prevent in between re-layout #1535 TODO: this only set float=true, need to prevent collision check...\r\n            let elements = [];\r\n            let column = this.getColumn();\r\n            if (column === 1 && this._prevColumn)\r\n                column = this._prevColumn; // do 12 column when reading into 1 column mode\r\n            this.getGridItems().forEach(el => {\r\n                let x = parseInt(el.getAttribute('gs-x'));\r\n                let y = parseInt(el.getAttribute('gs-y'));\r\n                elements.push({\r\n                    el,\r\n                    // if x,y are missing (autoPosition) add them to end of list - but keep their respective DOM order\r\n                    i: (Number.isNaN(x) ? 1000 : x) + (Number.isNaN(y) ? 1000 : y) * column\r\n                });\r\n            });\r\n            elements.sort((a, b) => b.i - a.i).forEach(e => this._prepareElement(e.el)); // revert sort so lowest item wins\r\n            this.batchUpdate(false);\r\n        }\r\n        this.setAnimation(this.opts.animate);\r\n        this._updateStyles();\r\n        if (this.opts.column != 12) {\r\n            this.el.classList.add('grid-stack-' + this.opts.column);\r\n        }\r\n        // legacy support to appear 'per grid` options when really global.\r\n        if (this.opts.dragIn)\r\n            GridStack.setupDragIn(this.opts.dragIn, this.opts.dragInOptions);\r\n        delete this.opts.dragIn;\r\n        delete this.opts.dragInOptions;\r\n        // dynamic grids require pausing during drag to detect over to nest vs push\r\n        if (this.opts.subGridDynamic && !dd_manager_1.DDManager.pauseDrag)\r\n            dd_manager_1.DDManager.pauseDrag = true;\r\n        if (((_b = this.opts.draggable) === null || _b === void 0 ? void 0 : _b.pause) !== undefined)\r\n            dd_manager_1.DDManager.pauseDrag = this.opts.draggable.pause;\r\n        this._setupRemoveDrop();\r\n        this._setupAcceptWidget();\r\n        this._updateWindowResizeEvent();\r\n    }\r\n    /**\r\n     * initializing the HTML element, or selector string, into a grid will return the grid. Calling it again will\r\n     * simply return the existing instance (ignore any passed options). There is also an initAll() version that support\r\n     * multiple grids initialization at once. Or you can use addGrid() to create the entire grid from JSON.\r\n     * @param options grid options (optional)\r\n     * @param elOrString element or CSS selector (first one used) to convert to a grid (default to '.grid-stack' class selector)\r\n     *\r\n     * @example\r\n     * let grid = GridStack.init();\r\n     *\r\n     * Note: the HTMLElement (of type GridHTMLElement) will store a `gridstack: GridStack` value that can be retrieve later\r\n     * let grid = document.querySelector('.grid-stack').gridstack;\r\n     */\r\n    static init(options = {}, elOrString = '.grid-stack') {\r\n        let el = GridStack.getGridElement(elOrString);\r\n        if (!el) {\r\n            if (typeof elOrString === 'string') {\r\n                console.error('GridStack.initAll() no grid was found with selector \"' + elOrString + '\" - element missing or wrong selector ?' +\r\n                    '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n            }\r\n            else {\r\n                console.error('GridStack.init() no grid element was passed.');\r\n            }\r\n            return null;\r\n        }\r\n        if (!el.gridstack) {\r\n            el.gridstack = new GridStack(el, utils_1.Utils.cloneDeep(options));\r\n        }\r\n        return el.gridstack;\r\n    }\r\n    /**\r\n     * Will initialize a list of elements (given a selector) and return an array of grids.\r\n     * @param options grid options (optional)\r\n     * @param selector elements selector to convert to grids (default to '.grid-stack' class selector)\r\n     *\r\n     * @example\r\n     * let grids = GridStack.initAll();\r\n     * grids.forEach(...)\r\n     */\r\n    static initAll(options = {}, selector = '.grid-stack') {\r\n        let grids = [];\r\n        GridStack.getGridElements(selector).forEach(el => {\r\n            if (!el.gridstack) {\r\n                el.gridstack = new GridStack(el, utils_1.Utils.cloneDeep(options));\r\n                delete options.dragIn;\r\n                delete options.dragInOptions; // only need to be done once (really a static global thing, not per grid)\r\n            }\r\n            grids.push(el.gridstack);\r\n        });\r\n        if (grids.length === 0) {\r\n            console.error('GridStack.initAll() no grid was found with selector \"' + selector + '\" - element missing or wrong selector ?' +\r\n                '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n        }\r\n        return grids;\r\n    }\r\n    /**\r\n     * call to create a grid with the given options, including loading any children from JSON structure. This will call GridStack.init(), then\r\n     * grid.load() on any passed children (recursively). Great alternative to calling init() if you want entire grid to come from\r\n     * JSON serialized data, including options.\r\n     * @param parent HTML element parent to the grid\r\n     * @param opt grids options used to initialize the grid, and list of children\r\n     */\r\n    static addGrid(parent, opt = {}) {\r\n        if (!parent)\r\n            return null;\r\n        // create the grid element, but check if the passed 'parent' already has grid styling and should be used instead\r\n        let el = parent;\r\n        if (!parent.classList.contains('grid-stack')) {\r\n            let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n            doc.body.innerHTML = `<div class=\"grid-stack ${opt.class || ''}\"></div>`;\r\n            el = doc.body.children[0];\r\n            parent.appendChild(el);\r\n        }\r\n        // create grid class and load any children\r\n        let grid = GridStack.init(opt, el);\r\n        if (grid.opts.children) {\r\n            let children = grid.opts.children;\r\n            delete grid.opts.children;\r\n            grid.load(children);\r\n        }\r\n        return grid;\r\n    }\r\n    /** call this method to register your engine instead of the default one.\r\n     * See instead `GridStackOptions.engineClass` if you only need to\r\n     * replace just one instance.\r\n     */\r\n    static registerEngine(engineClass) {\r\n        GridStack.engineClass = engineClass;\r\n    }\r\n    /** @internal create placeholder DIV as needed */\r\n    get placeholder() {\r\n        if (!this._placeholder) {\r\n            let placeholderChild = document.createElement('div'); // child so padding match item-content\r\n            placeholderChild.className = 'placeholder-content';\r\n            if (this.opts.placeholderText) {\r\n                placeholderChild.innerHTML = this.opts.placeholderText;\r\n            }\r\n            this._placeholder = document.createElement('div');\r\n            this._placeholder.classList.add(this.opts.placeholderClass, types_1.gridDefaults.itemClass, this.opts.itemClass);\r\n            this.placeholder.appendChild(placeholderChild);\r\n        }\r\n        return this._placeholder;\r\n    }\r\n    /**\r\n     * add a new widget and returns it.\r\n     *\r\n     * Widget will be always placed even if result height is more than actual grid height.\r\n     * You need to use `willItFit()` before calling addWidget for additional check.\r\n     * See also `makeWidget()`.\r\n     *\r\n     * @example\r\n     * let grid = GridStack.init();\r\n     * grid.addWidget({w: 3, content: 'hello'});\r\n     * grid.addWidget('<div class=\"grid-stack-item\"><div class=\"grid-stack-item-content\">hello</div></div>', {w: 3});\r\n     *\r\n     * @param el  GridStackWidget (which can have content string as well), html element, or string definition to add\r\n     * @param options widget position/size options (optional, and ignore if first param is already option) - see GridStackWidget\r\n     */\r\n    addWidget(els, options) {\r\n        function isGridStackWidget(w) {\r\n            return w.x !== undefined || w.y !== undefined || w.w !== undefined || w.h !== undefined || w.content !== undefined ? true : false;\r\n        }\r\n        let el;\r\n        if (typeof els === 'string') {\r\n            let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n            doc.body.innerHTML = els;\r\n            el = doc.body.children[0];\r\n        }\r\n        else if (arguments.length === 0 || arguments.length === 1 && isGridStackWidget(els)) {\r\n            let content = els ? els.content || '' : '';\r\n            options = els;\r\n            let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n            doc.body.innerHTML = `<div class=\"grid-stack-item ${this.opts.itemClass || ''}\"><div class=\"grid-stack-item-content\">${content}</div></div>`;\r\n            el = doc.body.children[0];\r\n        }\r\n        else {\r\n            el = els;\r\n        }\r\n        // Tempting to initialize the passed in opt with default and valid values, but this break knockout demos\r\n        // as the actual value are filled in when _prepareElement() calls el.getAttribute('gs-xyz) before adding the node.\r\n        // So make sure we load any DOM attributes that are not specified in passed in options (which override)\r\n        let domAttr = this._readAttr(el);\r\n        options = utils_1.Utils.cloneDeep(options) || {}; // make a copy before we modify in case caller re-uses it\r\n        utils_1.Utils.defaults(options, domAttr);\r\n        let node = this.engine.prepareNode(options);\r\n        this._writeAttr(el, options);\r\n        if (this._insertNotAppend) {\r\n            this.el.prepend(el);\r\n        }\r\n        else {\r\n            this.el.appendChild(el);\r\n        }\r\n        // similar to makeWidget() that doesn't read attr again and worse re-create a new node and loose any _id\r\n        this._prepareElement(el, true, options);\r\n        this._updateContainerHeight();\r\n        // see if there is a sub-grid to create too\r\n        if (node.subGrid) {\r\n            this.makeSubGrid(node.el, undefined, undefined, false);\r\n        }\r\n        // if we're adding an item into 1 column (_prevColumn is set only when going to 1) make sure\r\n        // we don't override the larger 12 column layout that was already saved. #1985\r\n        if (this._prevColumn && this.opts.column === 1) {\r\n            this._ignoreLayoutsNodeChange = true;\r\n        }\r\n        this._triggerAddEvent();\r\n        this._triggerChangeEvent();\r\n        delete this._ignoreLayoutsNodeChange;\r\n        return el;\r\n    }\r\n    /**\r\n     * Convert an existing gridItem element into a sub-grid with the given (optional) options, else inherit them\r\n     * from the parent subGrid options.\r\n     * @param el gridItem element to convert\r\n     * @param ops (optional) sub-grid options, else default to node, then parent settings, else defaults\r\n     * @param nodeToAdd (optional) node to add to the newly created sub grid (used when dragging over existing regular item)\r\n     * @returns newly created grid\r\n     */\r\n    makeSubGrid(el, ops, nodeToAdd, saveContent = true) {\r\n        var _a;\r\n        let node = el.gridstackNode;\r\n        if (!node) {\r\n            node = this.makeWidget(el).gridstackNode;\r\n        }\r\n        if ((_a = node.subGrid) === null || _a === void 0 ? void 0 : _a.el)\r\n            return node.subGrid; // already done\r\n        ops = utils_1.Utils.cloneDeep(ops || node.subGrid || Object.assign(Object.assign({}, this.opts.subGrid), { children: undefined }));\r\n        ops.subGrid = utils_1.Utils.cloneDeep(ops); // carry nesting settings to next one down\r\n        node.subGrid = ops;\r\n        // if column special case it set, remember that flag and set default\r\n        let autoColumn;\r\n        if (ops.column === 'auto') {\r\n            autoColumn = true;\r\n            ops.column = Math.max(node.w || 1, (nodeToAdd === null || nodeToAdd === void 0 ? void 0 : nodeToAdd.w) || 1);\r\n            ops.disableOneColumnMode = true; // driven by parent\r\n        }\r\n        // if we're converting an existing full item, move over the content to be the first sub item in the new grid\r\n        let content = node.el.querySelector('.grid-stack-item-content');\r\n        let newItem;\r\n        let newItemOpt;\r\n        if (saveContent) {\r\n            this._removeDD(node.el); // remove D&D since it's set on content div\r\n            let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n            doc.body.innerHTML = `<div class=\"grid-stack-item\"></div>`;\r\n            newItem = doc.body.children[0];\r\n            newItem.appendChild(content);\r\n            newItemOpt = Object.assign(Object.assign({}, node), { x: 0, y: 0 });\r\n            utils_1.Utils.removeInternalForSave(newItemOpt);\r\n            delete newItemOpt.subGrid;\r\n            if (node.content) {\r\n                newItemOpt.content = node.content;\r\n                delete node.content;\r\n            }\r\n            doc.body.innerHTML = `<div class=\"grid-stack-item-content\"></div>`;\r\n            content = doc.body.children[0];\r\n            node.el.appendChild(content);\r\n            this._prepareDragDropByNode(node); // ... and restore original D&D\r\n        }\r\n        // if we're adding an additional item, make the container large enough to have them both\r\n        if (nodeToAdd) {\r\n            let w = autoColumn ? ops.column : node.w;\r\n            let h = node.h + nodeToAdd.h;\r\n            let style = node.el.style;\r\n            style.transition = 'none'; // show up instantly so we don't see scrollbar with nodeToAdd\r\n            this.update(node.el, { w, h });\r\n            setTimeout(() => style.transition = null); // recover animation\r\n        }\r\n        let subGrid = node.subGrid = GridStack.addGrid(content, ops);\r\n        if (nodeToAdd === null || nodeToAdd === void 0 ? void 0 : nodeToAdd._moving)\r\n            subGrid._isTemp = true; // prevent re-nesting as we add over\r\n        if (autoColumn)\r\n            subGrid._autoColumn = true;\r\n        // add the original content back as a child of hte newly created grid\r\n        if (saveContent) {\r\n            subGrid.addWidget(newItem, newItemOpt);\r\n        }\r\n        // now add any additional node\r\n        if (nodeToAdd) {\r\n            if (nodeToAdd._moving) {\r\n                // create an artificial event even for the just created grid to receive this item\r\n                window.setTimeout(() => utils_1.Utils.simulateMouseEvent(nodeToAdd._event, 'mouseenter', subGrid.el), 0);\r\n            }\r\n            else {\r\n                subGrid.addWidget(node.el, node);\r\n            }\r\n        }\r\n        return subGrid;\r\n    }\r\n    /**\r\n     * called when an item was converted into a nested grid to accommodate a dragged over item, but then item leaves - return back\r\n     * to the original grid-item. Also called to remove empty sub-grids when last item is dragged out (since re-creating is simple)\r\n     */\r\n    removeAsSubGrid(nodeThatRemoved) {\r\n        var _a;\r\n        let pGrid = (_a = this.parentGridItem) === null || _a === void 0 ? void 0 : _a.grid;\r\n        if (!pGrid)\r\n            return;\r\n        pGrid.batchUpdate();\r\n        pGrid.removeWidget(this.parentGridItem.el, true, true);\r\n        this.engine.nodes.forEach(n => {\r\n            // migrate any children over and offsetting by our location\r\n            n.x += this.parentGridItem.x;\r\n            n.y += this.parentGridItem.y;\r\n            pGrid.addWidget(n.el, n);\r\n        });\r\n        pGrid.batchUpdate(false);\r\n        delete this.parentGridItem;\r\n        // create an artificial event for the original grid now that this one is gone (got a leave, but won't get enter)\r\n        if (nodeThatRemoved) {\r\n            window.setTimeout(() => utils_1.Utils.simulateMouseEvent(nodeThatRemoved._event, 'mouseenter', pGrid.el), 0);\r\n        }\r\n    }\r\n    /**\r\n    /**\r\n     * saves the current layout returning a list of widgets for serialization which might include any nested grids.\r\n     * @param saveContent if true (default) the latest html inside .grid-stack-content will be saved to GridStackWidget.content field, else it will\r\n     * be removed.\r\n     * @param saveGridOpt if true (default false), save the grid options itself, so you can call the new GridStack.addGrid()\r\n     * to recreate everything from scratch. GridStackOptions.children would then contain the widget list instead.\r\n     * @returns list of widgets or full grid option, including .children list of widgets\r\n     */\r\n    save(saveContent = true, saveGridOpt = false) {\r\n        // return copied nodes we can modify at will...\r\n        let list = this.engine.save(saveContent);\r\n        // check for HTML content and nested grids\r\n        list.forEach(n => {\r\n            if (saveContent && n.el && !n.subGrid) { // sub-grid are saved differently, not plain content\r\n                let sub = n.el.querySelector('.grid-stack-item-content');\r\n                n.content = sub ? sub.innerHTML : undefined;\r\n                if (!n.content)\r\n                    delete n.content;\r\n            }\r\n            else {\r\n                if (!saveContent) {\r\n                    delete n.content;\r\n                }\r\n                // check for nested grid\r\n                if (n.subGrid) {\r\n                    n.subGrid = n.subGrid.save(saveContent, true);\r\n                }\r\n            }\r\n            delete n.el;\r\n        });\r\n        // check if save entire grid options (needed for recursive) + children...\r\n        if (saveGridOpt) {\r\n            let o = utils_1.Utils.cloneDeep(this.opts);\r\n            // delete default values that will be recreated on launch\r\n            if (o.marginBottom === o.marginTop && o.marginRight === o.marginLeft && o.marginTop === o.marginRight) {\r\n                o.margin = o.marginTop;\r\n                delete o.marginTop;\r\n                delete o.marginRight;\r\n                delete o.marginBottom;\r\n                delete o.marginLeft;\r\n            }\r\n            if (o.rtl === (this.el.style.direction === 'rtl')) {\r\n                o.rtl = 'auto';\r\n            }\r\n            if (this._isAutoCellHeight) {\r\n                o.cellHeight = 'auto';\r\n            }\r\n            if (this._autoColumn) {\r\n                o.column = 'auto';\r\n                delete o.disableOneColumnMode;\r\n            }\r\n            const origShow = o._alwaysShowResizeHandle;\r\n            delete o._alwaysShowResizeHandle;\r\n            if (origShow !== undefined) {\r\n                o.alwaysShowResizeHandle = origShow;\r\n            }\r\n            else {\r\n                delete o.alwaysShowResizeHandle;\r\n            }\r\n            utils_1.Utils.removeInternalAndSame(o, types_1.gridDefaults);\r\n            o.children = list;\r\n            return o;\r\n        }\r\n        return list;\r\n    }\r\n    /**\r\n     * load the widgets from a list. This will call update() on each (matching by id) or add/remove widgets that are not there.\r\n     *\r\n     * @param layout list of widgets definition to update/create\r\n     * @param addAndRemove boolean (default true) or callback method can be passed to control if and how missing widgets can be added/removed, giving\r\n     * the user control of insertion.\r\n     *\r\n     * @example\r\n     * see http://gridstackjs.com/demo/serialization.html\r\n     **/\r\n    load(layout, addAndRemove = true) {\r\n        let items = GridStack.Utils.sort([...layout], -1, this._prevColumn || this.getColumn()); // make copy before we mod/sort\r\n        this._insertNotAppend = true; // since create in reverse order...\r\n        // if we're loading a layout into for example 1 column (_prevColumn is set only when going to 1) and items don't fit, make sure to save\r\n        // the original wanted layout so we can scale back up correctly #1471\r\n        if (this._prevColumn && this._prevColumn !== this.opts.column && items.some(n => (n.x + n.w) > this.opts.column)) {\r\n            this._ignoreLayoutsNodeChange = true; // skip layout update\r\n            this.engine.cacheLayout(items, this._prevColumn, true);\r\n        }\r\n        let removed = [];\r\n        this.batchUpdate();\r\n        // see if any items are missing from new layout and need to be removed first\r\n        if (addAndRemove) {\r\n            let copyNodes = [...this.engine.nodes]; // don't loop through array you modify\r\n            copyNodes.forEach(n => {\r\n                let item = items.find(w => n.id === w.id);\r\n                if (!item) {\r\n                    if (typeof (addAndRemove) === 'function') {\r\n                        addAndRemove(this, n, false);\r\n                    }\r\n                    else {\r\n                        removed.push(n); // batch keep track\r\n                        this.removeWidget(n.el, true, false);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        // now add/update the widgets\r\n        items.forEach(w => {\r\n            let item = (w.id || w.id === 0) ? this.engine.nodes.find(n => n.id === w.id) : undefined;\r\n            if (item) {\r\n                this.update(item.el, w);\r\n                if (w.subGrid && w.subGrid.children) { // update any sub grid as well\r\n                    let sub = item.el.querySelector('.grid-stack');\r\n                    if (sub && sub.gridstack) {\r\n                        sub.gridstack.load(w.subGrid.children); // TODO: support updating grid options ?\r\n                        this._insertNotAppend = true; // got reset by above call\r\n                    }\r\n                }\r\n            }\r\n            else if (addAndRemove) {\r\n                if (typeof (addAndRemove) === 'function') {\r\n                    w = addAndRemove(this, w, true).gridstackNode;\r\n                }\r\n                else {\r\n                    w = this.addWidget(w).gridstackNode;\r\n                }\r\n            }\r\n        });\r\n        this.engine.removedNodes = removed;\r\n        this.batchUpdate(false);\r\n        // after commit, clear that flag\r\n        delete this._ignoreLayoutsNodeChange;\r\n        delete this._insertNotAppend;\r\n        return this;\r\n    }\r\n    /**\r\n     * use before calling a bunch of `addWidget()` to prevent un-necessary relayouts in between (more efficient)\r\n     * and get a single event callback. You will see no changes until `batchUpdate(false)` is called.\r\n     */\r\n    batchUpdate(flag = true) {\r\n        this.engine.batchUpdate(flag);\r\n        if (!flag) {\r\n            this._triggerRemoveEvent();\r\n            this._triggerAddEvent();\r\n            this._triggerChangeEvent();\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Gets current cell height.\r\n     */\r\n    getCellHeight(forcePixel = false) {\r\n        if (this.opts.cellHeight && this.opts.cellHeight !== 'auto' &&\r\n            (!forcePixel || !this.opts.cellHeightUnit || this.opts.cellHeightUnit === 'px')) {\r\n            return this.opts.cellHeight;\r\n        }\r\n        // else get first cell height\r\n        let el = this.el.querySelector('.' + this.opts.itemClass);\r\n        if (el) {\r\n            let height = utils_1.Utils.toNumber(el.getAttribute('gs-h'));\r\n            return Math.round(el.offsetHeight / height);\r\n        }\r\n        // else do entire grid and # of rows (but doesn't work if min-height is the actual constrain)\r\n        let rows = parseInt(this.el.getAttribute('gs-current-row'));\r\n        return rows ? Math.round(this.el.getBoundingClientRect().height / rows) : this.opts.cellHeight;\r\n    }\r\n    /**\r\n     * Update current cell height - see `GridStackOptions.cellHeight` for format.\r\n     * This method rebuilds an internal CSS style sheet.\r\n     * Note: You can expect performance issues if call this method too often.\r\n     *\r\n     * @param val the cell height. If not passed (undefined), cells content will be made square (match width minus margin),\r\n     * if pass 0 the CSS will be generated by the application instead.\r\n     * @param update (Optional) if false, styles will not be updated\r\n     *\r\n     * @example\r\n     * grid.cellHeight(100); // same as 100px\r\n     * grid.cellHeight('70px');\r\n     * grid.cellHeight(grid.cellWidth() * 1.2);\r\n     */\r\n    cellHeight(val, update = true) {\r\n        // if not called internally, check if we're changing mode\r\n        if (update && val !== undefined) {\r\n            if (this._isAutoCellHeight !== (val === 'auto')) {\r\n                this._isAutoCellHeight = (val === 'auto');\r\n                this._updateWindowResizeEvent();\r\n            }\r\n        }\r\n        if (val === 'initial' || val === 'auto') {\r\n            val = undefined;\r\n        }\r\n        // make item content be square\r\n        if (val === undefined) {\r\n            let marginDiff = -this.opts.marginRight - this.opts.marginLeft\r\n                + this.opts.marginTop + this.opts.marginBottom;\r\n            val = this.cellWidth() + marginDiff;\r\n        }\r\n        let data = utils_1.Utils.parseHeight(val);\r\n        if (this.opts.cellHeightUnit === data.unit && this.opts.cellHeight === data.h) {\r\n            return this;\r\n        }\r\n        this.opts.cellHeightUnit = data.unit;\r\n        this.opts.cellHeight = data.h;\r\n        if (update) {\r\n            this._updateStyles(true); // true = force re-create for current # of rows\r\n        }\r\n        return this;\r\n    }\r\n    /** Gets current cell width. */\r\n    cellWidth() {\r\n        return this._widthOrContainer() / this.getColumn();\r\n    }\r\n    /** return our expected width (or parent) for 1 column check */\r\n    _widthOrContainer() {\r\n        // use `offsetWidth` or `clientWidth` (no scrollbar) ?\r\n        // https://stackoverflow.com/questions/21064101/understanding-offsetwidth-clientwidth-scrollwidth-and-height-respectively\r\n        return (this.el.clientWidth || this.el.parentElement.clientWidth || window.innerWidth);\r\n    }\r\n    /** re-layout grid items to reclaim any empty space */\r\n    compact() {\r\n        this.engine.compact();\r\n        this._triggerChangeEvent();\r\n        return this;\r\n    }\r\n    /**\r\n     * set the number of columns in the grid. Will update existing widgets to conform to new number of columns,\r\n     * as well as cache the original layout so you can revert back to previous positions without loss.\r\n     * Requires `gridstack-extra.css` or `gridstack-extra.min.css` for [2-11],\r\n     * else you will need to generate correct CSS (see https://github.com/gridstack/gridstack.js#change-grid-columns)\r\n     * @param column - Integer > 0 (default 12).\r\n     * @param layout specify the type of re-layout that will happen (position, size, etc...).\r\n     * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\r\n     */\r\n    column(column, layout = 'moveScale') {\r\n        if (column < 1 || this.opts.column === column)\r\n            return this;\r\n        let oldColumn = this.getColumn();\r\n        // if we go into 1 column mode (which happens if we're sized less than minW unless disableOneColumnMode is on)\r\n        // then remember the original columns so we can restore.\r\n        if (column === 1) {\r\n            this._prevColumn = oldColumn;\r\n        }\r\n        else {\r\n            delete this._prevColumn;\r\n        }\r\n        this.el.classList.remove('grid-stack-' + oldColumn);\r\n        this.el.classList.add('grid-stack-' + column);\r\n        this.opts.column = this.engine.column = column;\r\n        // update the items now - see if the dom order nodes should be passed instead (else default to current list)\r\n        let domNodes;\r\n        if (column === 1 && this.opts.oneColumnModeDomSort) {\r\n            domNodes = [];\r\n            this.getGridItems().forEach(el => {\r\n                if (el.gridstackNode) {\r\n                    domNodes.push(el.gridstackNode);\r\n                }\r\n            });\r\n            if (!domNodes.length) {\r\n                domNodes = undefined;\r\n            }\r\n        }\r\n        this.engine.updateNodeWidths(oldColumn, column, domNodes, layout);\r\n        if (this._isAutoCellHeight)\r\n            this.cellHeight();\r\n        // and trigger our event last...\r\n        this._ignoreLayoutsNodeChange = true; // skip layout update\r\n        this._triggerChangeEvent();\r\n        delete this._ignoreLayoutsNodeChange;\r\n        return this;\r\n    }\r\n    /**\r\n     * get the number of columns in the grid (default 12)\r\n     */\r\n    getColumn() {\r\n        return this.opts.column;\r\n    }\r\n    /** returns an array of grid HTML elements (no placeholder) - used to iterate through our children in DOM order */\r\n    getGridItems() {\r\n        return Array.from(this.el.children)\r\n            .filter((el) => el.matches('.' + this.opts.itemClass) && !el.matches('.' + this.opts.placeholderClass));\r\n    }\r\n    /**\r\n     * Destroys a grid instance. DO NOT CALL any methods or access any vars after this as it will free up members.\r\n     * @param removeDOM if `false` grid and items HTML elements will not be removed from the DOM (Optional. Default `true`).\r\n     */\r\n    destroy(removeDOM = true) {\r\n        if (!this.el)\r\n            return; // prevent multiple calls\r\n        this._updateWindowResizeEvent(true);\r\n        this.setStatic(true, false); // permanently removes DD but don't set CSS class (we're going away)\r\n        this.setAnimation(false);\r\n        if (!removeDOM) {\r\n            this.removeAll(removeDOM);\r\n            this.el.classList.remove(this._styleSheetClass);\r\n        }\r\n        else {\r\n            this.el.parentNode.removeChild(this.el);\r\n        }\r\n        this._removeStylesheet();\r\n        this.el.removeAttribute('gs-current-row');\r\n        delete this.parentGridItem;\r\n        delete this.opts;\r\n        delete this._placeholder;\r\n        delete this.engine;\r\n        delete this.el.gridstack; // remove circular dependency that would prevent a freeing\r\n        delete this.el;\r\n        return this;\r\n    }\r\n    /**\r\n     * enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html)\r\n     */\r\n    float(val) {\r\n        if (this.opts.float !== val) {\r\n            this.opts.float = this.engine.float = val;\r\n            this._triggerChangeEvent();\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * get the current float mode\r\n     */\r\n    getFloat() {\r\n        return this.engine.float;\r\n    }\r\n    /**\r\n     * Get the position of the cell under a pixel on screen.\r\n     * @param position the position of the pixel to resolve in\r\n     * absolute coordinates, as an object with top and left properties\r\n     * @param useDocRelative if true, value will be based on document position vs parent position (Optional. Default false).\r\n     * Useful when grid is within `position: relative` element\r\n     *\r\n     * Returns an object with properties `x` and `y` i.e. the column and row in the grid.\r\n     */\r\n    getCellFromPixel(position, useDocRelative = false) {\r\n        let box = this.el.getBoundingClientRect();\r\n        // console.log(`getBoundingClientRect left: ${box.left} top: ${box.top} w: ${box.w} h: ${box.h}`)\r\n        let containerPos;\r\n        if (useDocRelative) {\r\n            containerPos = { top: box.top + document.documentElement.scrollTop, left: box.left };\r\n            // console.log(`getCellFromPixel scrollTop: ${document.documentElement.scrollTop}`)\r\n        }\r\n        else {\r\n            containerPos = { top: this.el.offsetTop, left: this.el.offsetLeft };\r\n            // console.log(`getCellFromPixel offsetTop: ${containerPos.left} offsetLeft: ${containerPos.top}`)\r\n        }\r\n        let relativeLeft = position.left - containerPos.left;\r\n        let relativeTop = position.top - containerPos.top;\r\n        let columnWidth = (box.width / this.getColumn());\r\n        let rowHeight = (box.height / parseInt(this.el.getAttribute('gs-current-row')));\r\n        return { x: Math.floor(relativeLeft / columnWidth), y: Math.floor(relativeTop / rowHeight) };\r\n    }\r\n    /** returns the current number of rows, which will be at least `minRow` if set */\r\n    getRow() {\r\n        return Math.max(this.engine.getRow(), this.opts.minRow);\r\n    }\r\n    /**\r\n     * Checks if specified area is empty.\r\n     * @param x the position x.\r\n     * @param y the position y.\r\n     * @param w the width of to check\r\n     * @param h the height of to check\r\n     */\r\n    isAreaEmpty(x, y, w, h) {\r\n        return this.engine.isAreaEmpty(x, y, w, h);\r\n    }\r\n    /**\r\n     * If you add elements to your grid by hand, you have to tell gridstack afterwards to make them widgets.\r\n     * If you want gridstack to add the elements for you, use `addWidget()` instead.\r\n     * Makes the given element a widget and returns it.\r\n     * @param els widget or single selector to convert.\r\n     *\r\n     * @example\r\n     * let grid = GridStack.init();\r\n     * grid.el.appendChild('<div id=\"gsi-1\" gs-w=\"3\"></div>');\r\n     * grid.makeWidget('#gsi-1');\r\n     */\r\n    makeWidget(els) {\r\n        let el = GridStack.getElement(els);\r\n        this._prepareElement(el, true);\r\n        this._updateContainerHeight();\r\n        this._triggerAddEvent();\r\n        this._triggerChangeEvent();\r\n        return el;\r\n    }\r\n    /**\r\n     * Event handler that extracts our CustomEvent data out automatically for receiving custom\r\n     * notifications (see doc for supported events)\r\n     * @param name of the event (see possible values) or list of names space separated\r\n     * @param callback function called with event and optional second/third param\r\n     * (see README documentation for each signature).\r\n     *\r\n     * @example\r\n     * grid.on('added', function(e, items) { log('added ', items)} );\r\n     * or\r\n     * grid.on('added removed change', function(e, items) { log(e.type, items)} );\r\n     *\r\n     * Note: in some cases it is the same as calling native handler and parsing the event.\r\n     * grid.el.addEventListener('added', function(event) { log('added ', event.detail)} );\r\n     *\r\n     */\r\n    on(name, callback) {\r\n        // check for array of names being passed instead\r\n        if (name.indexOf(' ') !== -1) {\r\n            let names = name.split(' ');\r\n            names.forEach(name => this.on(name, callback));\r\n            return this;\r\n        }\r\n        if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n            // native CustomEvent handlers - cash the generic handlers so we can easily remove\r\n            let noData = (name === 'enable' || name === 'disable');\r\n            if (noData) {\r\n                this._gsEventHandler[name] = (event) => callback(event);\r\n            }\r\n            else {\r\n                this._gsEventHandler[name] = (event) => callback(event, event.detail);\r\n            }\r\n            this.el.addEventListener(name, this._gsEventHandler[name]);\r\n        }\r\n        else if (name === 'drag' || name === 'dragstart' || name === 'dragstop' || name === 'resizestart' || name === 'resize' || name === 'resizestop' || name === 'dropped') {\r\n            // drag&drop stop events NEED to be call them AFTER we update node attributes so handle them ourself.\r\n            // do same for start event to make it easier...\r\n            this._gsEventHandler[name] = callback;\r\n        }\r\n        else {\r\n            console.log('GridStack.on(' + name + ') event not supported, but you can still use $(\".grid-stack\").on(...) while jquery-ui is still used internally.');\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * unsubscribe from the 'on' event below\r\n     * @param name of the event (see possible values)\r\n     */\r\n    off(name) {\r\n        // check for array of names being passed instead\r\n        if (name.indexOf(' ') !== -1) {\r\n            let names = name.split(' ');\r\n            names.forEach(name => this.off(name));\r\n            return this;\r\n        }\r\n        if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n            // remove native CustomEvent handlers\r\n            if (this._gsEventHandler[name]) {\r\n                this.el.removeEventListener(name, this._gsEventHandler[name]);\r\n            }\r\n        }\r\n        delete this._gsEventHandler[name];\r\n        return this;\r\n    }\r\n    /**\r\n     * Removes widget from the grid.\r\n     * @param el  widget or selector to modify\r\n     * @param removeDOM if `false` DOM element won't be removed from the tree (Default? true).\r\n     * @param triggerEvent if `false` (quiet mode) element will not be added to removed list and no 'removed' callbacks will be called (Default? true).\r\n     */\r\n    removeWidget(els, removeDOM = true, triggerEvent = true) {\r\n        GridStack.getElements(els).forEach(el => {\r\n            if (el.parentElement && el.parentElement !== this.el)\r\n                return; // not our child!\r\n            let node = el.gridstackNode;\r\n            // For Meteor support: https://github.com/gridstack/gridstack.js/pull/272\r\n            if (!node) {\r\n                node = this.engine.nodes.find(n => el === n.el);\r\n            }\r\n            if (!node)\r\n                return;\r\n            // remove our DOM data (circular link) and drag&drop permanently\r\n            delete el.gridstackNode;\r\n            this._removeDD(el);\r\n            this.engine.removeNode(node, removeDOM, triggerEvent);\r\n            if (removeDOM && el.parentElement) {\r\n                el.remove(); // in batch mode engine.removeNode doesn't call back to remove DOM\r\n            }\r\n        });\r\n        if (triggerEvent) {\r\n            this._triggerRemoveEvent();\r\n            this._triggerChangeEvent();\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Removes all widgets from the grid.\r\n     * @param removeDOM if `false` DOM elements won't be removed from the tree (Default? `true`).\r\n     */\r\n    removeAll(removeDOM = true) {\r\n        // always remove our DOM data (circular link) before list gets emptied and drag&drop permanently\r\n        this.engine.nodes.forEach(n => {\r\n            delete n.el.gridstackNode;\r\n            this._removeDD(n.el);\r\n        });\r\n        this.engine.removeAll(removeDOM);\r\n        this._triggerRemoveEvent();\r\n        return this;\r\n    }\r\n    /**\r\n     * Toggle the grid animation state.  Toggles the `grid-stack-animate` class.\r\n     * @param doAnimate if true the grid will animate.\r\n     */\r\n    setAnimation(doAnimate) {\r\n        if (doAnimate) {\r\n            this.el.classList.add('grid-stack-animate');\r\n        }\r\n        else {\r\n            this.el.classList.remove('grid-stack-animate');\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Toggle the grid static state, which permanently removes/add Drag&Drop support, unlike disable()/enable() that just turns it off/on.\r\n     * Also toggle the grid-stack-static class.\r\n     * @param val if true the grid become static.\r\n     */\r\n    setStatic(val, updateClass = true) {\r\n        if (this.opts.staticGrid === val)\r\n            return this;\r\n        this.opts.staticGrid = val;\r\n        this._setupRemoveDrop();\r\n        this._setupAcceptWidget();\r\n        this.engine.nodes.forEach(n => this._prepareDragDropByNode(n)); // either delete or init Drag&drop\r\n        if (updateClass) {\r\n            this._setStaticClass();\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Updates widget position/size and other info. Note: if you need to call this on all nodes, use load() instead which will update what changed.\r\n     * @param els  widget or selector of objects to modify (note: setting the same x,y for multiple items will be indeterministic and likely unwanted)\r\n     * @param opt new widget options (x,y,w,h, etc..). Only those set will be updated.\r\n     */\r\n    update(els, opt) {\r\n        // support legacy call for now ?\r\n        if (arguments.length > 2) {\r\n            console.warn('gridstack.ts: `update(el, x, y, w, h)` is deprecated. Use `update(el, {x, w, content, ...})`. It will be removed soon');\r\n            // eslint-disable-next-line prefer-rest-params\r\n            let a = arguments, i = 1;\r\n            opt = { x: a[i++], y: a[i++], w: a[i++], h: a[i++] };\r\n            return this.update(els, opt);\r\n        }\r\n        GridStack.getElements(els).forEach(el => {\r\n            if (!el || !el.gridstackNode)\r\n                return;\r\n            let n = el.gridstackNode;\r\n            let w = utils_1.Utils.cloneDeep(opt); // make a copy we can modify in case they re-use it or multiple items\r\n            delete w.autoPosition;\r\n            // move/resize widget if anything changed\r\n            let keys = ['x', 'y', 'w', 'h'];\r\n            let m;\r\n            if (keys.some(k => w[k] !== undefined && w[k] !== n[k])) {\r\n                m = {};\r\n                keys.forEach(k => {\r\n                    m[k] = (w[k] !== undefined) ? w[k] : n[k];\r\n                    delete w[k];\r\n                });\r\n            }\r\n            // for a move as well IFF there is any min/max fields set\r\n            if (!m && (w.minW || w.minH || w.maxW || w.maxH)) {\r\n                m = {}; // will use node position but validate values\r\n            }\r\n            // check for content changing\r\n            if (w.content) {\r\n                let sub = el.querySelector('.grid-stack-item-content');\r\n                if (sub && sub.innerHTML !== w.content) {\r\n                    sub.innerHTML = w.content;\r\n                }\r\n                delete w.content;\r\n            }\r\n            // any remaining fields are assigned, but check for dragging changes, resize constrain\r\n            let changed = false;\r\n            let ddChanged = false;\r\n            for (const key in w) {\r\n                if (key[0] !== '_' && n[key] !== w[key]) {\r\n                    n[key] = w[key];\r\n                    changed = true;\r\n                    ddChanged = ddChanged || (!this.opts.staticGrid && (key === 'noResize' || key === 'noMove' || key === 'locked'));\r\n                }\r\n            }\r\n            // finally move the widget\r\n            if (m) {\r\n                this.engine.cleanNodes()\r\n                    .beginUpdate(n)\r\n                    .moveNode(n, m);\r\n                this._updateContainerHeight();\r\n                this._triggerChangeEvent();\r\n                this.engine.endUpdate();\r\n            }\r\n            if (changed) { // move will only update x,y,w,h so update the rest too\r\n                this._writeAttr(el, n);\r\n            }\r\n            if (ddChanged) {\r\n                this._prepareDragDropByNode(n);\r\n            }\r\n        });\r\n        return this;\r\n    }\r\n    /**\r\n     * Updates the margins which will set all 4 sides at once - see `GridStackOptions.margin` for format options (CSS string format of 1,2,4 values or single number).\r\n     * @param value margin value\r\n     */\r\n    margin(value) {\r\n        let isMultiValue = (typeof value === 'string' && value.split(' ').length > 1);\r\n        // check if we can skip re-creating our CSS file... won't check if multi values (too much hassle)\r\n        if (!isMultiValue) {\r\n            let data = utils_1.Utils.parseHeight(value);\r\n            if (this.opts.marginUnit === data.unit && this.opts.margin === data.h)\r\n                return;\r\n        }\r\n        // re-use existing margin handling\r\n        this.opts.margin = value;\r\n        this.opts.marginTop = this.opts.marginBottom = this.opts.marginLeft = this.opts.marginRight = undefined;\r\n        this._initMargin();\r\n        this._updateStyles(true); // true = force re-create\r\n        return this;\r\n    }\r\n    /** returns current margin number value (undefined if 4 sides don't match) */\r\n    getMargin() { return this.opts.margin; }\r\n    /**\r\n     * Returns true if the height of the grid will be less than the vertical\r\n     * constraint. Always returns true if grid doesn't have height constraint.\r\n     * @param node contains x,y,w,h,auto-position options\r\n     *\r\n     * @example\r\n     * if (grid.willItFit(newWidget)) {\r\n     *   grid.addWidget(newWidget);\r\n     * } else {\r\n     *   alert('Not enough free space to place the widget');\r\n     * }\r\n     */\r\n    willItFit(node) {\r\n        // support legacy call for now\r\n        if (arguments.length > 1) {\r\n            console.warn('gridstack.ts: `willItFit(x,y,w,h,autoPosition)` is deprecated. Use `willItFit({x, y,...})`. It will be removed soon');\r\n            // eslint-disable-next-line prefer-rest-params\r\n            let a = arguments, i = 0, w = { x: a[i++], y: a[i++], w: a[i++], h: a[i++], autoPosition: a[i++] };\r\n            return this.willItFit(w);\r\n        }\r\n        return this.engine.willItFit(node);\r\n    }\r\n    /** @internal */\r\n    _triggerChangeEvent() {\r\n        if (this.engine.batchMode)\r\n            return this;\r\n        let elements = this.engine.getDirtyNodes(true); // verify they really changed\r\n        if (elements && elements.length) {\r\n            if (!this._ignoreLayoutsNodeChange) {\r\n                this.engine.layoutsNodesChange(elements);\r\n            }\r\n            this._triggerEvent('change', elements);\r\n        }\r\n        this.engine.saveInitial(); // we called, now reset initial values & dirty flags\r\n        return this;\r\n    }\r\n    /** @internal */\r\n    _triggerAddEvent() {\r\n        if (this.engine.batchMode)\r\n            return this;\r\n        if (this.engine.addedNodes && this.engine.addedNodes.length > 0) {\r\n            if (!this._ignoreLayoutsNodeChange) {\r\n                this.engine.layoutsNodesChange(this.engine.addedNodes);\r\n            }\r\n            // prevent added nodes from also triggering 'change' event (which is called next)\r\n            this.engine.addedNodes.forEach(n => { delete n._dirty; });\r\n            this._triggerEvent('added', this.engine.addedNodes);\r\n            this.engine.addedNodes = [];\r\n        }\r\n        return this;\r\n    }\r\n    /** @internal */\r\n    _triggerRemoveEvent() {\r\n        if (this.engine.batchMode)\r\n            return this;\r\n        if (this.engine.removedNodes && this.engine.removedNodes.length > 0) {\r\n            this._triggerEvent('removed', this.engine.removedNodes);\r\n            this.engine.removedNodes = [];\r\n        }\r\n        return this;\r\n    }\r\n    /** @internal */\r\n    _triggerEvent(type, data) {\r\n        let event = data ? new CustomEvent(type, { bubbles: false, detail: data }) : new Event(type);\r\n        this.el.dispatchEvent(event);\r\n        return this;\r\n    }\r\n    /** @internal called to delete the current dynamic style sheet used for our layout */\r\n    _removeStylesheet() {\r\n        if (this._styles) {\r\n            utils_1.Utils.removeStylesheet(this._styleSheetClass);\r\n            delete this._styles;\r\n        }\r\n        return this;\r\n    }\r\n    /** @internal updated/create the CSS styles for row based layout and initial margin setting */\r\n    _updateStyles(forceUpdate = false, maxH) {\r\n        // call to delete existing one if we change cellHeight / margin\r\n        if (forceUpdate) {\r\n            this._removeStylesheet();\r\n        }\r\n        if (!maxH)\r\n            maxH = this.getRow();\r\n        this._updateContainerHeight();\r\n        // if user is telling us they will handle the CSS themselves by setting heights to 0. Do we need this opts really ??\r\n        if (this.opts.cellHeight === 0) {\r\n            return this;\r\n        }\r\n        let cellHeight = this.opts.cellHeight;\r\n        let cellHeightUnit = this.opts.cellHeightUnit;\r\n        let prefix = `.${this._styleSheetClass} > .${this.opts.itemClass}`;\r\n        // create one as needed\r\n        if (!this._styles) {\r\n            // insert style to parent (instead of 'head' by default) to support WebComponent\r\n            let styleLocation = this.opts.styleInHead ? undefined : this.el.parentNode;\r\n            this._styles = utils_1.Utils.createStylesheet(this._styleSheetClass, styleLocation);\r\n            if (!this._styles)\r\n                return this;\r\n            this._styles._max = 0;\r\n            // these are done once only\r\n            utils_1.Utils.addCSSRule(this._styles, prefix, `min-height: ${cellHeight}${cellHeightUnit}`);\r\n            // content margins\r\n            let top = this.opts.marginTop + this.opts.marginUnit;\r\n            let bottom = this.opts.marginBottom + this.opts.marginUnit;\r\n            let right = this.opts.marginRight + this.opts.marginUnit;\r\n            let left = this.opts.marginLeft + this.opts.marginUnit;\r\n            let content = `${prefix} > .grid-stack-item-content`;\r\n            let placeholder = `.${this._styleSheetClass} > .grid-stack-placeholder > .placeholder-content`;\r\n            utils_1.Utils.addCSSRule(this._styles, content, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n            utils_1.Utils.addCSSRule(this._styles, placeholder, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n            // resize handles offset (to match margin)\r\n            utils_1.Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-ne`, `right: ${right}`);\r\n            utils_1.Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-e`, `right: ${right}`);\r\n            utils_1.Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-se`, `right: ${right}; bottom: ${bottom}`);\r\n            utils_1.Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-nw`, `left: ${left}`);\r\n            utils_1.Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-w`, `left: ${left}`);\r\n            utils_1.Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-sw`, `left: ${left}; bottom: ${bottom}`);\r\n        }\r\n        // now update the height specific fields\r\n        maxH = maxH || this._styles._max;\r\n        if (maxH > this._styles._max) {\r\n            let getHeight = (rows) => (cellHeight * rows) + cellHeightUnit;\r\n            for (let i = this._styles._max + 1; i <= maxH; i++) { // start at 1\r\n                let h = getHeight(i);\r\n                utils_1.Utils.addCSSRule(this._styles, `${prefix}[gs-y=\"${i - 1}\"]`, `top: ${getHeight(i - 1)}`); // start at 0\r\n                utils_1.Utils.addCSSRule(this._styles, `${prefix}[gs-h=\"${i}\"]`, `height: ${h}`);\r\n                utils_1.Utils.addCSSRule(this._styles, `${prefix}[gs-min-h=\"${i}\"]`, `min-height: ${h}`);\r\n                utils_1.Utils.addCSSRule(this._styles, `${prefix}[gs-max-h=\"${i}\"]`, `max-height: ${h}`);\r\n            }\r\n            this._styles._max = maxH;\r\n        }\r\n        return this;\r\n    }\r\n    /** @internal */\r\n    _updateContainerHeight() {\r\n        if (!this.engine || this.engine.batchMode)\r\n            return this;\r\n        let row = this.getRow() + this._extraDragRow; // checks for minRow already\r\n        // check for css min height\r\n        // Note: we don't handle %,rem correctly so comment out, beside we don't need need to create un-necessary\r\n        // rows as the CSS will make us bigger than our set height if needed... not sure why we had this.\r\n        // let cssMinHeight = parseInt(getComputedStyle(this.el)['min-height']);\r\n        // if (cssMinHeight > 0) {\r\n        //   let minRow = Math.round(cssMinHeight / this.getCellHeight(true));\r\n        //   if (row < minRow) {\r\n        //     row = minRow;\r\n        //   }\r\n        // }\r\n        this.el.setAttribute('gs-current-row', String(row));\r\n        if (row === 0) {\r\n            this.el.style.removeProperty('min-height');\r\n            return this;\r\n        }\r\n        let cellHeight = this.opts.cellHeight;\r\n        let unit = this.opts.cellHeightUnit;\r\n        if (!cellHeight)\r\n            return this;\r\n        this.el.style.minHeight = row * cellHeight + unit;\r\n        return this;\r\n    }\r\n    /** @internal */\r\n    _prepareElement(el, triggerAddEvent = false, node) {\r\n        if (!node) {\r\n            el.classList.add(this.opts.itemClass);\r\n            node = this._readAttr(el);\r\n        }\r\n        el.gridstackNode = node;\r\n        node.el = el;\r\n        node.grid = this;\r\n        let copy = Object.assign({}, node);\r\n        node = this.engine.addNode(node, triggerAddEvent);\r\n        // write node attr back in case there was collision or we have to fix bad values during addNode()\r\n        if (!utils_1.Utils.same(node, copy)) {\r\n            this._writeAttr(el, node);\r\n        }\r\n        this._prepareDragDropByNode(node);\r\n        return this;\r\n    }\r\n    /** @internal call to write position x,y,w,h attributes back to element */\r\n    _writePosAttr(el, n) {\r\n        if (n.x !== undefined && n.x !== null) {\r\n            el.setAttribute('gs-x', String(n.x));\r\n        }\r\n        if (n.y !== undefined && n.y !== null) {\r\n            el.setAttribute('gs-y', String(n.y));\r\n        }\r\n        if (n.w) {\r\n            el.setAttribute('gs-w', String(n.w));\r\n        }\r\n        if (n.h) {\r\n            el.setAttribute('gs-h', String(n.h));\r\n        }\r\n        return this;\r\n    }\r\n    /** @internal call to write any default attributes back to element */\r\n    _writeAttr(el, node) {\r\n        if (!node)\r\n            return this;\r\n        this._writePosAttr(el, node);\r\n        let attrs /*: GridStackWidget but strings */ = {\r\n            autoPosition: 'gs-auto-position',\r\n            minW: 'gs-min-w',\r\n            minH: 'gs-min-h',\r\n            maxW: 'gs-max-w',\r\n            maxH: 'gs-max-h',\r\n            noResize: 'gs-no-resize',\r\n            noMove: 'gs-no-move',\r\n            locked: 'gs-locked',\r\n            id: 'gs-id',\r\n            resizeHandles: 'gs-resize-handles'\r\n        };\r\n        for (const key in attrs) {\r\n            if (node[key]) { // 0 is valid for x,y only but done above already and not in list anyway\r\n                el.setAttribute(attrs[key], String(node[key]));\r\n            }\r\n            else {\r\n                el.removeAttribute(attrs[key]);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    /** @internal call to read any default attributes from element */\r\n    _readAttr(el) {\r\n        let node = {};\r\n        node.x = utils_1.Utils.toNumber(el.getAttribute('gs-x'));\r\n        node.y = utils_1.Utils.toNumber(el.getAttribute('gs-y'));\r\n        node.w = utils_1.Utils.toNumber(el.getAttribute('gs-w'));\r\n        node.h = utils_1.Utils.toNumber(el.getAttribute('gs-h'));\r\n        node.maxW = utils_1.Utils.toNumber(el.getAttribute('gs-max-w'));\r\n        node.minW = utils_1.Utils.toNumber(el.getAttribute('gs-min-w'));\r\n        node.maxH = utils_1.Utils.toNumber(el.getAttribute('gs-max-h'));\r\n        node.minH = utils_1.Utils.toNumber(el.getAttribute('gs-min-h'));\r\n        node.autoPosition = utils_1.Utils.toBool(el.getAttribute('gs-auto-position'));\r\n        node.noResize = utils_1.Utils.toBool(el.getAttribute('gs-no-resize'));\r\n        node.noMove = utils_1.Utils.toBool(el.getAttribute('gs-no-move'));\r\n        node.locked = utils_1.Utils.toBool(el.getAttribute('gs-locked'));\r\n        node.resizeHandles = el.getAttribute('gs-resize-handles');\r\n        node.id = el.getAttribute('gs-id');\r\n        // remove any key not found (null or false which is default)\r\n        for (const key in node) {\r\n            if (!node.hasOwnProperty(key))\r\n                return;\r\n            if (!node[key] && node[key] !== 0) { // 0 can be valid value (x,y only really)\r\n                delete node[key];\r\n            }\r\n        }\r\n        return node;\r\n    }\r\n    /** @internal */\r\n    _setStaticClass() {\r\n        let classes = ['grid-stack-static'];\r\n        if (this.opts.staticGrid) {\r\n            this.el.classList.add(...classes);\r\n            this.el.setAttribute('gs-static', 'true');\r\n        }\r\n        else {\r\n            this.el.classList.remove(...classes);\r\n            this.el.removeAttribute('gs-static');\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * called when we are being resized by the window - check if the one Column Mode needs to be turned on/off\r\n     * and remember the prev columns we used, or get our count from parent, as well as check for auto cell height (square)\r\n     */\r\n    onParentResize() {\r\n        if (!this.el || !this.el.clientWidth)\r\n            return; // return if we're gone or no size yet (will get called again)\r\n        let changedColumn = false;\r\n        // see if we're nested and take our column count from our parent....\r\n        if (this._autoColumn && this.parentGridItem) {\r\n            if (this.opts.column !== this.parentGridItem.w) {\r\n                changedColumn = true;\r\n                this.column(this.parentGridItem.w, 'none');\r\n            }\r\n        }\r\n        else {\r\n            // else check for 1 column in/out behavior\r\n            let oneColumn = !this.opts.disableOneColumnMode && this.el.clientWidth <= this.opts.oneColumnSize;\r\n            if ((this.opts.column === 1) !== oneColumn) {\r\n                changedColumn = true;\r\n                if (this.opts.animate) {\r\n                    this.setAnimation(false);\r\n                } // 1 <-> 12 is too radical, turn off animation\r\n                this.column(oneColumn ? 1 : this._prevColumn);\r\n                if (this.opts.animate) {\r\n                    this.setAnimation(true);\r\n                }\r\n            }\r\n        }\r\n        // make the cells content square again\r\n        if (this._isAutoCellHeight) {\r\n            if (!changedColumn && this.opts.cellHeightThrottle) {\r\n                if (!this._cellHeightThrottle) {\r\n                    this._cellHeightThrottle = utils_1.Utils.throttle(() => this.cellHeight(), this.opts.cellHeightThrottle);\r\n                }\r\n                this._cellHeightThrottle();\r\n            }\r\n            else {\r\n                // immediate update if we've changed column count or have no threshold\r\n                this.cellHeight();\r\n            }\r\n        }\r\n        // finally update any nested grids\r\n        this.engine.nodes.forEach(n => {\r\n            if (n.subGrid) {\r\n                n.subGrid.onParentResize();\r\n            }\r\n        });\r\n        return this;\r\n    }\r\n    /** add or remove the window size event handler */\r\n    _updateWindowResizeEvent(forceRemove = false) {\r\n        // only add event if we're not nested (parent will call us) and we're auto sizing cells or supporting oneColumn (i.e. doing work)\r\n        const workTodo = (this._isAutoCellHeight || !this.opts.disableOneColumnMode) && !this.parentGridItem;\r\n        if (!forceRemove && workTodo && !this._windowResizeBind) {\r\n            this._windowResizeBind = this.onParentResize.bind(this); // so we can properly remove later\r\n            window.addEventListener('resize', this._windowResizeBind);\r\n        }\r\n        else if ((forceRemove || !workTodo) && this._windowResizeBind) {\r\n            window.removeEventListener('resize', this._windowResizeBind);\r\n            delete this._windowResizeBind; // remove link to us so we can free\r\n        }\r\n        return this;\r\n    }\r\n    /** @internal convert a potential selector into actual element */\r\n    static getElement(els = '.grid-stack-item') { return utils_1.Utils.getElement(els); }\r\n    /** @internal */\r\n    static getElements(els = '.grid-stack-item') { return utils_1.Utils.getElements(els); }\r\n    /** @internal */\r\n    static getGridElement(els) { return GridStack.getElement(els); }\r\n    /** @internal */\r\n    static getGridElements(els) { return utils_1.Utils.getElements(els); }\r\n    /** @internal initialize margin top/bottom/left/right and units */\r\n    _initMargin() {\r\n        let data;\r\n        let margin = 0;\r\n        // support passing multiple values like CSS (ex: '5px 10px 0 20px')\r\n        let margins = [];\r\n        if (typeof this.opts.margin === 'string') {\r\n            margins = this.opts.margin.split(' ');\r\n        }\r\n        if (margins.length === 2) { // top/bot, left/right like CSS\r\n            this.opts.marginTop = this.opts.marginBottom = margins[0];\r\n            this.opts.marginLeft = this.opts.marginRight = margins[1];\r\n        }\r\n        else if (margins.length === 4) { // Clockwise like CSS\r\n            this.opts.marginTop = margins[0];\r\n            this.opts.marginRight = margins[1];\r\n            this.opts.marginBottom = margins[2];\r\n            this.opts.marginLeft = margins[3];\r\n        }\r\n        else {\r\n            data = utils_1.Utils.parseHeight(this.opts.margin);\r\n            this.opts.marginUnit = data.unit;\r\n            margin = this.opts.margin = data.h;\r\n        }\r\n        // see if top/bottom/left/right need to be set as well\r\n        if (this.opts.marginTop === undefined) {\r\n            this.opts.marginTop = margin;\r\n        }\r\n        else {\r\n            data = utils_1.Utils.parseHeight(this.opts.marginTop);\r\n            this.opts.marginTop = data.h;\r\n            delete this.opts.margin;\r\n        }\r\n        if (this.opts.marginBottom === undefined) {\r\n            this.opts.marginBottom = margin;\r\n        }\r\n        else {\r\n            data = utils_1.Utils.parseHeight(this.opts.marginBottom);\r\n            this.opts.marginBottom = data.h;\r\n            delete this.opts.margin;\r\n        }\r\n        if (this.opts.marginRight === undefined) {\r\n            this.opts.marginRight = margin;\r\n        }\r\n        else {\r\n            data = utils_1.Utils.parseHeight(this.opts.marginRight);\r\n            this.opts.marginRight = data.h;\r\n            delete this.opts.margin;\r\n        }\r\n        if (this.opts.marginLeft === undefined) {\r\n            this.opts.marginLeft = margin;\r\n        }\r\n        else {\r\n            data = utils_1.Utils.parseHeight(this.opts.marginLeft);\r\n            this.opts.marginLeft = data.h;\r\n            delete this.opts.margin;\r\n        }\r\n        this.opts.marginUnit = data.unit; // in case side were spelled out, use those units instead...\r\n        if (this.opts.marginTop === this.opts.marginBottom && this.opts.marginLeft === this.opts.marginRight && this.opts.marginTop === this.opts.marginRight) {\r\n            this.opts.margin = this.opts.marginTop; // makes it easier to check for no-ops in setMargin()\r\n        }\r\n        return this;\r\n    }\r\n    /*\r\n     * drag&drop empty stubs that will be implemented in dd-gridstack.ts for non static grid\r\n     * so we don't incur the load unless needed.\r\n     * NOTE: had to make those methods public in order to define them else as\r\n     *   GridStack.prototype._setupAcceptWidget = function()\r\n     * maybe there is a better way ????\r\n     */\r\n    /* eslint-disable @typescript-eslint/no-unused-vars */\r\n    /**\r\n     * call to setup dragging in from the outside (say toolbar), by specifying the class selection and options.\r\n     * Called during GridStack.init() as options, but can also be called directly (last param are used) in case the toolbar\r\n     * is dynamically create and needs to be set later.\r\n     * @param dragIn string selector (ex: '.sidebar .grid-stack-item')\r\n     * @param dragInOptions options - see DDDragInOpt. (default: {handle: '.grid-stack-item-content', appendTo: 'body'}\r\n     **/\r\n    static setupDragIn(dragIn, dragInOptions) { }\r\n    /**\r\n     * Enables/Disables dragging by the user of specific grid element. If you want all items, and have it affect future items, use enableMove() instead. No-op for static grids.\r\n     * IF you are looking to prevent an item from moving (due to being pushed around by another during collision) use locked property instead.\r\n     * @param els widget or selector to modify.\r\n     * @param val if true widget will be draggable.\r\n     */\r\n    movable(els, val) { return this; }\r\n    /**\r\n     * Enables/Disables user resizing of specific grid element. If you want all items, and have it affect future items, use enableResize() instead. No-op for static grids.\r\n     * @param els  widget or selector to modify\r\n     * @param val  if true widget will be resizable.\r\n     */\r\n    resizable(els, val) { return this; }\r\n    /**\r\n     * Temporarily disables widgets moving/resizing.\r\n     * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.\r\n     * Note: no-op for static grid\r\n     * This is a shortcut for:\r\n     * @example\r\n     *  grid.enableMove(false);\r\n     *  grid.enableResize(false);\r\n     */\r\n    disable() { return this; }\r\n    /**\r\n     * Re-enables widgets moving/resizing - see disable().\r\n     * Note: no-op for static grid.\r\n     * This is a shortcut for:\r\n     * @example\r\n     *  grid.enableMove(true);\r\n     *  grid.enableResize(true);\r\n     */\r\n    enable() { return this; }\r\n    /**\r\n     * Enables/disables widget moving. No-op for static grids.\r\n     */\r\n    enableMove(doEnable) { return this; }\r\n    /**\r\n     * Enables/disables widget resizing. No-op for static grids.\r\n     */\r\n    enableResize(doEnable) { return this; }\r\n    /** @internal removes any drag&drop present (called during destroy) */\r\n    _removeDD(el) { return this; }\r\n    /** @internal called to add drag over support to support widgets */\r\n    _setupAcceptWidget() { return this; }\r\n    /** @internal called to setup a trash drop zone if the user specifies it */\r\n    _setupRemoveDrop() { return this; }\r\n    /** @internal prepares the element for drag&drop **/\r\n    _prepareDragDropByNode(node) { return this; }\r\n    /** @internal handles actual drag/resize start **/\r\n    _onStartMoving(el, event, ui, node, cellWidth, cellHeight) { return; }\r\n    /** @internal handles actual drag/resize **/\r\n    _dragOrResize(el, event, ui, node, cellWidth, cellHeight) { return; }\r\n    /** @internal called when a node leaves our area (mouse out or shape outside) **/\r\n    _leave(el, helper) { return; }\r\n    // legacy method removed\r\n    commit() { utils_1.obsolete(this, this.batchUpdate(false), 'commit', 'batchUpdate', '5.2'); return this; }\r\n}\r\nexports.GridStack = GridStack;\r\n/** scoping so users can call GridStack.Utils.sort() for example */\r\nGridStack.Utils = utils_1.Utils;\r\n/** scoping so users can call new GridStack.Engine(12) for example */\r\nGridStack.Engine = gridstack_engine_1.GridStackEngine;\r\nGridStack.GDRev = '7.1.0';\r\nconst dd_touch_1 = require(\"./dd-touch\");\r\nconst dd_manager_1 = require(\"./dd-manager\");\r\n__exportStar(require(\"./dd-gridstack\"), exports);\r\n//# sourceMappingURL=gridstack.js.map","\"use strict\";\r\n/**\r\n * dd-gridstack.ts 7.1.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DDGridStack = void 0;\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nconst types_1 = require(\"./types\");\r\nconst gridstack_1 = require(\"./gridstack\");\r\nconst utils_1 = require(\"./utils\");\r\nconst dd_manager_1 = require(\"./dd-manager\");\r\nconst dd_element_1 = require(\"./dd-element\");\r\n// let count = 0; // TEST\r\n/**\r\n * HTML Native Mouse and Touch Events Drag and Drop functionality.\r\n */\r\nclass DDGridStack {\r\n    /** get the global (but static to this code) DD implementation */\r\n    static get() {\r\n        return dd;\r\n    }\r\n    resizable(el, opts, key, value) {\r\n        this._getDDElements(el).forEach(dEl => {\r\n            if (opts === 'disable' || opts === 'enable') {\r\n                dEl.ddResizable && dEl.ddResizable[opts](); // can't create DD as it requires options for setupResizable()\r\n            }\r\n            else if (opts === 'destroy') {\r\n                dEl.ddResizable && dEl.cleanResizable();\r\n            }\r\n            else if (opts === 'option') {\r\n                dEl.setupResizable({ [key]: value });\r\n            }\r\n            else {\r\n                const grid = dEl.el.gridstackNode.grid;\r\n                let handles = dEl.el.getAttribute('gs-resize-handles') ? dEl.el.getAttribute('gs-resize-handles') : grid.opts.resizable.handles;\r\n                let autoHide = !grid.opts.alwaysShowResizeHandle;\r\n                dEl.setupResizable(Object.assign(Object.assign(Object.assign({}, grid.opts.resizable), { handles, autoHide }), {\r\n                    start: opts.start,\r\n                    stop: opts.stop,\r\n                    resize: opts.resize\r\n                }));\r\n            }\r\n        });\r\n        return this;\r\n    }\r\n    draggable(el, opts, key, value) {\r\n        this._getDDElements(el).forEach(dEl => {\r\n            if (opts === 'disable' || opts === 'enable') {\r\n                dEl.ddDraggable && dEl.ddDraggable[opts](); // can't create DD as it requires options for setupDraggable()\r\n            }\r\n            else if (opts === 'destroy') {\r\n                dEl.ddDraggable && dEl.cleanDraggable();\r\n            }\r\n            else if (opts === 'option') {\r\n                dEl.setupDraggable({ [key]: value });\r\n            }\r\n            else {\r\n                const grid = dEl.el.gridstackNode.grid;\r\n                dEl.setupDraggable(Object.assign(Object.assign({}, grid.opts.draggable), {\r\n                    // containment: (grid.parentGridItem && !grid.opts.dragOut) ? grid.el.parentElement : (grid.opts.draggable.containment || null),\r\n                    start: opts.start,\r\n                    stop: opts.stop,\r\n                    drag: opts.drag\r\n                }));\r\n            }\r\n        });\r\n        return this;\r\n    }\r\n    dragIn(el, opts) {\r\n        this._getDDElements(el).forEach(dEl => dEl.setupDraggable(opts));\r\n        return this;\r\n    }\r\n    droppable(el, opts, key, value) {\r\n        if (typeof opts.accept === 'function' && !opts._accept) {\r\n            opts._accept = opts.accept;\r\n            opts.accept = (el) => opts._accept(el);\r\n        }\r\n        this._getDDElements(el).forEach(dEl => {\r\n            if (opts === 'disable' || opts === 'enable') {\r\n                dEl.ddDroppable && dEl.ddDroppable[opts]();\r\n            }\r\n            else if (opts === 'destroy') {\r\n                if (dEl.ddDroppable) { // error to call destroy if not there\r\n                    dEl.cleanDroppable();\r\n                }\r\n            }\r\n            else if (opts === 'option') {\r\n                dEl.setupDroppable({ [key]: value });\r\n            }\r\n            else {\r\n                dEl.setupDroppable(opts);\r\n            }\r\n        });\r\n        return this;\r\n    }\r\n    /** true if element is droppable */\r\n    isDroppable(el) {\r\n        return !!(el && el.ddElement && el.ddElement.ddDroppable && !el.ddElement.ddDroppable.disabled);\r\n    }\r\n    /** true if element is draggable */\r\n    isDraggable(el) {\r\n        return !!(el && el.ddElement && el.ddElement.ddDraggable && !el.ddElement.ddDraggable.disabled);\r\n    }\r\n    /** true if element is draggable */\r\n    isResizable(el) {\r\n        return !!(el && el.ddElement && el.ddElement.ddResizable && !el.ddElement.ddResizable.disabled);\r\n    }\r\n    on(el, name, callback) {\r\n        this._getDDElements(el).forEach(dEl => dEl.on(name, (event) => {\r\n            callback(event, dd_manager_1.DDManager.dragElement ? dd_manager_1.DDManager.dragElement.el : event.target, dd_manager_1.DDManager.dragElement ? dd_manager_1.DDManager.dragElement.helper : null);\r\n        }));\r\n        return this;\r\n    }\r\n    off(el, name) {\r\n        this._getDDElements(el).forEach(dEl => dEl.off(name));\r\n        return this;\r\n    }\r\n    /** @internal returns a list of DD elements, creating them on the fly by default */\r\n    _getDDElements(els, create = true) {\r\n        let hosts = utils_1.Utils.getElements(els);\r\n        if (!hosts.length)\r\n            return [];\r\n        let list = hosts.map(e => e.ddElement || (create ? dd_element_1.DDElement.init(e) : null));\r\n        if (!create) {\r\n            list.filter(d => d);\r\n        } // remove nulls\r\n        return list;\r\n    }\r\n}\r\nexports.DDGridStack = DDGridStack;\r\n/** global instance */\r\nconst dd = new DDGridStack;\r\n/********************************************************************************\r\n * GridStack code that is doing drag&drop extracted here so main class is smaller\r\n * for static grid that don't do any of this work anyway. Saves about 31k (41k -> 72k)\r\n * https://www.typescriptlang.org/docs/handbook/declaration-merging.html\r\n * https://www.typescriptlang.org/docs/handbook/mixins.html\r\n ********************************************************************************/\r\n/** @internal called to add drag over to support widgets being added externally */\r\ngridstack_1.GridStack.prototype._setupAcceptWidget = function () {\r\n    // check if we need to disable things\r\n    if (this.opts.staticGrid || (!this.opts.acceptWidgets && !this.opts.removable)) {\r\n        dd.droppable(this.el, 'destroy');\r\n        return this;\r\n    }\r\n    // vars shared across all methods\r\n    let cellHeight, cellWidth;\r\n    let onDrag = (event, el, helper) => {\r\n        let node = el.gridstackNode;\r\n        if (!node)\r\n            return;\r\n        helper = helper || el;\r\n        let parent = this.el.getBoundingClientRect();\r\n        let { top, left } = helper.getBoundingClientRect();\r\n        left -= parent.left;\r\n        top -= parent.top;\r\n        let ui = { position: { top, left } };\r\n        if (node._temporaryRemoved) {\r\n            node.x = Math.max(0, Math.round(left / cellWidth));\r\n            node.y = Math.max(0, Math.round(top / cellHeight));\r\n            delete node.autoPosition;\r\n            this.engine.nodeBoundFix(node);\r\n            // don't accept *initial* location if doesn't fit #1419 (locked drop region, or can't grow), but maybe try if it will go somewhere\r\n            if (!this.engine.willItFit(node)) {\r\n                node.autoPosition = true; // ignore x,y and try for any slot...\r\n                if (!this.engine.willItFit(node)) {\r\n                    dd.off(el, 'drag'); // stop calling us\r\n                    return; // full grid or can't grow\r\n                }\r\n                if (node._willFitPos) {\r\n                    // use the auto position instead #1687\r\n                    utils_1.Utils.copyPos(node, node._willFitPos);\r\n                    delete node._willFitPos;\r\n                }\r\n            }\r\n            // re-use the existing node dragging method\r\n            this._onStartMoving(helper, event, ui, node, cellWidth, cellHeight);\r\n        }\r\n        else {\r\n            // re-use the existing node dragging that does so much of the collision detection\r\n            this._dragOrResize(helper, event, ui, node, cellWidth, cellHeight);\r\n        }\r\n    };\r\n    dd.droppable(this.el, {\r\n        accept: (el) => {\r\n            let node = el.gridstackNode;\r\n            // set accept drop to true on ourself (which we ignore) so we don't get \"can't drop\" icon in HTML5 mode while moving\r\n            if ((node === null || node === void 0 ? void 0 : node.grid) === this)\r\n                return true;\r\n            if (!this.opts.acceptWidgets)\r\n                return false;\r\n            // check for accept method or class matching\r\n            let canAccept = true;\r\n            if (typeof this.opts.acceptWidgets === 'function') {\r\n                canAccept = this.opts.acceptWidgets(el);\r\n            }\r\n            else {\r\n                let selector = (this.opts.acceptWidgets === true ? '.grid-stack-item' : this.opts.acceptWidgets);\r\n                canAccept = el.matches(selector);\r\n            }\r\n            // finally check to make sure we actually have space left #1571\r\n            if (canAccept && node && this.opts.maxRow) {\r\n                let n = { w: node.w, h: node.h, minW: node.minW, minH: node.minH }; // only width/height matters and autoPosition\r\n                canAccept = this.engine.willItFit(n);\r\n            }\r\n            return canAccept;\r\n        }\r\n    })\r\n        /**\r\n         * entering our grid area\r\n         */\r\n        .on(this.el, 'dropover', (event, el, helper) => {\r\n        // console.log(`over ${this.el.gridstack.opts.id} ${count++}`); // TEST\r\n        let node = el.gridstackNode;\r\n        // ignore drop enter on ourself (unless we temporarily removed) which happens on a simple drag of our item\r\n        if ((node === null || node === void 0 ? void 0 : node.grid) === this && !node._temporaryRemoved) {\r\n            // delete node._added; // reset this to track placeholder again in case we were over other grid #1484 (dropout doesn't always clear)\r\n            return false; // prevent parent from receiving msg (which may be a grid as well)\r\n        }\r\n        // fix #1578 when dragging fast, we may not get a leave on the previous grid so force one now\r\n        if ((node === null || node === void 0 ? void 0 : node.grid) && node.grid !== this && !node._temporaryRemoved) {\r\n            // console.log('dropover without leave'); // TEST\r\n            let otherGrid = node.grid;\r\n            otherGrid._leave(el, helper);\r\n        }\r\n        // cache cell dimensions (which don't change), position can animate if we removed an item in otherGrid that affects us...\r\n        cellWidth = this.cellWidth();\r\n        cellHeight = this.getCellHeight(true);\r\n        // load any element attributes if we don't have a node\r\n        if (!node) { // @ts-ignore private read only on ourself\r\n            node = this._readAttr(el);\r\n        }\r\n        if (!node.grid) {\r\n            node._isExternal = true;\r\n            el.gridstackNode = node;\r\n        }\r\n        // calculate the grid size based on element outer size\r\n        helper = helper || el;\r\n        let w = node.w || Math.round(helper.offsetWidth / cellWidth) || 1;\r\n        let h = node.h || Math.round(helper.offsetHeight / cellHeight) || 1;\r\n        // if the item came from another grid, make a copy and save the original info in case we go back there\r\n        if (node.grid && node.grid !== this) {\r\n            // copy the node original values (min/max/id/etc...) but override width/height/other flags which are this grid specific\r\n            // console.log('dropover cloning node'); // TEST\r\n            if (!el._gridstackNodeOrig)\r\n                el._gridstackNodeOrig = node; // shouldn't have multiple nested!\r\n            el.gridstackNode = node = Object.assign(Object.assign({}, node), { w, h, grid: this });\r\n            this.engine.cleanupNode(node)\r\n                .nodeBoundFix(node);\r\n            // restore some internal fields we need after clearing them all\r\n            node._initDD =\r\n                node._isExternal = // DOM needs to be re-parented on a drop\r\n                    node._temporaryRemoved = true; // so it can be inserted onDrag below\r\n        }\r\n        else {\r\n            node.w = w;\r\n            node.h = h;\r\n            node._temporaryRemoved = true; // so we can insert it\r\n        }\r\n        // clear any marked for complete removal (Note: don't check _isAboutToRemove as that is cleared above - just do it)\r\n        _itemRemoving(node.el, false);\r\n        dd.on(el, 'drag', onDrag);\r\n        // make sure this is called at least once when going fast #1578\r\n        onDrag(event, el, helper);\r\n        return false; // prevent parent from receiving msg (which may be a grid as well)\r\n    })\r\n        /**\r\n         * Leaving our grid area...\r\n         */\r\n        .on(this.el, 'dropout', (event, el, helper) => {\r\n        // console.log(`out ${this.el.gridstack.opts.id} ${count++}`); // TEST\r\n        let node = el.gridstackNode;\r\n        if (!node)\r\n            return false;\r\n        // fix #1578 when dragging fast, we might get leave after other grid gets enter (which calls us to clean)\r\n        // so skip this one if we're not the active grid really..\r\n        if (!node.grid || node.grid === this) {\r\n            this._leave(el, helper);\r\n            // if we were created as temporary nested grid, go back to before state\r\n            if (this._isTemp) {\r\n                this.removeAsSubGrid(node);\r\n            }\r\n        }\r\n        return false; // prevent parent from receiving msg (which may be grid as well)\r\n    })\r\n        /**\r\n         * end - releasing the mouse\r\n         */\r\n        .on(this.el, 'drop', (event, el, helper) => {\r\n        var _a, _b;\r\n        let node = el.gridstackNode;\r\n        // ignore drop on ourself from ourself that didn't come from the outside - dragend will handle the simple move instead\r\n        if ((node === null || node === void 0 ? void 0 : node.grid) === this && !node._isExternal)\r\n            return false;\r\n        let wasAdded = !!this.placeholder.parentElement; // skip items not actually added to us because of constrains, but do cleanup #1419\r\n        this.placeholder.remove();\r\n        // notify previous grid of removal\r\n        // console.log('drop delete _gridstackNodeOrig') // TEST\r\n        let origNode = el._gridstackNodeOrig;\r\n        delete el._gridstackNodeOrig;\r\n        if (wasAdded && (origNode === null || origNode === void 0 ? void 0 : origNode.grid) && origNode.grid !== this) {\r\n            let oGrid = origNode.grid;\r\n            oGrid.engine.removedNodes.push(origNode);\r\n            oGrid._triggerRemoveEvent();\r\n            // if it's an empty sub-grid, to get auto-created, nuke it\r\n            if (oGrid.parentGridItem && !oGrid.engine.nodes.length && oGrid.opts.subGridDynamic) {\r\n                oGrid.removeAsSubGrid();\r\n            }\r\n        }\r\n        if (!node)\r\n            return false;\r\n        // use existing placeholder node as it's already in our list with drop location\r\n        if (wasAdded) {\r\n            this.engine.cleanupNode(node); // removes all internal _xyz values\r\n            node.grid = this;\r\n        }\r\n        dd.off(el, 'drag');\r\n        // if we made a copy ('helper' which is temp) of the original node then insert a copy, else we move the original node (#1102)\r\n        // as the helper will be nuked by jquery-ui otherwise\r\n        if (helper !== el) {\r\n            helper.remove();\r\n            el.gridstackNode = origNode; // original item (left behind) is re-stored to pre dragging as the node now has drop info\r\n            if (wasAdded) {\r\n                el = el.cloneNode(true);\r\n            }\r\n        }\r\n        else {\r\n            el.remove(); // reduce flicker as we change depth here, and size further down\r\n            this._removeDD(el);\r\n        }\r\n        if (!wasAdded)\r\n            return false;\r\n        el.gridstackNode = node;\r\n        node.el = el;\r\n        let subGrid = (_b = (_a = node.subGrid) === null || _a === void 0 ? void 0 : _a.el) === null || _b === void 0 ? void 0 : _b.gridstack; // set when actual sub-grid present\r\n        // @ts-ignore\r\n        utils_1.Utils.copyPos(node, this._readAttr(this.placeholder)); // placeholder values as moving VERY fast can throw things off #1578\r\n        utils_1.Utils.removePositioningStyles(el); // @ts-ignore\r\n        this._writeAttr(el, node);\r\n        this.el.appendChild(el); // @ts-ignore // TODO: now would be ideal time to _removeHelperStyle() overriding floating styles (native only)\r\n        if (subGrid) {\r\n            subGrid.parentGridItem = node;\r\n            if (!subGrid.opts.styleInHead)\r\n                subGrid._updateStyles(true); // re-create sub-grid styles now that we've moved\r\n        }\r\n        this._updateContainerHeight();\r\n        this.engine.addedNodes.push(node); // @ts-ignore\r\n        this._triggerAddEvent(); // @ts-ignore\r\n        this._triggerChangeEvent();\r\n        this.engine.endUpdate();\r\n        if (this._gsEventHandler['dropped']) {\r\n            this._gsEventHandler['dropped'](Object.assign(Object.assign({}, event), { type: 'dropped' }), origNode && origNode.grid ? origNode : undefined, node);\r\n        }\r\n        // wait till we return out of the drag callback to set the new drag&resize handler or they may get messed up\r\n        window.setTimeout(() => {\r\n            // IFF we are still there (some application will use as placeholder and insert their real widget instead and better call makeWidget())\r\n            if (node.el && node.el.parentElement) {\r\n                this._prepareDragDropByNode(node);\r\n            }\r\n            else {\r\n                this.engine.removeNode(node);\r\n            }\r\n            delete node.grid._isTemp;\r\n        });\r\n        return false; // prevent parent from receiving msg (which may be grid as well)\r\n    });\r\n    return this;\r\n};\r\n/** @internal mark item for removal */\r\nfunction _itemRemoving(el, remove) {\r\n    let node = el ? el.gridstackNode : undefined;\r\n    if (!node || !node.grid)\r\n        return;\r\n    remove ? node._isAboutToRemove = true : delete node._isAboutToRemove;\r\n    remove ? el.classList.add('grid-stack-item-removing') : el.classList.remove('grid-stack-item-removing');\r\n}\r\n/** @internal called to setup a trash drop zone if the user specifies it */\r\ngridstack_1.GridStack.prototype._setupRemoveDrop = function () {\r\n    if (!this.opts.staticGrid && typeof this.opts.removable === 'string') {\r\n        let trashEl = document.querySelector(this.opts.removable);\r\n        if (!trashEl)\r\n            return this;\r\n        // only register ONE drop-over/dropout callback for the 'trash', and it will\r\n        // update the passed in item and parent grid because the 'trash' is a shared resource anyway,\r\n        // and Native DD only has 1 event CB (having a list and technically a per grid removableOptions complicates things greatly)\r\n        if (!dd.isDroppable(trashEl)) {\r\n            dd.droppable(trashEl, this.opts.removableOptions)\r\n                .on(trashEl, 'dropover', (event, el) => _itemRemoving(el, true))\r\n                .on(trashEl, 'dropout', (event, el) => _itemRemoving(el, false));\r\n        }\r\n    }\r\n    return this;\r\n};\r\n/**\r\n * call to setup dragging in from the outside (say toolbar), by specifying the class selection and options.\r\n * Called during GridStack.init() as options, but can also be called directly (last param are used) in case the toolbar\r\n * is dynamically create and needs to change later.\r\n **/\r\ngridstack_1.GridStack.setupDragIn = function (dragIn, dragInOptions) {\r\n    if ((dragInOptions === null || dragInOptions === void 0 ? void 0 : dragInOptions.pause) !== undefined) {\r\n        dd_manager_1.DDManager.pauseDrag = dragInOptions.pause;\r\n    }\r\n    if (typeof dragIn === 'string') {\r\n        dragInOptions = Object.assign(Object.assign({}, types_1.dragInDefaultOptions), (dragInOptions || {}));\r\n        utils_1.Utils.getElements(dragIn).forEach(el => {\r\n            if (!dd.isDraggable(el))\r\n                dd.dragIn(el, dragInOptions);\r\n        });\r\n    }\r\n};\r\n/** @internal prepares the element for drag&drop **/\r\ngridstack_1.GridStack.prototype._prepareDragDropByNode = function (node) {\r\n    let el = node.el;\r\n    const noMove = node.noMove || this.opts.disableDrag;\r\n    const noResize = node.noResize || this.opts.disableResize;\r\n    // check for disabled grid first\r\n    if (this.opts.staticGrid || (noMove && noResize)) {\r\n        if (node._initDD) {\r\n            this._removeDD(el); // nukes everything instead of just disable, will add some styles back next\r\n            delete node._initDD;\r\n        }\r\n        el.classList.add('ui-draggable-disabled', 'ui-resizable-disabled'); // add styles one might depend on #1435\r\n        return this;\r\n    }\r\n    if (!node._initDD) {\r\n        // variables used/cashed between the 3 start/move/end methods, in addition to node passed above\r\n        let cellWidth;\r\n        let cellHeight;\r\n        /** called when item starts moving/resizing */\r\n        let onStartMoving = (event, ui) => {\r\n            // trigger any 'dragstart' / 'resizestart' manually\r\n            if (this._gsEventHandler[event.type]) {\r\n                this._gsEventHandler[event.type](event, event.target);\r\n            }\r\n            cellWidth = this.cellWidth();\r\n            cellHeight = this.getCellHeight(true); // force pixels for calculations\r\n            this._onStartMoving(el, event, ui, node, cellWidth, cellHeight);\r\n        };\r\n        /** called when item is being dragged/resized */\r\n        let dragOrResize = (event, ui) => {\r\n            this._dragOrResize(el, event, ui, node, cellWidth, cellHeight);\r\n        };\r\n        /** called when the item stops moving/resizing */\r\n        let onEndMoving = (event) => {\r\n            this.placeholder.remove();\r\n            delete node._moving;\r\n            delete node._event;\r\n            delete node._lastTried;\r\n            // if the item has moved to another grid, we're done here\r\n            let target = event.target;\r\n            if (!target.gridstackNode || target.gridstackNode.grid !== this)\r\n                return;\r\n            node.el = target;\r\n            if (node._isAboutToRemove) {\r\n                let gridToNotify = el.gridstackNode.grid;\r\n                if (gridToNotify._gsEventHandler[event.type]) {\r\n                    gridToNotify._gsEventHandler[event.type](event, target);\r\n                }\r\n                this._removeDD(el);\r\n                gridToNotify.engine.removedNodes.push(node);\r\n                gridToNotify._triggerRemoveEvent();\r\n                // break circular links and remove DOM\r\n                delete el.gridstackNode;\r\n                delete node.el;\r\n                el.remove();\r\n            }\r\n            else {\r\n                utils_1.Utils.removePositioningStyles(target);\r\n                if (node._temporaryRemoved) {\r\n                    // got removed - restore item back to before dragging position\r\n                    utils_1.Utils.copyPos(node, node._orig); // @ts-ignore\r\n                    this._writePosAttr(target, node);\r\n                    this.engine.addNode(node);\r\n                }\r\n                else {\r\n                    // move to new placeholder location\r\n                    this._writePosAttr(target, node);\r\n                }\r\n                if (this._gsEventHandler[event.type]) {\r\n                    this._gsEventHandler[event.type](event, target);\r\n                }\r\n            }\r\n            // @ts-ignore\r\n            this._extraDragRow = 0; // @ts-ignore\r\n            this._updateContainerHeight(); // @ts-ignore\r\n            this._triggerChangeEvent();\r\n            this.engine.endUpdate();\r\n        };\r\n        dd.draggable(el, {\r\n            start: onStartMoving,\r\n            stop: onEndMoving,\r\n            drag: dragOrResize\r\n        }).resizable(el, {\r\n            start: onStartMoving,\r\n            stop: onEndMoving,\r\n            resize: dragOrResize\r\n        });\r\n        node._initDD = true; // we've set DD support now\r\n    }\r\n    // finally fine tune move vs resize by disabling any part...\r\n    dd.draggable(el, noMove ? 'disable' : 'enable')\r\n        .resizable(el, noResize ? 'disable' : 'enable');\r\n    return this;\r\n};\r\n/** @internal called when item is starting a drag/resize */\r\ngridstack_1.GridStack.prototype._onStartMoving = function (el, event, ui, node, cellWidth, cellHeight) {\r\n    this.engine.cleanNodes()\r\n        .beginUpdate(node);\r\n    // @ts-ignore\r\n    this._writePosAttr(this.placeholder, node);\r\n    this.el.appendChild(this.placeholder);\r\n    // console.log('_onStartMoving placeholder') // TEST\r\n    node.el = this.placeholder;\r\n    node._lastUiPosition = ui.position;\r\n    node._prevYPix = ui.position.top;\r\n    node._moving = (event.type === 'dragstart'); // 'dropover' are not initially moving so they can go exactly where they enter (will push stuff out of the way)\r\n    delete node._lastTried;\r\n    if (event.type === 'dropover' && node._temporaryRemoved) {\r\n        // console.log('engine.addNode x=' + node.x); // TEST\r\n        this.engine.addNode(node); // will add, fix collisions, update attr and clear _temporaryRemoved\r\n        node._moving = true; // AFTER, mark as moving object (wanted fix location before)\r\n    }\r\n    // set the min/max resize info\r\n    this.engine.cacheRects(cellWidth, cellHeight, this.opts.marginTop, this.opts.marginRight, this.opts.marginBottom, this.opts.marginLeft);\r\n    if (event.type === 'resizestart') {\r\n        dd.resizable(el, 'option', 'minWidth', cellWidth * (node.minW || 1))\r\n            .resizable(el, 'option', 'minHeight', cellHeight * (node.minH || 1));\r\n        if (node.maxW) {\r\n            dd.resizable(el, 'option', 'maxWidth', cellWidth * node.maxW);\r\n        }\r\n        if (node.maxH) {\r\n            dd.resizable(el, 'option', 'maxHeight', cellHeight * node.maxH);\r\n        }\r\n    }\r\n};\r\n/** @internal called when item leaving our area by either cursor dropout event\r\n * or shape is outside our boundaries. remove it from us, and mark temporary if this was\r\n * our item to start with else restore prev node values from prev grid it came from.\r\n **/\r\ngridstack_1.GridStack.prototype._leave = function (el, helper) {\r\n    let node = el.gridstackNode;\r\n    if (!node)\r\n        return;\r\n    dd.off(el, 'drag'); // no need to track while being outside\r\n    // this gets called when cursor leaves and shape is outside, so only do this once\r\n    if (node._temporaryRemoved)\r\n        return;\r\n    node._temporaryRemoved = true;\r\n    this.engine.removeNode(node); // remove placeholder as well, otherwise it's a sign node is not in our list, which is a bigger issue\r\n    node.el = node._isExternal && helper ? helper : el; // point back to real item being dragged\r\n    if (this.opts.removable === true) { // boolean vs a class string\r\n        // item leaving us and we are supposed to remove on leave (no need to drag onto trash) mark it so\r\n        _itemRemoving(el, true);\r\n    }\r\n    // finally if item originally came from another grid, but left us, restore things back to prev info\r\n    if (el._gridstackNodeOrig) {\r\n        // console.log('leave delete _gridstackNodeOrig') // TEST\r\n        el.gridstackNode = el._gridstackNodeOrig;\r\n        delete el._gridstackNodeOrig;\r\n    }\r\n    else if (node._isExternal) {\r\n        // item came from outside (like a toolbar) so nuke any node info\r\n        delete node.el;\r\n        delete el.gridstackNode;\r\n        // and restore all nodes back to original\r\n        this.engine.restoreInitial();\r\n    }\r\n};\r\n/** @internal called when item is being dragged/resized */\r\ngridstack_1.GridStack.prototype._dragOrResize = function (el, event, ui, node, cellWidth, cellHeight) {\r\n    let p = Object.assign({}, node._orig); // could be undefined (_isExternal) which is ok (drag only set x,y and w,h will default to node value)\r\n    let resizing;\r\n    let mLeft = this.opts.marginLeft, mRight = this.opts.marginRight, mTop = this.opts.marginTop, mBottom = this.opts.marginBottom;\r\n    // if margins (which are used to pass mid point by) are large relative to cell height/width, reduce them down #1855\r\n    let mHeight = Math.round(cellHeight * 0.1), mWidth = Math.round(cellWidth * 0.1);\r\n    mLeft = Math.min(mLeft, mWidth);\r\n    mRight = Math.min(mRight, mWidth);\r\n    mTop = Math.min(mTop, mHeight);\r\n    mBottom = Math.min(mBottom, mHeight);\r\n    if (event.type === 'drag') {\r\n        if (node._temporaryRemoved)\r\n            return; // handled by dropover\r\n        let distance = ui.position.top - node._prevYPix;\r\n        node._prevYPix = ui.position.top;\r\n        utils_1.Utils.updateScrollPosition(el, ui.position, distance);\r\n        // get new position taking into account the margin in the direction we are moving! (need to pass mid point by margin)\r\n        let left = ui.position.left + (ui.position.left > node._lastUiPosition.left ? -mRight : mLeft);\r\n        let top = ui.position.top + (ui.position.top > node._lastUiPosition.top ? -mBottom : mTop);\r\n        p.x = Math.round(left / cellWidth);\r\n        p.y = Math.round(top / cellHeight);\r\n        // @ts-ignore// if we're at the bottom hitting something else, grow the grid so cursor doesn't leave when trying to place below others\r\n        let prev = this._extraDragRow;\r\n        if (this.engine.collide(node, p)) {\r\n            let row = this.getRow();\r\n            let extra = Math.max(0, (p.y + node.h) - row);\r\n            if (this.opts.maxRow && row + extra > this.opts.maxRow) {\r\n                extra = Math.max(0, this.opts.maxRow - row);\r\n            } // @ts-ignore\r\n            this._extraDragRow = extra; // @ts-ignore\r\n        }\r\n        else\r\n            this._extraDragRow = 0; // @ts-ignore\r\n        if (this._extraDragRow !== prev)\r\n            this._updateContainerHeight();\r\n        if (node.x === p.x && node.y === p.y)\r\n            return; // skip same\r\n        // DON'T skip one we tried as we might have failed because of coverage <50% before\r\n        // if (node._lastTried && node._lastTried.x === x && node._lastTried.y === y) return;\r\n    }\r\n    else if (event.type === 'resize') {\r\n        if (p.x < 0)\r\n            return;\r\n        // Scrolling page if needed\r\n        utils_1.Utils.updateScrollResize(event, el, cellHeight);\r\n        // get new size\r\n        p.w = Math.round((ui.size.width - mLeft) / cellWidth);\r\n        p.h = Math.round((ui.size.height - mTop) / cellHeight);\r\n        if (node.w === p.w && node.h === p.h)\r\n            return;\r\n        if (node._lastTried && node._lastTried.w === p.w && node._lastTried.h === p.h)\r\n            return; // skip one we tried (but failed)\r\n        // if we size on left/top side this might move us, so get possible new position as well\r\n        let left = ui.position.left + mLeft;\r\n        let top = ui.position.top + mTop;\r\n        p.x = Math.round(left / cellWidth);\r\n        p.y = Math.round(top / cellHeight);\r\n        resizing = true;\r\n    }\r\n    node._event = event;\r\n    node._lastTried = p; // set as last tried (will nuke if we go there)\r\n    let rect = {\r\n        x: ui.position.left + mLeft,\r\n        y: ui.position.top + mTop,\r\n        w: (ui.size ? ui.size.width : node.w * cellWidth) - mLeft - mRight,\r\n        h: (ui.size ? ui.size.height : node.h * cellHeight) - mTop - mBottom\r\n    };\r\n    if (this.engine.moveNodeCheck(node, Object.assign(Object.assign({}, p), { cellWidth, cellHeight, rect, resizing }))) {\r\n        node._lastUiPosition = ui.position;\r\n        this.engine.cacheRects(cellWidth, cellHeight, mTop, mRight, mBottom, mLeft);\r\n        delete node._skipDown;\r\n        if (resizing && node.subGrid) {\r\n            node.subGrid.onParentResize();\r\n        } // @ts-ignore\r\n        this._extraDragRow = 0; // @ts-ignore\r\n        this._updateContainerHeight();\r\n        let target = event.target; // @ts-ignore\r\n        this._writePosAttr(target, node);\r\n        if (this._gsEventHandler[event.type]) {\r\n            this._gsEventHandler[event.type](event, target);\r\n        }\r\n    }\r\n};\r\n/**\r\n * Enables/Disables moving.\r\n * @param els widget or selector to modify.\r\n * @param val if true widget will be draggable.\r\n */\r\ngridstack_1.GridStack.prototype.movable = function (els, val) {\r\n    if (this.opts.staticGrid)\r\n        return this; // can't move a static grid!\r\n    gridstack_1.GridStack.getElements(els).forEach(el => {\r\n        let node = el.gridstackNode;\r\n        if (!node)\r\n            return;\r\n        if (val)\r\n            delete node.noMove;\r\n        else\r\n            node.noMove = true;\r\n        this._prepareDragDropByNode(node); // init DD if need be, and adjust\r\n    });\r\n    return this;\r\n};\r\n/**\r\n * Enables/Disables resizing.\r\n * @param els  widget or selector to modify\r\n * @param val  if true widget will be resizable.\r\n */\r\ngridstack_1.GridStack.prototype.resizable = function (els, val) {\r\n    if (this.opts.staticGrid)\r\n        return this; // can't resize a static grid!\r\n    gridstack_1.GridStack.getElements(els).forEach(el => {\r\n        let node = el.gridstackNode;\r\n        if (!node)\r\n            return;\r\n        if (val)\r\n            delete node.noResize;\r\n        else\r\n            node.noResize = true;\r\n        this._prepareDragDropByNode(node); // init DD if need be, and adjust\r\n    });\r\n    return this;\r\n};\r\n/**\r\n  * Temporarily disables widgets moving/resizing.\r\n  * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.\r\n  * Note: no-op for static grid\r\n  * This is a shortcut for:\r\n  * @example\r\n  *  grid.enableMove(false);\r\n  *  grid.enableResize(false);\r\n  */\r\ngridstack_1.GridStack.prototype.disable = function () {\r\n    if (this.opts.staticGrid)\r\n        return;\r\n    this.enableMove(false);\r\n    this.enableResize(false); // @ts-ignore\r\n    this._triggerEvent('disable');\r\n    return this;\r\n};\r\n/**\r\n  * Re-enables widgets moving/resizing - see disable().\r\n  * Note: no-op for static grid.\r\n  * This is a shortcut for:\r\n  * @example\r\n  *  grid.enableMove(true);\r\n  *  grid.enableResize(true);\r\n  */\r\ngridstack_1.GridStack.prototype.enable = function () {\r\n    if (this.opts.staticGrid)\r\n        return;\r\n    this.enableMove(true);\r\n    this.enableResize(true); // @ts-ignore\r\n    this._triggerEvent('enable');\r\n    return this;\r\n};\r\n/** Enables/disables widget moving. No-op for static grids. */\r\ngridstack_1.GridStack.prototype.enableMove = function (doEnable) {\r\n    if (this.opts.staticGrid)\r\n        return this; // can't move a static grid!\r\n    this.opts.disableDrag = !doEnable; // FIRST before we update children as grid overrides #1658\r\n    this.engine.nodes.forEach(n => this.movable(n.el, doEnable));\r\n    return this;\r\n};\r\n/** Enables/disables widget resizing. No-op for static grids. */\r\ngridstack_1.GridStack.prototype.enableResize = function (doEnable) {\r\n    if (this.opts.staticGrid)\r\n        return this; // can't size a static grid!\r\n    this.opts.disableResize = !doEnable; // FIRST before we update children as grid overrides #1658\r\n    this.engine.nodes.forEach(n => this.resizable(n.el, doEnable));\r\n    return this;\r\n};\r\n/** removes any drag&drop present (called during destroy) */\r\ngridstack_1.GridStack.prototype._removeDD = function (el) {\r\n    dd.draggable(el, 'destroy').resizable(el, 'destroy');\r\n    if (el.gridstackNode) {\r\n        delete el.gridstackNode._initDD; // reset our DD init flag\r\n    }\r\n    delete el.ddElement;\r\n    return this;\r\n};\r\n//# sourceMappingURL=dd-gridstack.js.map","import { GridItemHTMLElement, GridStack, GridStackElement, GridStackOptions } from \"gridstack\";\n\nfunction init(\n  options: GridStackOptions = {},\n  elOrString: GridStackElement = \".grid-stack\",\n  dotNet: DotNet.DotNetObject\n) {\n  const grid = GridStack.init(options, elOrString);\n  grid[\"dotNet\"] = dotNet;\n  addEvents(grid);\n  return grid;\n}\n\nfunction setStatic(grid: GridStack, staticValue: boolean) {\n  if (grid) {\n    grid.setStatic(staticValue);\n  }\n}\n\nfunction reload(grid: GridStack) {\n  if (grid) {\n    const opts = { ...grid.opts };\n    const el = grid.el;\n    grid.destroy(false);\n    const dotNet = grid[\"dotNet\"];\n    grid = GridStack.init(opts, el);\n    grid[\"dotNet\"] = dotNet;\n    addEvents(grid);\n    return grid;\n  }\n\n  return grid;\n}\n\nfunction save(grid: GridStack) {\n  if (grid) {\n    const widgets = grid.save();\n    if (Array.isArray(widgets)) {\n      return widgets.map(({ content, ...rest }) => rest);\n    }\n  }\n\n  return [];\n}\n\nfunction addEvents(grid: GridStack) {\n  if (!grid) return;\n\n  const dotNet: DotNet.DotNetObject = grid[\"dotNet\"];\n  grid.on(\"resize\", function (event: Event, el: GridItemHTMLElement) {\n    dotNet.invokeMethodAsync(\"OnResize\", ...resize(event, el));\n  });\n}\n\nfunction resize(event: Event, el: GridItemHTMLElement) {\n  const customElement = el.firstElementChild.firstElementChild;\n  let id;\n  let width = 0;\n  let height = 0;\n  if (customElement) {\n    id = el.getAttribute(\"gs-id\");\n    width = customElement.clientWidth;\n    height = customElement.clientHeight;\n  }\n  return [id, width, height];\n}\n\nexport { init, reload, setStatic, save };\n","/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n"],"names":["Object","defineProperty","utils","value","Utils","obsoleteAttr","obsoleteOptsDel","obsoleteOpts","obsolete","self","f","oldName","newName","rev","wrapper","args","console","warn","apply","prototype","opts","undefined","info","el","oldAttr","getAttribute","setAttribute","static","els","list","document","querySelectorAll","length","Array","from","getElementById","substring","querySelector","isNaN","a","b","y","h","x","w","isIntercepted","x0","x1","y0","y1","nodes","dir","column","reduce","col","n","Math","max","sort","id","parent","style","createElement","styleSheet","cssText","appendChild","createTextNode","insertBefore","firstChild","getElementsByTagName","sheet","parentNode","remove","selector","rules","addRule","insertRule","v","toLowerCase","Boolean","Number","val","unit","match","Error","parseFloat","target","sources","forEach","source","key","hasOwnProperty","this","defaults","keys","doMinMax","minW","minH","maxW","maxH","i","removeEl","grid","autoPosition","noResize","noMove","locked","name","classList","contains","parentElement","func","delay","isWaiting","setTimeout","position","removeProperty","left","top","width","height","scrollingElement","documentElement","getComputedStyle","test","overflow","overflowY","getScrollElement","distance","rect","getBoundingClientRect","innerHeightOrClientHeight","window","innerHeight","clientHeight","bottom","offsetDiffDown","offsetDiffUp","scrollEl","prevScroll","scrollTop","offsetHeight","abs","event","offsetTop","pointerPosY","clientY","scrollBy","behavior","obj","assign","skipFields","ret","clone","find","k","cloneDeep","node","cloneNode","removeAttribute","styles","s","isArray","e","evt","type","button","which","buttons","bubbles","cancelable","dataTransfer","p","simulatedType","simulatedEvent","createEvent","initMouseEvent","screenX","screenY","clientX","ctrlKey","altKey","shiftKey","metaKey","dispatchEvent","gridstackEngine","GridStackEngine","utils_1","require$$0","constructor","addedNodes","removedNodes","maxRow","_float","float","onChange","batchUpdate","flag","batchMode","_prevFloat","saveInitial","_packNodes","_notify","_useEntireRowArea","nn","_hasLocked","_moving","_skipDown","_fixCollisions","collide","opt","sortNodes","nested","swap","area","skip","didMove","newOpt","pack","moved","moveNode","copyPos","skip2","collideAll","filter","directionCollideCoverage","o","collides","_rect","r0","r","r2","yOver","MAX_VALUE","xOver","overMax","over","min","cacheRects","right","_doSwap","_dirty","touching","isTouching","t","isAreaEmpty","compact","copyNodes","addNode","_updating","_orig","newY","prepareNode","resizing","_id","_idSeq","nodeBoundFix","before","_inColumnResize","findCacheLayout","copy","cacheOneLayout","samePos","getDirtyNodes","verify","dirtyNodes","concat","cleanNodes","_lastTried","some","restoreInitial","findEmptyPosition","found","floor","box","triggerAddEvent","dup","_temporaryRemoved","_removeDOM","push","removeNode","removeDOM","triggerEvent","removeAll","_layouts","moveNodeCheck","changedPosConstrain","clonedNode","map","canMove","getRow","gridstackNode","c","willItFit","_willFitPos","cleanupNode","content","_a","_b","wasUndefinedPack","prevPos","needToMove","activeDrag","subGridDynamic","_isTemp","areaIntercept","a1","a2","makeSubGrid","row","beginUpdate","endUpdate","save","saveElement","len","layout","wl","l","removeInternalForSave","layoutsNodesChange","ratio","round","updateNodeWidths","prevColumn","cacheLayout","newNodes","domOrder","cacheNodes","lastIndex","cacheNode","j","findIndex","splice","move","scale","clear","index","_c","prop","types","dragInDefaultOptions","gridDefaults","alwaysShowResizeHandle","animate","auto","cellHeight","cellHeightThrottle","cellHeightUnit","draggable","handle","appendTo","itemClass","margin","marginUnit","minRow","oneColumnSize","placeholderClass","placeholderText","removableOptions","accept","resizable","handles","rtl","ddManager","DDManager","ddTouch","pointerleave","pointerenter","pointerdown","touchend","touchmove","isTouch","dd_manager_1","DocumentTouch","navigator","maxTouchPoints","msMaxTouchPoints","DDTouch","simulateMouseEvent","touches","preventDefault","touch","changedTouches","simulatePointerMouseEvent","touchstart","touchHandled","pointerLeaveTimeout","clearTimeout","wasDragging","dragElement","releasePointerCapture","pointerId","ddBaseImpl","DDBaseImplement","_eventRegister","disabled","_disabled","on","callback","off","enable","disable","destroy","eventName","ddResizable","DDResizable","dd_resizable_handle_1","ddResizableHandle","DDResizableHandle","dd_touch_1","host","direction","option","moving","_mouseDown","bind","_mouseMove","_mouseUp","_init","add","prefix","zIndex","userSelect","addEventListener","mouseDownEvent","removeEventListener","removeChild","stopPropagation","_triggerEvent","dd_base_impl_1","require$$1","require$$2","require$$3","super","_ui","containmentRect","newRect","originalRect","scrolled","temporalRect","size","_mouseOver","_mouseOut","_setupAutoHide","autoHide","_setupHandlers","_removeHandlers","updateOption","updateHandles","updateAutoHide","overResizeElement","handlerDirection","handlers","split","trim","start","_resizeStart","stop","_resizeStop","_resizing","scrollY","startEvent","_setupHelper","_applyChange","ev","initEvent","_getChange","resize","_cleanHelper","elOriginStyleVal","_originStyleProp","parentOriginStylePosition","opacity","oEvent","offsetX","offsetY","indexOf","constrain","_constrainSize","oWidth","oHeight","maxWidth","MAX_SAFE_INTEGER","minWidth","maxHeight","minHeight","containmentEl","ddElement","DDElement","dd_resizable_1","dd_draggable_1","ddDraggable","DDDraggable","className","dragEl","forDestroy","dragTimeout","dragging","helper","mouseHandled","nodeName","dropElement","_callDrag","drag","ui","_dragFollow","pauseDrag","pause","isInteger","ddDroppable","_createHelper","_setupHelperContainmentStyle","dragOffset","_getDragOffset","helperContainment","_setupHelperStyle","_removeHelperStyle","drop","body","dragElementOriginStyle","originStyleProp","pointerEvents","willChange","transition","_isAboutToRemove","offset","offsetLeft","xformOffsetX","xformOffsetY","testEl","addElStyles","testElPosition","targetOffset","dd_droppable_1","DDDroppable","_mouseEnter","_mouseLeave","_setupAccept","_canDrop","out","parentDrop","matches","setupDraggable","cleanDraggable","setupResizable","cleanResizable","setupDroppable","cleanDroppable","__createBinding","create","m","k2","enumerable","get","__exportStar","exports","GridStack","gridstack_engine_1","types_1","_gsEventHandler","_extraDragRow","rowAttr","toNumber","anyOpts","_alwaysShowResizeHandle","staticGrid","toBool","handleClass","_initMargin","disableOneColumnMode","_widthOrContainer","_prevColumn","getColumn","parentGridItem","closestUpByClass","subGrid","_isAutoCellHeight","_styleSheetClass","_setStaticClass","engineClass","engine","cbNodes","_writePosAttr","_updateStyles","elements","getGridItems","parseInt","_prepareElement","setAnimation","dragIn","setupDragIn","dragInOptions","_setupRemoveDrop","_setupAcceptWidget","_updateWindowResizeEvent","options","elOrString","getGridElement","gridstack","error","grids","getGridElements","doc","implementation","createHTMLDocument","innerHTML","class","children","init","load","placeholder","_placeholder","placeholderChild","addWidget","arguments","domAttr","_readAttr","_writeAttr","_insertNotAppend","prepend","_updateContainerHeight","_ignoreLayoutsNodeChange","_triggerAddEvent","_triggerChangeEvent","ops","nodeToAdd","saveContent","autoColumn","makeWidget","newItem","newItemOpt","_removeDD","_prepareDragDropByNode","update","addGrid","_autoColumn","_event","removeAsSubGrid","nodeThatRemoved","pGrid","removeWidget","saveGridOpt","sub","marginBottom","marginTop","marginRight","marginLeft","origShow","removeInternalAndSame","addAndRemove","items","removed","item","_triggerRemoveEvent","getCellHeight","forcePixel","rows","marginDiff","cellWidth","data","parseHeight","clientWidth","innerWidth","domNodes","oldColumn","oneColumnModeDomSort","setStatic","_removeStylesheet","getFloat","getCellFromPixel","useDocRelative","containerPos","relativeLeft","relativeTop","columnWidth","rowHeight","getElement","noData","detail","log","getElements","doAnimate","updateClass","changed","ddChanged","getMargin","CustomEvent","Event","_styles","removeStylesheet","forceUpdate","styleLocation","styleInHead","createStylesheet","_max","addCSSRule","getHeight","String","same","attrs","resizeHandles","classes","onParentResize","changedColumn","oneColumn","_cellHeightThrottle","throttle","forceRemove","workTodo","_windowResizeBind","margins","movable","enableMove","doEnable","enableResize","_onStartMoving","_dragOrResize","_leave","commit","Engine","GDRev","require$$4","ddGridstack","DDGridStack","gridstack_1","dd_element_1","dd","_getDDElements","dEl","droppable","_accept","isDroppable","isDraggable","isResizable","hosts","d","_itemRemoving","acceptWidgets","removable","onDrag","canAccept","_isExternal","offsetWidth","_gridstackNodeOrig","_initDD","wasAdded","origNode","oGrid","removePositioningStyles","trashEl","disableDrag","disableResize","onStartMoving","dragOrResize","onEndMoving","gridToNotify","_lastUiPosition","_prevYPix","mLeft","mRight","mTop","mBottom","mHeight","mWidth","updateScrollPosition","prev","extra","updateScrollResize","require$$5","dotNet","addEvents","staticValue","reload","widgets","call","getOwnPropertySymbols","propertyIsEnumerable","__rest","invokeMethodAsync","customElement","firstElementChild"],"mappings":"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"}