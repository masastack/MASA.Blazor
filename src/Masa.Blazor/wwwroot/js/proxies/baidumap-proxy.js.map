{"version":3,"file":"baidumap-proxy.js","sources":["../../../../BlazorComponent/src/Component/BlazorComponent.Web/src/proxies/maps/baidumap/index.js"],"sourcesContent":["class BaiduMapProxy {\r\n    instance;\r\n    dotNetHelper;\r\n\r\n    constructor(containerId, initArgs) {\r\n        this.instance = new BMapGL.Map(containerId);\r\n\r\n        if (initArgs.enableScrollWheelZoom)\r\n            this.instance.enableScrollWheelZoom();\r\n\r\n        this.instance.centerAndZoom(initArgs.center, initArgs.zoom);\r\n\r\n        if (initArgs.dark)\r\n            this.instance.setMapStyleV2({\r\n                styleId: initArgs.darkThemeId\r\n            });\r\n    }\r\n\r\n    setDotNetObjectReference(dotNetHelper, events) {\r\n        this.dotNetHelper = dotNetHelper;\r\n\r\n        events.forEach((event_name) => {\r\n            this.instance.addEventListener(event_name, async function (e) {\r\n                if (event_name == \"dragstart\" ||\r\n                    event_name == \"dragging\" ||\r\n                    event_name == \"dragend\" ||\r\n                    event_name == \"dblclick\") {\r\n\r\n                    await dotNetHelper.invokeMethodAsync(\"OnEvent\", event_name, {\r\n                        latlng: e.point,\r\n                        pixel: e.pixel,\r\n                    });\r\n                }\r\n\r\n                else if (event_name == \"click\" ||\r\n                    event_name == \"rightclick\" ||\r\n                    event_name == \"rightdblclick\" ||\r\n                    event_name == \"mousemove\") {\r\n\r\n                    await dotNetHelper.invokeMethodAsync(\"OnEvent\", event_name, {\r\n                        latlng: e.latlng,\r\n                        pixel: e.pixel,\r\n                    });\r\n                }\r\n\r\n                else\r\n                    await dotNetHelper.invokeMethodAsync(\"OnEvent\", event_name, null);\r\n            });\r\n        });\r\n    }\r\n\r\n    getOriginInstance = () => this.instance;\r\n\r\n    getCenter = () => this.instance.getCenter();\r\n\r\n    setZoom = (zoom) => this.instance.setZoom(zoom);\r\n\r\n    getZoom = () => this.instance.getZoom();\r\n\r\n    setMaxZoom = (maxZoom) => this.instance.setMaxZoom(maxZoom);\r\n\r\n    setMinZoom = (minZoom) => this.instance.setMinZoom(minZoom);\r\n\r\n    enableScrollWheelZoom = () => this.instance.enableScrollWheelZoom();\r\n\r\n    disableScrollWheelZoom = () => this.instance.disableScrollWheelZoom();\r\n\r\n    setMapType = (mapType) => this.instance.setMapType(mapType);\r\n\r\n    getMapType = () => this.instance.getMapType();\r\n\r\n    setTrafficOn = () => this.instance.setTrafficOn();\r\n\r\n    setTrafficOff = () => this.instance.setTrafficOff();\r\n\r\n    setMapStyleV2 = (options) => this.instance.setMapStyleV2(options);\r\n\r\n    panTo = (point) => this.instance.panTo(point);\r\n\r\n    addOverlay = (overlay) => this.instance.addOverlay(overlay);\r\n\r\n    removeOverlay = (overlay) => this.instance.removeOverlay(overlay);\r\n\r\n    clearOverlays = () => this.instance.clearOverlays();\r\n\r\n    initAndAddCircle(circle) {\r\n        var c = new BMapGL.Circle(circle.center, circle.radius, {\r\n            strokeColor: circle.strokeColor,\r\n            strokeWeight: circle.strokeWeight,\r\n            strokeOpacity: circle.strokeOpacity,\r\n            strokeStyle: circle.strokeStyle == 0 ? \"solid\" : \"dashed\",\r\n            fillColor: circle.fillColor,\r\n            fillOpacity: circle.fillOpacity\r\n        });\r\n\r\n        this.instance.addOverlay(c);\r\n\r\n        return c;\r\n    }\r\n\r\n    initAndAddMarker(marker) {\r\n        var m = new BMapGL.Marker(marker.point, {\r\n            offset: marker.offset,\r\n            rotation: marker.rotation,\r\n            title: marker.title\r\n        });\r\n\r\n        this.instance.addOverlay(m);\r\n\r\n        return m;\r\n    }\r\n\r\n    initAndAddLabel(label) {\r\n        var l = new BMapGL.Label(label.content, {\r\n            offset: label.offset,\r\n            position: label.position\r\n        });\r\n\r\n        this.instance.addOverlay(l);\r\n\r\n        return l;\r\n    }\r\n\r\n    initAndAddPolyline(polyline) {\r\n        if (polyline.points == null)\r\n            return null;\r\n\r\n        var pl = new BMapGL.Polyline(polyline.points, {\r\n            strokeColor: polyline.strokeColor,\r\n            strokeWeight: polyline.strokeWeight,\r\n            strokeOpacity: polyline.strokeOpacity,\r\n            strokeStyle: polyline.strokeStyle == 0 ? \"solid\" : \"dashed\",\r\n            geodesic: polyline.geodesic,\r\n            clip: polyline.clip\r\n        });\r\n\r\n        this.instance.addOverlay(pl);\r\n\r\n        return pl;\r\n    }\r\n\r\n    toBMapGLPoint = (point) => new BMapGL.Point(point.lng, point.lat);\r\n\r\n    initAndAddPolygon(polygon) {\r\n        if (polygon.points == null)\r\n            return null;\r\n\r\n        var bmapPoints = [];\r\n        polygon.points.forEach(element => {\r\n            bmapPoints.push(toBMapGLPoint(element));\r\n        });\r\n\r\n        var pg = new BMapGL.Polygon(bmapPoints, {\r\n            strokeColor: polygon.strokeColor,\r\n            strokeWeight: polygon.strokeWeight,\r\n            strokeOpacity: polygon.strokeOpacity,\r\n            strokeStyle: polygon.strokeStyle == 0 ? \"solid\" : \"dashed\",\r\n            fillColor: polygon.fillColor,\r\n            fillOpacity: polygon.fillOpacity\r\n        });\r\n\r\n        this.instance.addOverlay(pg);\r\n\r\n        return pg;\r\n    }\r\n}\r\n\r\nconst init = (containerId, initArgs) => new BaiduMapProxy(containerId, initArgs);\r\n\r\nexport { init }"],"names":["BaiduMapProxy","instance","dotNetHelper","constructor","containerId","initArgs","this","BMapGL","Map","enableScrollWheelZoom","centerAndZoom","center","zoom","dark","setMapStyleV2","styleId","darkThemeId","setDotNetObjectReference","events","forEach","event_name","addEventListener","async","e","invokeMethodAsync","latlng","point","pixel","getOriginInstance","getCenter","setZoom","getZoom","setMaxZoom","maxZoom","setMinZoom","minZoom","disableScrollWheelZoom","setMapType","mapType","getMapType","setTrafficOn","setTrafficOff","options","panTo","addOverlay","overlay","removeOverlay","clearOverlays","initAndAddCircle","circle","c","Circle","radius","strokeColor","strokeWeight","strokeOpacity","strokeStyle","fillColor","fillOpacity","initAndAddMarker","marker","m","Marker","offset","rotation","title","initAndAddLabel","label","l","Label","content","position","initAndAddPolyline","polyline","points","pl","Polyline","geodesic","clip","toBMapGLPoint","Point","lng","lat","initAndAddPolygon","polygon","bmapPoints","element","push","pg","Polygon","init"],"mappings":"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"}