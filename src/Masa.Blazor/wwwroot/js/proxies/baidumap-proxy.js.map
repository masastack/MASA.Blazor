{"version":3,"file":"baidumap-proxy.js","sources":["../../../../BlazorComponent/src/Component/BlazorComponent.Web/src/proxies/maps/baidumap/index.js"],"sourcesContent":["class BaiduMapProxy {\r\n  instance;\r\n  dotNetHelper;\r\n\r\n  constructor(containerId, initArgs) {\r\n    this.instance = new BMapGL.Map(containerId);\r\n\r\n    if (initArgs.enableScrollWheelZoom)\r\n      this.instance.enableScrollWheelZoom();\r\n\r\n    this.instance.setMaxZoom(initArgs.maxZoom);\r\n    this.instance.setMinZoom(initArgs.minZoom);\r\n    this.instance.centerAndZoom(initArgs.center, initArgs.zoom);\r\n\r\n    this.instance.setMapType(initArgs.mapTypeString);\r\n\r\n    if(initArgs.trafficOn)\r\n      this.instance.setTrafficOn();\r\n\r\n    if (initArgs.dark)\r\n      this.instance.setMapStyleV2({\r\n        styleId: initArgs.darkThemeId\r\n      });\r\n  }\r\n\r\n  setDotNetObjectReference(dotNetHelper, events) {\r\n      this.dotNetHelper = dotNetHelper;\r\n\r\n      events.forEach((event_name) => {\r\n        this.instance.addEventListener(event_name, async function (e) {\r\n          if (event_name == \"dragstart\" ||\r\n              event_name == \"dragging\" ||\r\n              event_name == \"dragend\" ||\r\n              event_name == \"dblclick\") {\r\n                await dotNetHelper.invokeMethodAsync(\"OnEvent\", event_name, {\r\n                  latlng: e.point,\r\n                  pixel: e.pixel,\r\n                });\r\n            }\r\n            else if (event_name == \"click\" ||\r\n              event_name == \"rightclick\" ||\r\n              event_name == \"rightdblclick\" ||\r\n              event_name == \"mousemove\") {\r\n                await dotNetHelper.invokeMethodAsync(\"OnEvent\", event_name, {\r\n                  latlng: e.latlng,\r\n                  pixel: e.pixel,\r\n                });\r\n            }\r\n            else {\r\n              await dotNetHelper.invokeMethodAsync(\"OnEvent\", event_name, null);\r\n            }\r\n          });\r\n        });\r\n  }\r\n\r\n  getOriginInstance = () => this.instance;\r\n\r\n  getCenter = () => this.instance.getCenter();\r\n\r\n  setZoom = (zoom) => this.instance.setZoom(zoom);\r\n\r\n  getZoom = () => this.instance.getZoom();\r\n\r\n  setMaxZoom = (maxZoom) => this.instance.setMaxZoom(maxZoom);\r\n\r\n  setMinZoom = (minZoom) => this.instance.setMinZoom(minZoom);\r\n\r\n  enableScrollWheelZoom = () => this.instance.enableScrollWheelZoom();\r\n\r\n  disableScrollWheelZoom = () => this.instance.disableScrollWheelZoom();\r\n\r\n  setMapType = (mapType) => this.instance.setMapType(mapType);\r\n\r\n  getMapType = () => this.instance.getMapType();\r\n\r\n  setTrafficOn = () => this.instance.setTrafficOn();\r\n\r\n  setTrafficOff = () => this.instance.setTrafficOff();\r\n\r\n  setMapStyleV2 = (options) => this.instance.setMapStyleV2(options);\r\n\r\n  panTo = (point) => this.instance.panTo(point);\r\n\r\n  addOverlay = (overlay) => this.instance.addOverlay(overlay);\r\n\r\n  removeOverlay = (overlay) => this.instance.removeOverlay(overlay);\r\n\r\n  clearOverlays = () => this.instance.clearOverlays();\r\n\r\n  destroy = () => this.instance.destroy();\r\n\r\n  addCircle(circle) {\r\n    var c = new BMapGL.Circle(circle.center, circle.radius, {\r\n      strokeColor: circle.strokeColor,\r\n      strokeWeight: circle.strokeWeight,\r\n      strokeOpacity: circle.strokeOpacity,\r\n      strokeStyle: circle.strokeStyle == 0 ? \"solid\" : \"dashed\",\r\n      fillColor: circle.fillColor,\r\n      fillOpacity: circle.fillOpacity\r\n    });\r\n\r\n    this.instance.addOverlay(c);\r\n\r\n    return c;\r\n  }\r\n\r\n  addMarker(marker) {\r\n    var m = new BMapGL.Marker(marker.point, {\r\n      offset: marker.offset,\r\n      rotation: marker.rotation,\r\n      title: marker.title\r\n    });\r\n\r\n    this.instance.addOverlay(m);\r\n\r\n    return m;\r\n  }\r\n\r\n  addLabel(label) {\r\n    var l = new BMapGL.Label(label.content, {\r\n      offset: label.offset,\r\n      position: label.position\r\n    });\r\n\r\n    this.instance.addOverlay(l);\r\n\r\n    return l;\r\n  }\r\n\r\n  addPolyline(polyline) {\r\n    if (polyline.points == null)\r\n      return null;\r\n\r\n    var pl = new BMapGL.Polyline(polyline.points, {\r\n      strokeColor: polyline.strokeColor,\r\n      strokeWeight: polyline.strokeWeight,\r\n      strokeOpacity: polyline.strokeOpacity,\r\n      strokeStyle: polyline.strokeStyle == 0 ? \"solid\" : \"dashed\",\r\n      geodesic: polyline.geodesic,\r\n      clip: polyline.clip\r\n    });\r\n\r\n    this.instance.addOverlay(pl);\r\n\r\n    return pl;\r\n  }\r\n\r\n  toBMapGLPoint = (point) => new BMapGL.Point(point.lng, point.lat);\r\n\r\n  addPolygon(polygon) {\r\n    if (polygon.points == null)\r\n      return null;\r\n\r\n    var bmapPoints = [];\r\n    polygon.points.forEach(element => {\r\n      bmapPoints.push(this.toBMapGLPoint(element));\r\n    });\r\n\r\n    var pg = new BMapGL.Polygon(bmapPoints, {\r\n      strokeColor: polygon.strokeColor,\r\n      strokeWeight: polygon.strokeWeight,\r\n      strokeOpacity: polygon.strokeOpacity,\r\n      strokeStyle: polygon.strokeStyle == 0 ? \"solid\" : \"dashed\",\r\n      fillColor: polygon.fillColor,\r\n      fillOpacity: polygon.fillOpacity\r\n    });\r\n\r\n    this.instance.addOverlay(pg);\r\n\r\n    return pg;\r\n  }\r\n\r\n  contains(overlay){\r\n    var os = this.instance.getOverlays();\r\n    for (let index = 0; index < os.length; index++) {\r\n      if(os[index] === overlay)\r\n        return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nconst init = (containerId, initArgs) => new BaiduMapProxy(containerId, initArgs);\r\n\r\nexport { init }"],"names":["BaiduMapProxy","instance","dotNetHelper","constructor","containerId","initArgs","this","BMapGL","Map","enableScrollWheelZoom","setMaxZoom","maxZoom","setMinZoom","minZoom","centerAndZoom","center","zoom","setMapType","mapTypeString","trafficOn","setTrafficOn","dark","setMapStyleV2","styleId","darkThemeId","setDotNetObjectReference","events","forEach","event_name","addEventListener","async","e","invokeMethodAsync","latlng","point","pixel","getOriginInstance","getCenter","setZoom","getZoom","disableScrollWheelZoom","mapType","getMapType","setTrafficOff","options","panTo","addOverlay","overlay","removeOverlay","clearOverlays","destroy","addCircle","circle","c","Circle","radius","strokeColor","strokeWeight","strokeOpacity","strokeStyle","fillColor","fillOpacity","addMarker","marker","m","Marker","offset","rotation","title","addLabel","label","l","Label","content","position","addPolyline","polyline","points","pl","Polyline","geodesic","clip","toBMapGLPoint","Point","lng","lat","addPolygon","polygon","bmapPoints","element","push","pg","Polygon","contains","os","getOverlays","index","length","init"],"mappings":"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"}