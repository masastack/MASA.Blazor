{"version":3,"file":"monaco-editor-proxy.js","sources":["../../../../BlazorComponent/src/Component/BlazorComponent.Web/src/proxies/monaco-editor/index.ts"],"sourcesContent":["import { editor as MonacoEditor } from \"monaco-editor\";\r\n\r\ninterface Monaco {\r\n  editor: typeof MonacoEditor;\r\n  KeyMod: any;\r\n  KeyCode: any;\r\n}\r\n\r\ndeclare const monaco: Monaco;\r\n\r\nfunction init(id: string, options: MonacoEditor.IStandaloneEditorConstructionOptions, dotNetHelper) {\r\n  const editor = monaco.editor.create(document.getElementById(id), options);\r\n  editor.onDidChangeModelContent(()=> {\r\n    dotNetHelper.invokeMethodAsync(\"OnChange\", editor.getValue());\r\n  });\r\n\r\n  return editor;\r\n}\r\n\r\nfunction defineTheme(name, value: MonacoEditor.IStandaloneThemeData) {\r\n  monaco.editor.defineTheme(name, value)\r\n}\r\n\r\nfunction remeasureFonts() {\r\n  monaco.editor.remeasureFonts();\r\n}\r\n\r\nfunction addKeybindingRules(rules: MonacoEditor.IKeybindingRule[]) {\r\n  monaco.editor.addKeybindingRules(rules);\r\n}\r\n\r\nfunction addKeybindingRule(rule: MonacoEditor.IKeybindingRule) {\r\n  monaco.editor.addKeybindingRule(rule);\r\n}\r\n\r\nfunction setTheme(theme: string) {\r\n  monaco.editor.setTheme(theme);\r\n}\r\n\r\nfunction colorizeElement(id: string, options: any) {\r\n  monaco.editor.colorizeElement(document.getElementById(id), options);\r\n}\r\n\r\nfunction getModels() {\r\n  return monaco.editor.getModels();\r\n}\r\n\r\nfunction updateOptions(instance: MonacoEditor.IStandaloneCodeEditor, options: any) {\r\n  instance.updateOptions(options);\r\n}\r\n\r\nfunction addCommand(\r\n  instance: MonacoEditor.IStandaloneCodeEditor,\r\n  keybinding: number,\r\n  dotNetHelper,\r\n  method: string\r\n) {\r\n  instance.addCommand(keybinding, function () {\r\n    dotNetHelper.invokeMethodAsync(method);\r\n  });\r\n}\r\n\r\nfunction getModel(instance: MonacoEditor.IStandaloneCodeEditor) {\r\n  return instance.getModel();\r\n}\r\n\r\nfunction getValue(instance: MonacoEditor.IStandaloneCodeEditor) {\r\n  return instance.getValue();\r\n}\r\n\r\nfunction setValue(instance: MonacoEditor.IStandaloneCodeEditor, value) {\r\n  instance.setValue(value);\r\n}\r\n\r\nfunction setModelLanguage(instance: MonacoEditor.IStandaloneCodeEditor, languageId: string) {\r\n  monaco.editor.setModelLanguage(instance.getModel(), languageId);\r\n}\r\n\r\nexport {\r\n  init,\r\n  getValue,\r\n  setValue,\r\n  setTheme,\r\n  getModels,\r\n  getModel,\r\n  setModelLanguage,\r\n  remeasureFonts,\r\n  addKeybindingRules,\r\n  colorizeElement,\r\n  defineTheme,\r\n  addCommand,\r\n  updateOptions,\r\n  addKeybindingRule\r\n}"],"names":["init","id","options","dotNetHelper","editor","monaco","create","document","getElementById","onDidChangeModelContent","invokeMethodAsync","getValue","defineTheme","name","value","remeasureFonts","addKeybindingRules","rules","addKeybindingRule","rule","setTheme","theme","colorizeElement","getModels","updateOptions","instance","addCommand","keybinding","method","getModel","setValue","setModelLanguage","languageId"],"mappings":"AAUA,SAASA,EAAKC,EAAYC,EAA4DC,GACpF,MAAMC,EAASC,OAAOD,OAAOE,OAAOC,SAASC,eAAeP,GAAKC,GAKjE,OAJAE,EAAOK,yBAAwB,KAC7BN,EAAaO,kBAAkB,WAAYN,EAAOO,WAAW,IAGxDP,CACT,CAEA,SAASQ,EAAYC,EAAMC,GACzBT,OAAOD,OAAOQ,YAAYC,EAAMC,EAClC,CAEA,SAASC,IACPV,OAAOD,OAAOW,gBAChB,CAEA,SAASC,EAAmBC,GAC1BZ,OAAOD,OAAOY,mBAAmBC,EACnC,CAEA,SAASC,EAAkBC,GACzBd,OAAOD,OAAOc,kBAAkBC,EAClC,CAEA,SAASC,EAASC,GAChBhB,OAAOD,OAAOgB,SAASC,EACzB,CAEA,SAASC,EAAgBrB,EAAYC,GACnCG,OAAOD,OAAOkB,gBAAgBf,SAASC,eAAeP,GAAKC,EAC7D,CAEA,SAASqB,IACP,OAAOlB,OAAOD,OAAOmB,WACvB,CAEA,SAASC,EAAcC,EAA8CvB,GACnEuB,EAASD,cAActB,EACzB,CAEA,SAASwB,EACPD,EACAE,EACAxB,EACAyB,GAEAH,EAASC,WAAWC,GAAY,WAC9BxB,EAAaO,kBAAkBkB,EACjC,GACF,CAEA,SAASC,EAASJ,GAChB,OAAOA,EAASI,UAClB,CAEA,SAASlB,EAASc,GAChB,OAAOA,EAASd,UAClB,CAEA,SAASmB,EAASL,EAA8CX,GAC9DW,EAASK,SAAShB,EACpB,CAEA,SAASiB,EAAiBN,EAA8CO,GACtE3B,OAAOD,OAAO2B,iBAAiBN,EAASI,WAAYG,EACtD"}