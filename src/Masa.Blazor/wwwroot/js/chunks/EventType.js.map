{"version":3,"file":"EventType.js","sources":["../../../../Masa.Blazor.JS/src/events/EventType.ts"],"sourcesContent":["// see https://github.com/dotnet/aspnetcore/blob/main/src/Components/Web.JS/src/Rendering/Events/EventTypes.ts\r\n// updated at 2022/08/31\r\n\r\nexport const touchEvents = [\r\n  \"touchcancel\",\r\n  \"touchend\",\r\n  \"touchmove\",\r\n  \"touchenter\",\r\n  \"touchleave\",\r\n  \"touchstart\",\r\n];\r\n\r\nexport function parseMouseEvent(event: MouseEvent): Blazor.MouseEventArgs {\r\n  return {\r\n    detail: event.detail,\r\n    screenX: event.screenX,\r\n    screenY: event.screenY,\r\n    clientX: event.clientX,\r\n    clientY: event.clientY,\r\n    offsetX: event.offsetX,\r\n    offsetY: event.offsetY,\r\n    pageX: event.pageX,\r\n    pageY: event.pageY,\r\n    button: event.button,\r\n    buttons: event.buttons,\r\n    ctrlKey: event.ctrlKey,\r\n    shiftKey: event.shiftKey,\r\n    altKey: event.altKey,\r\n    metaKey: event.metaKey,\r\n    type: event.type,\r\n  } as Blazor.MouseEventArgs;\r\n}\r\n\r\nexport function parseTouchEvent(event: TouchEvent): Blazor.TouchEventArgs {\r\n  return {\r\n    detail: event.detail,\r\n    touches: parseTouch(event.touches),\r\n    targetTouches: parseTouch(event.targetTouches),\r\n    changedTouches: parseTouch(event.changedTouches),\r\n    ctrlKey: event.ctrlKey,\r\n    shiftKey: event.shiftKey,\r\n    altKey: event.altKey,\r\n    metaKey: event.metaKey,\r\n    type: event.type,\r\n  };\r\n}\r\n\r\nfunction parseTouch(touchList: TouchList): Blazor.TouchPoint[] {\r\n  const touches: Blazor.TouchPoint[] = [];\r\n\r\n  for (let i = 0; i < touchList.length; i++) {\r\n    const touch = touchList[i];\r\n    touches.push({\r\n      identifier: touch.identifier,\r\n      clientX: touch.clientX,\r\n      clientY: touch.clientY,\r\n      screenX: touch.screenX,\r\n      screenY: touch.screenY,\r\n      pageX: touch.pageX,\r\n      pageY: touch.pageY,\r\n    });\r\n  }\r\n  return touches;\r\n}\r\n\r\nexport function parseChangeEvent(event: Event): Blazor.ChangeEventArgs {\r\n  const element = event.target as Element;\r\n  if (isTimeBasedInput(element)) {\r\n    const normalizedValue = normalizeTimeBasedValue(element);\r\n    return { value: normalizedValue };\r\n  } else if (isMultipleSelectInput(element)) {\r\n    const selectElement = element as HTMLSelectElement;\r\n    const selectedValues = Array.from(selectElement.options)\r\n      .filter((option) => option.selected)\r\n      .map((option) => option.value);\r\n    return { value: selectedValues };\r\n  } else {\r\n    const targetIsCheckbox = isCheckbox(element);\r\n    const newValue = targetIsCheckbox ? !!element[\"checked\"] : element[\"value\"];\r\n    return { value: newValue };\r\n  }\r\n}\r\n\r\nexport function parseDragEvent(event: DragEvent): Blazor.DragEventArgs {\r\n  return {\r\n    ...parseMouseEvent(event),\r\n    dataTransfer: event.dataTransfer ? {\r\n      dropEffect: event.dataTransfer.dropEffect,\r\n      effectAllowed: event.dataTransfer.effectAllowed,\r\n      files: Array.from(event.dataTransfer.files).map(f => f.name),\r\n      items: Array.from(event.dataTransfer.items).map(i => ({ kind: i.kind, type: i.type })),\r\n      types: event.dataTransfer.types\r\n    } : null,\r\n  };\r\n}\r\n\r\nfunction isTimeBasedInput(element: Element): element is HTMLInputElement {\r\n  return timeBasedInputs.indexOf(element.getAttribute(\"type\")!) !== -1;\r\n}\r\n\r\nconst timeBasedInputs = [\"date\", \"datetime-local\", \"month\", \"time\", \"week\"];\r\n\r\nfunction normalizeTimeBasedValue(element: HTMLInputElement): string {\r\n  const value = element.value;\r\n  const type = element.type;\r\n  switch (type) {\r\n    case \"date\":\r\n    case \"month\":\r\n      return value;\r\n    case \"datetime-local\":\r\n      return value.length === 16 ? value + \":00\" : value; // Convert yyyy-MM-ddTHH:mm to yyyy-MM-ddTHH:mm:00\r\n    case \"time\":\r\n      return value.length === 5 ? value + \":00\" : value; // Convert hh:mm to hh:mm:00\r\n    case \"week\":\r\n      // For now we are not going to normalize input type week as it is not trivial\r\n      return value;\r\n  }\r\n\r\n  throw new Error(`Invalid element type '${type}'.`);\r\n}\r\n\r\nfunction isMultipleSelectInput(element: Element): element is HTMLSelectElement {\r\n  return (\r\n    element instanceof HTMLSelectElement && element.type === \"select-multiple\"\r\n  );\r\n}\r\n\r\nfunction isCheckbox(element: Element | null): boolean {\r\n  return (\r\n    !!element &&\r\n    element.tagName === \"INPUT\" &&\r\n    element.getAttribute(\"type\") === \"checkbox\"\r\n  );\r\n}\r\n"],"names":["parseMouseEvent","event","detail","screenX","screenY","clientX","clientY","offsetX","offsetY","pageX","pageY","button","buttons","ctrlKey","shiftKey","altKey","metaKey","type","parseTouchEvent","touches","parseTouch","targetTouches","changedTouches","touchList","i","length","touch","push","identifier","parseChangeEvent","element","target","timeBasedInputs","indexOf","getAttribute","isTimeBasedInput","normalizedValue","value","Error","normalizeTimeBasedValue","HTMLSelectElement","isMultipleSelectInput","selectElement","Array","from","options","filter","option","selected","map","targetIsCheckbox","tagName","isCheckbox"],"mappings":"AAYM,SAAUA,EAAgBC,GAC9B,MAAO,CACLC,OAAQD,EAAMC,OACdC,QAASF,EAAME,QACfC,QAASH,EAAMG,QACfC,QAASJ,EAAMI,QACfC,QAASL,EAAMK,QACfC,QAASN,EAAMM,QACfC,QAASP,EAAMO,QACfC,MAAOR,EAAMQ,MACbC,MAAOT,EAAMS,MACbC,OAAQV,EAAMU,OACdC,QAASX,EAAMW,QACfC,QAASZ,EAAMY,QACfC,SAAUb,EAAMa,SAChBC,OAAQd,EAAMc,OACdC,QAASf,EAAMe,QACfC,KAAMhB,EAAMgB,KAEhB,CAEM,SAAUC,EAAgBjB,GAC9B,MAAO,CACLC,OAAQD,EAAMC,OACdiB,QAASC,EAAWnB,EAAMkB,SAC1BE,cAAeD,EAAWnB,EAAMoB,eAChCC,eAAgBF,EAAWnB,EAAMqB,gBACjCT,QAASZ,EAAMY,QACfC,SAAUb,EAAMa,SAChBC,OAAQd,EAAMc,OACdC,QAASf,EAAMe,QACfC,KAAMhB,EAAMgB,KAEhB,CAEA,SAASG,EAAWG,GAClB,MAAMJ,EAA+B,GAErC,IAAK,IAAIK,EAAI,EAAGA,EAAID,EAAUE,OAAQD,IAAK,CACzC,MAAME,EAAQH,EAAUC,GACxBL,EAAQQ,KAAK,CACXC,WAAYF,EAAME,WAClBvB,QAASqB,EAAMrB,QACfC,QAASoB,EAAMpB,QACfH,QAASuB,EAAMvB,QACfC,QAASsB,EAAMtB,QACfK,MAAOiB,EAAMjB,MACbC,MAAOgB,EAAMhB,OAEhB,CACD,OAAOS,CACT,CAEM,SAAUU,EAAiB5B,GAC/B,MAAM6B,EAAU7B,EAAM8B,OACtB,GA6BF,SAA0BD,GACxB,OAAmE,IAA5DE,EAAgBC,QAAQH,EAAQI,aAAa,QACtD,CA/BMC,CAAiBL,GAAU,CAC7B,MAAMM,EAkCV,SAAiCN,GAC/B,MAAMO,EAAQP,EAAQO,MAChBpB,EAAOa,EAAQb,KACrB,OAAQA,GACN,IAAK,OACL,IAAK,QAML,IAAK,OAEH,OAAOoB,EANT,IAAK,iBACH,OAAwB,KAAjBA,EAAMZ,OAAgBY,EAAQ,MAAQA,EAC/C,IAAK,OACH,OAAwB,IAAjBA,EAAMZ,OAAeY,EAAQ,MAAQA,EAMhD,MAAM,IAAIC,MAAM,yBAAyBrB,MAC3C,CAnD4BsB,CAAwBT,GAChD,MAAO,CAAEO,MAAOD,EACjB,CAAM,GAmDT,SAA+BN,GAC7B,OACEA,aAAmBU,mBAAsC,oBAAjBV,EAAQb,IAEpD,CAvDawB,CAAsBX,GAAU,CACzC,MAAMY,EAAgBZ,EAItB,MAAO,CAAEO,MAHcM,MAAMC,KAAKF,EAAcG,SAC7CC,QAAQC,GAAWA,EAAOC,WAC1BC,KAAKF,GAAWA,EAAOV,QAE3B,CAAM,CACL,MAAMa,EAkDV,SAAoBpB,GAClB,QACIA,GACkB,UAApBA,EAAQqB,SACyB,aAAjCrB,EAAQI,aAAa,OAEzB,CAxD6BkB,CAAWtB,GAEpC,MAAO,CAAEO,MADQa,IAAqBpB,EAAiB,QAAIA,EAAe,MAE3E,CACH,CAmBA,MAAME,EAAkB,CAAC,OAAQ,iBAAkB,QAAS,OAAQ"}