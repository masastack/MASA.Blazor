{"version":3,"file":"EventType.js","sources":["../../../../Masa.Blazor.JS/src/events/EventType.ts"],"sourcesContent":["// see https://github.com/dotnet/aspnetcore/blob/main/src/Components/Web.JS/src/Rendering/Events/EventTypes.ts\r\n// updated at 2022/08/31\r\n\r\nexport const touchEvents = [\r\n  \"touchcancel\",\r\n  \"touchend\",\r\n  \"touchmove\",\r\n  \"touchenter\",\r\n  \"touchleave\",\r\n  \"touchstart\",\r\n];\r\n\r\nexport function parseMouseEvent(event: MouseEvent): Blazor.MouseEventArgs {\r\n  return {\r\n    detail: event.detail,\r\n    screenX: event.screenX,\r\n    screenY: event.screenY,\r\n    clientX: event.clientX,\r\n    clientY: event.clientY,\r\n    offsetX: event.offsetX,\r\n    offsetY: event.offsetY,\r\n    pageX: event.pageX,\r\n    pageY: event.pageY,\r\n    button: event.button,\r\n    buttons: event.buttons,\r\n    ctrlKey: event.ctrlKey,\r\n    shiftKey: event.shiftKey,\r\n    altKey: event.altKey,\r\n    metaKey: event.metaKey,\r\n    type: event.type,\r\n  } as Blazor.MouseEventArgs;\r\n}\r\n\r\nexport function parseTouchEvent(event: TouchEvent): Blazor.TouchEventArgs {\r\n  return {\r\n    detail: event.detail,\r\n    touches: parseTouch(event.touches),\r\n    targetTouches: parseTouch(event.targetTouches),\r\n    changedTouches: parseTouch(event.changedTouches),\r\n    ctrlKey: event.ctrlKey,\r\n    shiftKey: event.shiftKey,\r\n    altKey: event.altKey,\r\n    metaKey: event.metaKey,\r\n    type: event.type,\r\n  };\r\n}\r\n\r\nfunction parseTouch(touchList: TouchList): Blazor.TouchPoint[] {\r\n  const touches: Blazor.TouchPoint[] = [];\r\n\r\n  for (let i = 0; i < touchList.length; i++) {\r\n    const touch = touchList[i];\r\n    touches.push({\r\n      identifier: touch.identifier,\r\n      clientX: touch.clientX,\r\n      clientY: touch.clientY,\r\n      screenX: touch.screenX,\r\n      screenY: touch.screenY,\r\n      pageX: touch.pageX,\r\n      pageY: touch.pageY,\r\n    });\r\n  }\r\n  return touches;\r\n}\r\n\r\nexport function parseChangeEvent(event: Event): Blazor.ChangeEventArgs {\r\n  const element = event.target as Element;\r\n  if (isTimeBasedInput(element)) {\r\n    const normalizedValue = normalizeTimeBasedValue(element);\r\n    return { value: normalizedValue };\r\n  } else if (isMultipleSelectInput(element)) {\r\n    const selectElement = element as HTMLSelectElement;\r\n    const selectedValues = Array.from(selectElement.options)\r\n      .filter((option) => option.selected)\r\n      .map((option) => option.value);\r\n    return { value: selectedValues };\r\n  } else {\r\n    const targetIsCheckbox = isCheckbox(element);\r\n    const newValue = targetIsCheckbox ? !!element[\"checked\"] : element[\"value\"];\r\n    return { value: newValue };\r\n  }\r\n}\r\n\r\nexport function parseDragEvent(event: DragEvent): Blazor.DragEventArgs {\r\n  return {\r\n    ...parseMouseEvent(event),\r\n    dataTransfer: event.dataTransfer ? {\r\n      dropEffect: event.dataTransfer.dropEffect,\r\n      effectAllowed: event.dataTransfer.effectAllowed,\r\n      files: Array.from(event.dataTransfer.files).map(f => f.name),\r\n      items: Array.from(event.dataTransfer.items).map(i => ({ kind: i.kind, type: i.type })),\r\n      types: event.dataTransfer.types\r\n    } : null,\r\n  };\r\n}\r\n\r\nfunction isTimeBasedInput(element: Element): element is HTMLInputElement {\r\n  return timeBasedInputs.indexOf(element.getAttribute(\"type\")!) !== -1;\r\n}\r\n\r\nconst timeBasedInputs = [\"date\", \"datetime-local\", \"month\", \"time\", \"week\"];\r\n\r\nfunction normalizeTimeBasedValue(element: HTMLInputElement): string {\r\n  const value = element.value;\r\n  const type = element.type;\r\n  switch (type) {\r\n    case \"date\":\r\n    case \"month\":\r\n      return value;\r\n    case \"datetime-local\":\r\n      return value.length === 16 ? value + \":00\" : value; // Convert yyyy-MM-ddTHH:mm to yyyy-MM-ddTHH:mm:00\r\n    case \"time\":\r\n      return value.length === 5 ? value + \":00\" : value; // Convert hh:mm to hh:mm:00\r\n    case \"week\":\r\n      // For now we are not going to normalize input type week as it is not trivial\r\n      return value;\r\n  }\r\n\r\n  throw new Error(`Invalid element type '${type}'.`);\r\n}\r\n\r\nfunction isMultipleSelectInput(element: Element): element is HTMLSelectElement {\r\n  return (\r\n    element instanceof HTMLSelectElement && element.type === \"select-multiple\"\r\n  );\r\n}\r\n\r\nfunction isCheckbox(element: Element | null): boolean {\r\n  return (\r\n    !!element &&\r\n    element.tagName === \"INPUT\" &&\r\n    element.getAttribute(\"type\") === \"checkbox\"\r\n  );\r\n}\r\n"],"names":[],"mappings":"AAAA;AAYM,SAAU,eAAe,CAAC,KAAiB,EAAA;IAC/C,OAAO;QACL,MAAM,EAAE,KAAK,CAAC,MAAM;QACpB,OAAO,EAAE,KAAK,CAAC,OAAO;QACtB,OAAO,EAAE,KAAK,CAAC,OAAO;QACtB,OAAO,EAAE,KAAK,CAAC,OAAO;QACtB,OAAO,EAAE,KAAK,CAAC,OAAO;QACtB,OAAO,EAAE,KAAK,CAAC,OAAO;QACtB,OAAO,EAAE,KAAK,CAAC,OAAO;QACtB,KAAK,EAAE,KAAK,CAAC,KAAK;QAClB,KAAK,EAAE,KAAK,CAAC,KAAK;QAClB,MAAM,EAAE,KAAK,CAAC,MAAM;QACpB,OAAO,EAAE,KAAK,CAAC,OAAO;QACtB,OAAO,EAAE,KAAK,CAAC,OAAO;QACtB,QAAQ,EAAE,KAAK,CAAC,QAAQ;QACxB,MAAM,EAAE,KAAK,CAAC,MAAM;QACpB,OAAO,EAAE,KAAK,CAAC,OAAO;QACtB,IAAI,EAAE,KAAK,CAAC,IAAI;KACQ,CAAC;AAC7B,CAAC;AAEK,SAAU,eAAe,CAAC,KAAiB,EAAA;IAC/C,OAAO;QACL,MAAM,EAAE,KAAK,CAAC,MAAM;AACpB,QAAA,OAAO,EAAE,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC;AAClC,QAAA,aAAa,EAAE,UAAU,CAAC,KAAK,CAAC,aAAa,CAAC;AAC9C,QAAA,cAAc,EAAE,UAAU,CAAC,KAAK,CAAC,cAAc,CAAC;QAChD,OAAO,EAAE,KAAK,CAAC,OAAO;QACtB,QAAQ,EAAE,KAAK,CAAC,QAAQ;QACxB,MAAM,EAAE,KAAK,CAAC,MAAM;QACpB,OAAO,EAAE,KAAK,CAAC,OAAO;QACtB,IAAI,EAAE,KAAK,CAAC,IAAI;KACjB,CAAC;AACJ,CAAC;AAED,SAAS,UAAU,CAAC,SAAoB,EAAA;IACtC,MAAM,OAAO,GAAwB,EAAE,CAAC;AAExC,IAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACzC,QAAA,MAAM,KAAK,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;QAC3B,OAAO,CAAC,IAAI,CAAC;YACX,UAAU,EAAE,KAAK,CAAC,UAAU;YAC5B,OAAO,EAAE,KAAK,CAAC,OAAO;YACtB,OAAO,EAAE,KAAK,CAAC,OAAO;YACtB,OAAO,EAAE,KAAK,CAAC,OAAO;YACtB,OAAO,EAAE,KAAK,CAAC,OAAO;YACtB,KAAK,EAAE,KAAK,CAAC,KAAK;YAClB,KAAK,EAAE,KAAK,CAAC,KAAK;AACnB,SAAA,CAAC,CAAC;AACJ,KAAA;AACD,IAAA,OAAO,OAAO,CAAC;AACjB,CAAC;AAEK,SAAU,gBAAgB,CAAC,KAAY,EAAA;AAC3C,IAAA,MAAM,OAAO,GAAG,KAAK,CAAC,MAAiB,CAAC;AACxC,IAAA,IAAI,gBAAgB,CAAC,OAAO,CAAC,EAAE;AAC7B,QAAA,MAAM,eAAe,GAAG,uBAAuB,CAAC,OAAO,CAAC,CAAC;AACzD,QAAA,OAAO,EAAE,KAAK,EAAE,eAAe,EAAE,CAAC;AACnC,KAAA;AAAM,SAAA,IAAI,qBAAqB,CAAC,OAAO,CAAC,EAAE;QACzC,MAAM,aAAa,GAAG,OAA4B,CAAC;QACnD,MAAM,cAAc,GAAG,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC;aACrD,MAAM,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,QAAQ,CAAC;aACnC,GAAG,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,KAAK,CAAC,CAAC;AACjC,QAAA,OAAO,EAAE,KAAK,EAAE,cAAc,EAAE,CAAC;AAClC,KAAA;AAAM,SAAA;AACL,QAAA,MAAM,gBAAgB,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC;AAC7C,QAAA,MAAM,QAAQ,GAAG,gBAAgB,GAAG,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAC5E,QAAA,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC;AAC5B,KAAA;AACH,CAAC;AAeD,SAAS,gBAAgB,CAAC,OAAgB,EAAA;AACxC,IAAA,OAAO,eAAe,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,MAAM,CAAE,CAAC,KAAK,CAAC,CAAC,CAAC;AACvE,CAAC;AAED,MAAM,eAAe,GAAG,CAAC,MAAM,EAAE,gBAAgB,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;AAE5E,SAAS,uBAAuB,CAAC,OAAyB,EAAA;AACxD,IAAA,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;AAC5B,IAAA,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;AAC1B,IAAA,QAAQ,IAAI;AACV,QAAA,KAAK,MAAM,CAAC;AACZ,QAAA,KAAK,OAAO;AACV,YAAA,OAAO,KAAK,CAAC;AACf,QAAA,KAAK,gBAAgB;AACnB,YAAA,OAAO,KAAK,CAAC,MAAM,KAAK,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC;AACrD,QAAA,KAAK,MAAM;AACT,YAAA,OAAO,KAAK,CAAC,MAAM,KAAK,CAAC,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC;AACpD,QAAA,KAAK,MAAM;;AAET,YAAA,OAAO,KAAK,CAAC;AAChB,KAAA;AAED,IAAA,MAAM,IAAI,KAAK,CAAC,yBAAyB,IAAI,CAAA,EAAA,CAAI,CAAC,CAAC;AACrD,CAAC;AAED,SAAS,qBAAqB,CAAC,OAAgB,EAAA;IAC7C,QACE,OAAO,YAAY,iBAAiB,IAAI,OAAO,CAAC,IAAI,KAAK,iBAAiB,EAC1E;AACJ,CAAC;AAED,SAAS,UAAU,CAAC,OAAuB,EAAA;IACzC,QACE,CAAC,CAAC,OAAO;QACT,OAAO,CAAC,OAAO,KAAK,OAAO;QAC3B,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,UAAU,EAC3C;AACJ;;;;"}