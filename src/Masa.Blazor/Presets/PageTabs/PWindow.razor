@using Microsoft.AspNetCore.Components.Routing
@implements IAsyncDisposable
@namespace Masa.Blazor.Presets

<MWindow Value="@_currentAbsolutePath">
    @foreach (var path in _absolutePaths)
    {
        <MWindowItem Transition="" Value="@path" @key="path">
            <PWindowContent>
                @ChildContent
            </PWindowContent>
        </MWindowItem>
    }
</MWindow>

@code {

    [Inject]
    private NavigationManager? NavigationManager { get; set; }

    [CascadingParameter]
    private PPageTabs? ContainerPageTabs { get; set; }

    [Parameter]
    public PPageTabs? PageTabs { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private readonly List<string> _absolutePaths = new();

    private string? _currentAbsolutePath;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        _currentAbsolutePath = NavigationManager!.GetAbsolutePath();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        var absolutePath = NavigationManager!.GetAbsolutePath();
        if (!_absolutePaths.Contains(absolutePath))
        {
            _absolutePaths.Add(absolutePath);
        }

        if (ContainerPageTabs != null)
        {
            ContainerPageTabs.TabClosed += PageTabsOnTabClosed;
            ContainerPageTabs.TabReload += PageTabsOnTabReload;
            ContainerPageTabs.TabsUpdated += PageTabsOnTabsUpdated;
        }

        NavigationManager!.LocationChanged += NavigationManagerOnLocationChanged;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            if (PageTabs != null)
            {
                PageTabs.TabClosed += PageTabsOnTabClosed;
                PageTabs.TabReload += PageTabsOnTabReload;
                PageTabs.TabsUpdated += PageTabsOnTabsUpdated;
            }
        }
    }

    private void PageTabsOnTabClosed(object? sender, string e)
    {
        InvokeAsync(() =>
        {
            _absolutePaths.Remove(e);
            StateHasChanged();
        });
    }

    private void PageTabsOnTabReload(object? sender, string e)
    {
        InvokeAsync(() =>
        {
            _absolutePaths.Remove(e);
            StateHasChanged();
            _absolutePaths.Add(e);
            StateHasChanged();
        });
    }

    private void PageTabsOnTabsUpdated(object? sender, string[] paths)
    {
        InvokeAsync(() =>
        {
            _absolutePaths.RemoveAll(p => !paths.Contains(p));
            StateHasChanged();
        });
    }

    private void NavigationManagerOnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (_absolutePaths.Contains(_currentAbsolutePath!))
        {
            return;
        }

        InvokeAsync(() =>
        {
            _absolutePaths.Add(_currentAbsolutePath!);
            StateHasChanged();
        });
    }

    public async ValueTask DisposeAsync()
    {
        if (PageTabs != null)
        {
            PageTabs.TabClosed -= PageTabsOnTabClosed;
            PageTabs.TabReload -= PageTabsOnTabReload;
            PageTabs.TabsUpdated -= PageTabsOnTabsUpdated;
        }

        if (ContainerPageTabs != null)
        {
            ContainerPageTabs.TabClosed -= PageTabsOnTabClosed;
            ContainerPageTabs.TabReload -= PageTabsOnTabReload;
            ContainerPageTabs.TabsUpdated -= PageTabsOnTabsUpdated;
        }

        NavigationManager!.LocationChanged -= NavigationManagerOnLocationChanged;
    }

}
