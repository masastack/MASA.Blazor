@namespace Masa.Blazor.Components.TemplateTable.FilterDialogs

<PModal @bind-Value="dialog"
        Width="640"
        BodyStyle="min-height: 180px"
        Title="Filters"
        Persistent
        OnSave="HandleOnSave">

    @for (int i = 0; i < _filters.Count; i++)
    {
        var index = i;
        var filter = _filters[index];

        <div class="d-flex align-center mb-2">
            <div style="width: 86px; flex: none;"
                 class="mr-2 text-right">
                @if (index == 0)
                {
                    <span>When</span>
                }
                else if (index == 1)
                {
                    <MSelect @bind-Value="@_operator"
                             Items="@Operators"
                             ItemText="u => u"
                             ItemValue="u => u"
                             Class="filter-operator"
                             Dense
                             Outlined
                             HideDetails="@true">
                    </MSelect>
                }
                else
                {
                    <span>@_operator</span>
                }
            </div>

            <MSelect @bind-Value="@filter.ColumnId"
                     Items="_computedColumns"
                     ItemText="u => u.Name"
                     ItemValue="u => u.Id"
                     Label="Field"
                     TItem="ColumnInfo"
                     TItemValue="string"
                     TValue="string"
                     Class="mr-2"
                     Style="max-width: 150px"
                     Dense
                     Filled
                     HideDetails="@true"
                     OnSelect="@filter.OnSelect">
            </MSelect>
            <MSelect @bind-Value="@filter.Func"
                     Items="@filter.FuncList"
                     ItemText="u => u.ToString()"
                     ItemValue="u => u"
                     Label="Func"
                     Class="mr-2"
                     Style="max-width: 150px"
                     Dense
                     Filled
                     HideDetails="@true">
            </MSelect>
            @if ((filter.Func is StandardFilter.Equals or StandardFilter.NotEquals) && filter.SelectOptions is not null)
            {
                <MSelect @bind-Value="@filter.Expected"
                         Items="@filter.SelectOptions"
                         ItemText="u => u.Label"
                         ItemValue="u => u.Value"
                         Label="Expected"
                         Class="mr-2"
                         Style="max-width: 150px"
                         Dense
                         Filled
                         HideDetails="@true">
                </MSelect>
            }
            else if (!_noExpectedFuncs.Contains(filter.Func))
            {
                <MTextField @bind-Value="@filter.Expected"
                            Label="Expected"
                            Class="mr-2"
                            Style="max-width: 150px"
                            Filled
                            Dense
                            HideDetails="@true">
                </MTextField>
            }

            <MSpacer/>

            @if (filter.Persistent)
            {
                <div style="min-width: 36px;"></div>
            }
            else
            {
                <MButton IconName="mdi-close"
                         OnClick="@(() => RemoveFilter(filter))">
                </MButton>
            }
        </div>
    }

    <div class="text-right" style="margin-right: 44px;">
        <MButton Text
                 LeftIconName="mdi-plus"
                 Color="primary"
                 OnClick="@AddNewFilter">
            Add filter
        </MButton>
    </div>
</PModal>

@code {

    [Parameter] public IList<ColumnInfo> Columns { get; set; } = [];

    /// <summary>
    /// Use this to filter out hidden columns when selecting columns.
    /// </summary>
    [Parameter] public HashSet<string> HiddenColumnIds { get; set; } = [];

    [Parameter] public View? ActiveView { get; set; }

    [Parameter] public EventCallback<Filter> OnSave { get; set; }

    private static readonly IList<string> Operators = ["and", "or"];

    private static readonly HashSet<StandardFilter> _noExpectedFuncs =
    [
        StandardFilter.Set,
        StandardFilter.NotSet,
        StandardFilter.True,
        StandardFilter.False
    ];

    private HashSet<string> _prevHiddenColumnIds = [];
    private Guid _prevActiveViewId;

    private IList<ColumnInfo> _computedColumns = [];

    /// <summary>
    /// accepted values: "and", "or"
    /// </summary>
    private string _operator = "and";

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (ActiveView is not null && (_prevActiveViewId != ActiveView.Id || !_prevHiddenColumnIds.SetEquals(HiddenColumnIds)))
        {
            _prevActiveViewId = ActiveView.Id;
            _prevHiddenColumnIds = HiddenColumnIds;
            _computedColumns = Columns.Where(u => !HiddenColumnIds.Contains(u.Id)).Where(u => u.Type != ColumnType.Actions).ToList();

            _filters.Clear();
            foreach (var option in ActiveView.Filter.Options)
            {
                var column = Columns.FirstOrDefault(u => u.Id == option.ColumnId);
                if (column is null)
                {
                    continue;
                }

                var filterOption = new FilterModel(column)
                {
                    Func = option.Func,
                    Expected = option.Expected,
                    Persistent = option.Persistent
                };

                _filters.Add(filterOption);
            }

            _operator = ActiveView.Filter.Operator == FilterOperator.And ? "and" : "or";
        }
    }

    private bool dialog;

    private readonly List<FilterModel> _filters = [];

    internal void Open()
    {
        dialog = true;
        StateHasChanged();
    }

    private void AddNewFilter()
    {
        if (Columns.Count == 0)
        {
            return;
        }

        var filter = new FilterModel(Columns.First());

        _filters.Add(filter);
    }

    private void RemoveFilter(FilterModel filterModel)
    {
        if (filterModel.Persistent)
        {
            return;
        }

        _filters.Remove(filterModel);
    }

    private void OnMultiSelect(FilterModel filter)
    {
        filter.Expected = "{ in: [" + string.Join(", ", filter.MultiSelect.Select(u => $"\"{u}\"")) + "]}";
    }

    private void HandleOnSave()
    {
        dialog = false;

        var request = new Filter
        {
            Options = _filters.Select(u => u.ToFilterOption()).ToList(),
            Operator = _operator == "and" ? FilterOperator.And : FilterOperator.Or
        };

        OnSave.InvokeAsync(request);
    }

}