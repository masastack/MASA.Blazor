@namespace Masa.Blazor
@using Masa.Blazor.SourceGenerated
@inherits MasaComponentBase

<div id="@Id"
     class="@GetClass()"
     style="@GetStyle()"
     @attributes="Attributes"
     @ref="Ref">
    <div class="@WrapperElement" @ref="_wrapperEl">
        @GenActionContent(LeftContent, LeftElement.Name)
        @ChildContent
        @GenActionContent(RightContent, RightElement.Name)
    </div>
</div>

@code {

    private RenderFragment GenActionContent(RenderFragment<SwipeCellActionContext>? content, string? css) => __builder =>
    {
        if (content == null)
        {
            return;
        }

        <div class="@css" @onclick="OnClick" @onclick:stopPropagation>
            <MDefaultsProvider Defaults="@_actionDefaults">
                @content(_actionContext)
            </MDefaultsProvider>
        </div>
    };

    [Parameter] public bool CloseOnClick { get; set; } = true;
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public RenderFragment<SwipeCellActionContext>? LeftContent { get; set; }
    [Parameter] public RenderFragment<SwipeCellActionContext>? RightContent { get; set; }

    private static readonly Block Block = new("m-swipe-cell");
    private static readonly Element WrapperElement = Block.Element("wrapper");
    private static readonly Element LeftElement = Block.Element("left");
    private static readonly Element RightElement = Block.Element("right");

    private ElementReference _wrapperEl;
    private IJSObjectReference? _useTouch;

    private SwipeCellActionContext _actionContext = null!;

    private readonly IDictionary<string, IDictionary<string, object>> _actionDefaults = new Dictionary<string, IDictionary<string, object>>
    {
        [nameof(MButton)] = new Dictionary<string, object>
        {
            [nameof(MButton.Depressed)] = true,
            [nameof(MButton.Tile)] = true,
            [nameof(MButton.Height)] = (StringNumber)"100%"
        }
    };

    protected override IEnumerable<string?> BuildComponentClass()
    {
        yield return Block.Name;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            var import = await Js.InvokeAsync<IJSObjectReference>("import", $"./_content/Masa.Blazor/js/{JSManifest.SwipeCellIndexJs}");
            _useTouch = await import.InvokeAsync<IJSObjectReference>("useTouch", _wrapperEl, new
            {
                threshold = 0.3,
                duration = 600
            });
            await _useTouch.InvokeVoidAsync("bindEvents");
            _actionContext = new(Close);
            await import.DisposeAsync();
        }
    }

    private void OnClick()
    {
        if (CloseOnClick)
        {
            Close();
        }
    }

    private void Close() => _useTouch?.TryInvokeVoidAsync("close");

    protected override async ValueTask DisposeAsyncCore()
    {
        await _useTouch.TryInvokeVoidAsync("unbindEvents");
        _useTouch = null;
    }

}