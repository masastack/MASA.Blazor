@inject I18n I18n
@typeparam TItem where TItem : IDefaultItem<TItem>

<MListGroup Group="@GenGroup(Item.Children)"
            Class="m-list-group--default"
            NoAction
            SubGroup="SubGroup">
    <ActivatorContent>
        <MListItemContent>
            @if (Item.Title is not null)
            {
                <MListItemTitle>@I18n.T(Item.Title)</MListItemTitle>
            }             
        </MListItemContent>
        @if (HasTag)
        {
            <ColorChip Color="@AppService.GetColor(Item!.Tag!)" Small>@I18n.T($"tag.{Item.Tag}")</ColorChip>
        }
    </ActivatorContent>
    <PrependIconContent>
        <MIcon Color="primary">@(string.IsNullOrWhiteSpace(Item.Icon) ? "mdi-menu-down" : Item.Icon)</MIcon>
    </PrependIconContent>
    <ChildContent>
        @foreach (var child in Item.Children!)
        {
            if (child.Heading is not null)
            {
                <MSubheader Class="text--primary font-weight-black text-uppercase" Inset>@child.Heading</MSubheader>
            }
            else if (child.Divider)
            {
                <MDivider Inset Class="mt-3 mb-2 ml-16"></MDivider>
            }
            else if (child.HasChildren())
            {
                <DefaultListGroup Item="@child" SubGroup></DefaultListGroup>
            }
            else
            {
                <DefaultListItem Item="child"></DefaultListItem>
            }
        }
    </ChildContent>
</MListGroup>

@code {

    [Parameter]
    public string? Icon { get; set; }

    [Parameter, EditorRequired]
    public TItem Item { get; set; }

    [Parameter]
    public bool SubGroup { get; set; }

    bool HasTag => !string.IsNullOrEmpty(Item?.Tag);

    List<string> GenGroup(List<TItem>? items)
    {
        if (items == null || !items.Any()) return new List<string>();

        var groups = new List<string>();

        foreach (var item in items)
        {
            groups.AddRange(GenGroup(item.Children));
            if (item.HasChildren()) continue;
            groups.Add(item.Href);
        }

        return groups;
    }

}
