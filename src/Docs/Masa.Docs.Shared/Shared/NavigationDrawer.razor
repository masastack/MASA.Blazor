@using System.Text;
@inject AppService AppService
@inject DocService DocService
@inject MasaBlazor MasaBlazor
@implements IDisposable

<MNavigationDrawer Value="Value"
                   ValueChanged="ValueChanged"
                   Id="nav-drawer"
                   Right="RTL"
                   App
                   Floating
                   Width="300">
    <PrependContent>
        @if (MasaBlazor.Breakpoint.LgAndUp)
        {
            <DefaultDrawerPrepend />
        }
    </PrependContent>
    <ChildContent>
        <DefaultList Linkage Items="Navs" />
        <div class=pt-12></div>
    </ChildContent>
</MNavigationDrawer>


@code {

    [Inject]
    public NavigationManager NavigationManager { get; set; } = null!;

    [Parameter]
    public bool RTL { get; set; }

    [CascadingParameter]
    public CultureInfo Culture { get; set; } = null!;

    [Parameter]
    public bool Value { get; set; }

    [Parameter]
    public EventCallback<bool> ValueChanged { get; set; }

    private string? _lastSecondSegment;

    private Dictionary<string, string> _projectMap = new();

    private List<NavItem> Navs { get; set; } = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        NavigationManager.LocationChanged += NavigationManagerOnLocationChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            var segments = NavigationManager.GetSegments();
            var secondSegment = segments.ElementAtOrDefault(1);
            secondSegment = secondSegment?.TrimEnd('/');

            _lastSecondSegment = secondSegment;

            _projectMap = await DocService.ReadProjectMapAsync();

            if (secondSegment is null)
            {
                // TODO: overview page
            }
            else
            {
                Navs = await DocService.ReadNavsAsync(secondSegment);
                SetHref(Navs, rootSegment: secondSegment);
                StateHasChanged();
            }
        }
    }

    private async void NavigationManagerOnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        var secondSegment = NavigationManager.GetSegments().ElementAtOrDefault(1);
        secondSegment = secondSegment?.TrimEnd('/');

        if (_lastSecondSegment != secondSegment)
        {
            _lastSecondSegment = secondSegment;

            if (secondSegment is null)
            {
                // Navs.Clear();
                Navs = new();
            }
            else if (_projectMap.ContainsKey(secondSegment))
            {
                Navs = await DocService.ReadNavsAsync(secondSegment);
                SetHref(Navs, rootSegment: secondSegment);
            }

            _ = InvokeAsync(StateHasChanged);
        }
    }

    private void SetHref(List<NavItem> navItems, string? segment = null, string? rootSegment = null)
    {
        foreach (var navItem in navItems)
        {
            if (((IDefaultItem<NavItem>)navItem).HasChildren())
            {
                SetHref(navItem.Children!, navItem.Segment, rootSegment);
            }
            else
            {
                navItem.Href = $"{rootSegment}/{segment}/{navItem.Segment}";
            }
        }
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= NavigationManagerOnLocationChanged;
    }

}
