@using System.Reflection
@namespace Masa.Docs.Shared.Components

<MSheet Class="mb-9 m-example"
        Outlined
        Rounded="true">
    @*TODO: Lazy component*@

    <div style="min-height: 52px">
        <div class="text-end pa-2">
            @foreach (var tooltip in tooltips)
            {
                <AppTooltipButton Icon="@tooltip.Icon"
                                  Path="@tooltip.Path"
                                  Href="@tooltip.href"
                                  Target="@(tooltip.href != null ? "_blank" : null)"
                                  OnClick="() => tooltip.OnClick?.Invoke()" />
            }
        </div>

        <MDivider />

        <MSheet Class="pa-4" Rounded="true">
            @if (type is not null)
            {
                <DynamicComponent Type="type"></DynamicComponent>
            }
        </MSheet>

        <MDivider />

        <ExpandTransition>
            <ShowTransitionElement Value="expand">
                <MItemGroup @bind-Value="selected" Class="pa-2" Mandatory>
                    @foreach (var item in sections)
                    {
                        <MItem>
                            <MButton Class="mr-2"
                                     IsActive="@context.Active"
                                     Text
                                     OnClick="@context.Toggle">
                                @item.Language
                            </MButton>
                        </MItem>
                    }
                </MItemGroup>

                <MDivider />

                <MWindow Value="selected" Class="grey lighten-5">
                    @foreach (var item in sections)
                    {
                        <MWindowItem>
                            <Markup Code="@item.Code" Language="@item.Language" Rounded="false" />
                        </MWindowItem>
                    }
                </MWindow>

                <MDivider />
            </ShowTransitionElement>
        </ExpandTransition>
    </div>
</MSheet>

@code {

    [Inject]
    private DocService DocService { get; set; }

    [Inject]
    private NavigationManager NavigationManager { get; set; }

    [Parameter, EditorRequired]
    public string File { get; set; } = null!;

    private List<(string Icon, string Path, Action? OnClick, string? href)> tooltips = new();

    private bool dark;
    private bool expand;
    private StringNumber selected = 0;

    private Type? type;
    private List<(string Code, string Language)> sections = new();

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        ArgumentException.ThrowIfNullOrEmpty(File);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        tooltips = new()
        {
            new("mdi-invert-colors", "invert-example-colors", () => dark = !dark, null),
            new("mdi-github", "view-in-github", null, "https://github.com/BlazorComponent"), // todo:dynamic
            new("mdi-code-tags", "view-source", () => expand = !expand, null)
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            var uri = new Uri(NavigationManager.Uri);
            var category = uri.Segments[1].Replace("/", "");
            var title = uri.Segments[2].Replace("/", "");

            var executingAssemblyName = Assembly.GetExecutingAssembly().GetName().Name;
            type = Type.GetType($"{executingAssemblyName}.{File}");
            var sourceCode = await DocService.ReadExampleAsync(category, title, type.Name);

            var (razor, cs, css) = ResolveSourceCode(sourceCode);

            if (!string.IsNullOrWhiteSpace(razor))
            {
                sections.Add((razor, nameof(razor)));
            }

            if (!string.IsNullOrWhiteSpace(cs))
            {
                sections.Add((cs, nameof(cs)));
            }

            if (!string.IsNullOrWhiteSpace(css))
            {
                sections.Add((css, nameof(css)));
            }

            StateHasChanged();
        }
    }

    private static (string? Razor, string? cs, string? css) ResolveSourceCode(string sourceCode)
    {
        string? razor = null;
        string? cs = null;
        string? css = null;

        var code = sourceCode;
        var cssFrom = sourceCode.IndexOf("<style", StringComparison.Ordinal);
        var cssTo = sourceCode.IndexOf("</style>", StringComparison.Ordinal) + "</style>".Length;

        if (cssFrom > -1 && cssTo > -1)
        {
            var cssContent = sourceCode.Substring(cssFrom, cssTo - cssFrom);
            css = cssContent;

            code = code.Replace(cssContent, "");
        }

        var codeIndex = code.IndexOf("@code");
        if (codeIndex > -1)
        {
            razor = code.Substring(0, codeIndex).Trim();
            cs = code.Substring(codeIndex).Trim();
        }
        else
        {
            razor = code.Trim();
        }

        return (razor, cs, css);
    }

}
