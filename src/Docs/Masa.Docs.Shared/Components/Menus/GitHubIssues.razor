@namespace Masa.Docs.Shared.Components
@implements IDisposable;
@using System.Net.Http.Json;
@using System.Text.Json;
@using System.Text.Json.Nodes;
@using Microsoft.Extensions.Caching.Memory;

@if (_show)
{
    <div id="github-issuse" class="ml-6 mb-6 d-flex justify-space-around rounded">
        <a class="d-flex" target=_blank href="@($"https://github.com/BlazorComponent/MASA.Blazor/issues?q=is:issue+{_componentName}")">
            <MIcon Class="emphasize1-color mr-1" Size="16">mdi-plus</MIcon>
            <span>Issues</span>
        </a>
        <a class="d-flex" target=_blank href="@($"https://github.com/BlazorComponent/MASA.Blazor/issues?q=is:open+is:issue+{_componentName}")">
            <MIcon Class="mr-1" Size="16">mdi-alert-circle-outline</MIcon>
            <span>@_openCount</span>&nbsp;
            <span>Open</span>
        </a>
        <a class="d-flex" target=_blank href="@($"https://github.com/BlazorComponent/MASA.Blazor/issues?q=is:issue+is:closed+{_componentName}")">
            <MIcon Class="mr-1" Size="16">mdi-check</MIcon>
            <span>@_closeCount</span>&nbsp;
            <span>Closed</span>
        </a>
    </div>
}

@code {

    [Inject]
    public IMemoryCache MemoryCache { get; set; } = null!;

    [Inject]
    public IHttpClientFactory HttpClientFactory { get; set; } = null!;

    [Inject]
    public NavigationManager Navigation { get; set; } = null!;

    const string OPEN_ISSUES_KEY_SUFFIX = "open-issues-count";
    const string CLOSED_ISSUES_KEY_SUFFIX = "closed-issues-count";
    const string OPEN_ISSUES_URL = "search/issues?q=repo:BlazorComponent/MASA.Blazor+type:issue+state:open";
    const string CLOSED_ISSUES_URL = "search/issues?q=repo:BlazorComponent/MASA.Blazor+type:issue+state:closed";

    bool _show;
    HttpClient? _httpClient;
    string? _openCount;
    string? _closeCount;
    string? _componentName;

    protected override void OnInitialized()
    {
        Navigation.LocationChanged += HandleLocationChanged;
    }

    private async Task<string?> GetIssuesCountAsync(string url)
    {
        string? issuesCount = string.Empty;

        HttpRequestMessage requestMessage = new HttpRequestMessage(HttpMethod.Get, url);
        var response = await _httpClient!.SendAsync(requestMessage);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<JsonObject>();
            issuesCount = result?["total_count"]?.ToString();
        }

        return issuesCount;
    }

    private async Task HandleComponentIssuesCountAsync()
    {
        _httpClient = HttpClientFactory.CreateClient("github");

        _openCount = await MemoryCache.GetOrCreateAsync<string?>($"{_componentName}-{OPEN_ISSUES_KEY_SUFFIX}", entry =>
        {
            entry.AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(1);
            return GetIssuesCountAsync($"{OPEN_ISSUES_URL}+{_componentName}");
        });

        _closeCount = await MemoryCache.GetOrCreateAsync<string?>($"{_componentName}-{CLOSED_ISSUES_KEY_SUFFIX}", entry =>
        {
            entry.AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(1);
            return GetIssuesCountAsync($"{CLOSED_ISSUES_URL}+{_componentName}");
        });
    }

    private async void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (Navigation.Uri.Contains("components"))
        {
            var segment = Navigation.GetSegments();
            _componentName = segment.LastOrDefault();
            _componentName = _componentName == "all" ? null : _componentName;

            _show = true;
            await HandleComponentIssuesCountAsync();
        }
        else
        {
            _show = false;
        }

        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= HandleLocationChanged;
    }
}