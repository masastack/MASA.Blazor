@namespace Masa.Docs.Shared.Components
@using System.Net.Http.Json;
@using System.Text.Json;
@using System.Text.Json.Nodes;
@using Microsoft.Extensions.Caching.Memory

<div id="github-issuse" class="ml-6 mb-6 d-flex justify-space-around rounded">
    <a class="d-flex" target=_blank href="https://github.com/BlazorComponent/MASA.Blazor/issues?q=is:issue">
        <MIcon Class="emphasize1-color mr-1" Size="16">mdi-plus</MIcon>
        <span>Issues</span>
    </a>
    <a class="d-flex" target=_blank href="https://github.com/BlazorComponent/MASA.Blazor/issues?q=is:open+is:issue">
        <MIcon Class="mr-1" Size="16">mdi-alert-circle-outline</MIcon>
        <span>@_openCount</span>&nbsp;
        <span>Open</span>
    </a>
    <a class="d-flex" target=_blank href="https://github.com/BlazorComponent/MASA.Blazor/issues?q=is:issue+is:closed">
        <MIcon Class="mr-1" Size="16">mdi-check</MIcon>
        <span>@_closeCount</span>&nbsp;
        <span>Closed</span>
    </a>
</div>

@code {

    [Inject]
    public IMemoryCache MemoryCache { get; set; } = null!;

    [Inject]
    public IHttpClientFactory HttpClientFactory { get; set; } = null!;

    const string OPEN_ISSUES_KEY = "open-issues-count";
    const string CLOSED_ISSUES_KEY = "closed-issues-count";
    const string OPEN_ISSUES_URL = "search/issues?q=repo:BlazorComponent/MASA.Blazor+type:issue+state:open";
    const string CLOSED_ISSUES_URL = "search/issues?q=repo:BlazorComponent/MASA.Blazor+type:issue+state:closed";

    HttpClient? _httpClient;
    string? _openCount;
    string? _closeCount;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _httpClient = HttpClientFactory.CreateClient("github");

            _openCount = await MemoryCache.GetOrCreateAsync<string?>(OPEN_ISSUES_KEY, entry =>
            {
                entry.AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(1);
                return GetIssuesCountAsync(OPEN_ISSUES_URL);
            });

            _closeCount = await MemoryCache.GetOrCreateAsync<string?>(CLOSED_ISSUES_KEY, entry =>
            {
                entry.AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(1);
                return GetIssuesCountAsync(CLOSED_ISSUES_URL);
            });

            StateHasChanged();
        }
    }


    private async Task<string?> GetIssuesCountAsync(string url)
    {
        string? issuesCount = string.Empty;

        HttpRequestMessage requestMessage = new HttpRequestMessage(HttpMethod.Get, url);
        var response = await _httpClient!.SendAsync(requestMessage);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<JsonObject>();
            issuesCount = result?["total_count"]?.ToString();
        }

        return issuesCount;
    }
}