@namespace Masa.Docs.Shared.Components
@using System.Net.Http.Json;
@using System.Text.Json;
@using System.Text.Json.Nodes;

<div id="github-issuse" class="ml-6 mb-6 d-flex justify-space-around rounded">
    <a class="d-flex" target=_blank href="https://github.com/BlazorComponent/MASA.Blazor/issues?q=is:issue">
        <MIcon Class="emphasize1-color mr-1" Size="16">mdi-plus</MIcon>
        <span>Issues</span>
    </a>
    <a class="d-flex" target=_blank href="https://github.com/BlazorComponent/MASA.Blazor/issues?q=is:open+is:issue">
        <MIcon Class="mr-1" Size="16">mdi-alert-circle-outline</MIcon>
        <span>@_openCount</span>&nbsp;
        <span>Open</span>
    </a>
    <a class="d-flex" target=_blank href="https://github.com/BlazorComponent/MASA.Blazor/issues?q=is:issue+is:closed">
        <MIcon Class="mr-1" Size="16">mdi-check</MIcon>
        <span>@_closeCount</span>&nbsp;
        <span>Closed</span>
    </a>
</div>

@code {

    [Inject]
    public IMemoryCache MemoryCache { get; set; } = null!;

    const string OPEN_ISSUES_KEY = "open-issues-count";
    const string CLOSED_ISSUES_KEY = "closed-issues-count";
    static readonly HttpClient _httpClient = new() { BaseAddress = new Uri("https://api.github.com/search/issues") };
    string _openIssuesUrl = "?q=repo:BlazorComponent/MASA.Blazor+type:issue+state:open";
    string _closedIssuesUrl = "?q=repo:BlazorComponent/MASA.Blazor+type:issue+state:closed";
    string? _openCount;
    string? _closeCount;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _openCount = MemoryCache.Get<string?>(OPEN_ISSUES_KEY);
            if (string.IsNullOrWhiteSpace(_openCount))
            {
                _openCount = await GetIssuesCountAsync(_openIssuesUrl);
                MemoryCache.Set(OPEN_ISSUES_KEY, _openCount, TimeSpan.FromSeconds(55));
            }

            _closeCount = MemoryCache.Get<string?>(CLOSED_ISSUES_KEY);
            if (string.IsNullOrWhiteSpace(_closeCount))
            {
                _closeCount = await GetIssuesCountAsync(_closedIssuesUrl);
                MemoryCache.Set(CLOSED_ISSUES_KEY, _closeCount, TimeSpan.FromSeconds(55));
            }

            StateHasChanged();
        }
    }


    private async Task<string?> GetIssuesCountAsync(string url)
    {
        string? issuesCount = string.Empty;

        _httpClient.DefaultRequestHeaders.Clear();
        _httpClient.DefaultRequestHeaders.Add("User-Agent", "Other");
        HttpRequestMessage requestMessage = new HttpRequestMessage(HttpMethod.Get, url);
        var response = await _httpClient.SendAsync(requestMessage);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<JsonObject>();
            issuesCount = result?["total_count"]?.ToString();
        }

        return issuesCount;
    }
}