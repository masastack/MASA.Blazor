{
  "props": {
    "allowOverflow": "Allow the menu to overflow off the screen",
    "appendIcon": "Appends an icon to the component, uses the same syntax as [MIcon](/blazor/components/icons) ",
    "appendOuterIcon": "Appends an icon to the outside the component's input, uses same syntax as [MIcon](/blazor/components/icons) ",
    "autofocus": "Enables autofocus",
    "autoSelectFirst": "When searching, will always highlight the first option",
    "cacheItems": "Keeps a local unique copy of all items that have been passed through the `Items` prop.",
    "chips": "Changes display of selections to chips",
    "clearable": "Add input clear functionality, default icon is Material Icons **clear**",
    "clearIcon": "Applied when using `Clearable` and the input is dirty",
    "counter": "Creates counter for input length; if no number is specified, it defaults to 25. Does not apply any validation.",
    "counterValue": "",
    "debounceInterval": "",
    "deletableChips": "Adds a remove icon to selected chips",
    "error": "Puts the input in a manual error state",
    "errorCount": "The total number of errors that should display at once",
    "errorMessages": "Puts the input in an error state and passes through custom error messages. Will be combined with any validations that occur from the rules prop. This field will not trigger validation",
    "filled": "Applies the alternate filled input style",
    "filter": "The function used for filtering items",
    "fullWidth": "Designates input type as full-width",
    "hideDetails": "Hides hint and validation errors. When set to **auto** messages will be rendered only if there's a message (hint, error message, counter value etc) to display",
    "hideNoData": "Hides the menu when there are no options to show. Useful for preventing the menu from opening before results are fetched asynchronously. Also has the effect of opening the menu when the `Items` array changes if not already open.",
    "hideSelected": "Do not display in the select menu items that are already selected",
    "hint": "Hint text",
    "itemColor": "Sets color of selected items",
    "itemDisabled": "Set property of `Items` disabled value",
    "items": "",
    "itemText": "Set property of `Items` text value",
    "itemValue": "Set property of items's value - must be primitive. Dot notation is supported.",
    "label": "Sets input label",
    "loaderHeight": "Specifies the height of the loader",
    "loading": "Displays linear progress bar. Can either be a String which specifies which color is applied to the progress bar (any material color or theme color - **primary**, **secondary**, **success**, **info**, **warning**, **error**) or a Boolean which uses the component color (set by `Color` prop - if it's supported by the component) or the primary color",
    "menuProps": "Pass props through to the [MMenu](/blazor/components/menus) component.",
    "messages": "Displays a list of messages or message if using a string",
    "multiple": "Changes select to multiple. ",
    "noDataText": "Display text when there is no data",
    "noFilter": "Do not apply filtering when searching. Useful when data is being filtered server side",
    "persistentHint": "Forces hint to always be visible",
    "persistentPlaceholder": "",
    "placeholder": "Sets the inputâ€™s placeholder text",
    "prefix": "Displays prefix text",
    "prependIcon": "Prepends an icon to the component, uses the same syntax as [MIcon](/blazor/components/icons)",
    "prependInnerIcon": "Prepends an icon inside the component's input, uses the same syntax as [MIcon](/blazor/components/icons)",
    "readonly": "Puts input in readonly state",
    "reverse": "Reverses the input orientation",
    "rules": "Accepts an array of functions that take an input value as an argument and return either true / false or a string with an error message",
    "searchInput": "Search value.",
    "shaped": "Round if `Outlined` and increase **border-radius** if `Filled`. Must be used with either `Outlined` or `Filled`",
    "singleLine": "Label does not move on focus/dirty",
    "smallChips": "Changes display of selections to chips with the **small** property",
    "solo": "Changes the style of the input",
    "soloInverted": "Reduces element opacity until focused",
    "success": "Puts the input in a manual success state",
    "successMessages": "Puts the input in a success state and passes through custom success messages.",
    "suffix": "Displays suffix text",
    "textColor": "",
    "type": "Sets input type",
    "validateOnBlur": "",
    "value": "The input's value",
    "valueExpression": "Lambada expression, used to specify the fields for Form form validation"
  },
  "events": {
  },
  "contents": {
  }
}