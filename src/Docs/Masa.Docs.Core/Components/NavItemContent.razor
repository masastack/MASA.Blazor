@typeparam TItem where TItem : IDefaultItem<TItem>
@inject I18n I18n

<MListItemContent>
    @{
        var title = I18n.T(Item?.Title);
        var newTitle = GetTitle(title);
        var subtitle = GetSubtitle(title);
        if (!string.IsNullOrWhiteSpace(newTitle))
        {
            <MListItemTitle>@newTitle</MListItemTitle>
        }
        if (!string.IsNullOrWhiteSpace(subtitle))
        {
            <MListItemSubtitle>@subtitle</MListItemSubtitle>
        }
    }
</MListItemContent>

@if (HasTag)
{
    string color = GetColor(Item!.Tag!);
    if (Item!.HasChildren())
    {
        <MChip Class="px-1" Color="@color" TextColor="white" Small>@I18n.T($"tag.{Item.Tag}")</MChip>
    }
    else
    {
        <MIcon Size="12" Color="@color">mdi-circle</MIcon>
    }
}

@code {
    [Parameter, EditorRequired]
    public TItem? Item { get; set; }

    bool HasTag => !string.IsNullOrEmpty(Item?.Tag);

    private static Dictionary<string, string> _tagColors = new()
    {
        { "new", "#05CD99" },
        { "pwd", "#FF5252" }
    };

    string GetColor(string tag)
    {
        return _tagColors.ContainsKey(tag) ? _tagColors[tag] : "primary";
    }

    string? GetSubtitle(string? title)
    {
        return HandleTitle(title, false);
    }

    string? GetTitle(string? title)
    {
        return HandleTitle(title);
    }

    string HandleTitle(string? title, bool getFirst = true)
    {
        if (string.IsNullOrWhiteSpace(title))
        {
            return string.Empty;
        }

        string[] titles = title.Split("（");

        if (getFirst)
        {
            return titles?.FirstOrDefault() ?? title;
        }
        else
        {
            return titles.Length < 2 ? string.Empty : titles.LastOrDefault()?.Replace("）", "") ?? title;
        }
    }
}
