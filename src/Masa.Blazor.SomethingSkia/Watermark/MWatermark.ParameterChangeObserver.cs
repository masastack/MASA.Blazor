// ReSharper disable InconsistentNaming

using SkiaSharp;

namespace Masa.Blazor;

/// <summary>
/// This class should be generated by a source generator.
/// But this is not supported by Blazor until issue https://github.com/dotnet/roslyn/issues/57239 is fixed.
/// </summary>
public partial class MWatermark
{
    private string? __prevImage;
    private string? __prevText;
    private int __prevTextSize;
    private int __prevRotate;
    private SKColor __prevColor;
    private int __prevLeft;
    private int __prevRight;
    private int __prevGapX;
    private int __prevGapY;
    private bool __prevIsGrayscale;
    private SKTypeface? __prevTypeface;

    private bool AnyParameterChanged(params string[] parameterNames)
    {
        var anyChanged = false;

        if (__prevImage != Image)
        {
            __prevImage = Image;
            anyChanged = parameterNames.Contains(nameof(Image));
        }

        if (__prevText != Text)
        {
            __prevText = Text;
            anyChanged = parameterNames.Contains(nameof(Text));
        }

        if (__prevTextSize != TextSize)
        {
            __prevTextSize = TextSize;
            anyChanged = parameterNames.Contains(nameof(TextSize));
        }

        if (__prevRotate != Rotate)
        {
            __prevRotate = Rotate;
            anyChanged = parameterNames.Contains(nameof(Rotate));
        }

        if (__prevColor != Color)
        {
            __prevColor = Color;
            anyChanged = parameterNames.Contains(nameof(Color));
        }

        if (__prevLeft != Left)
        {
            __prevLeft = Left;
            anyChanged = parameterNames.Contains(nameof(Left));
        }

        if (__prevRight != Top)
        {
            __prevRight = Top;
            anyChanged = parameterNames.Contains(nameof(Top));
        }

        if (__prevGapX != GapX)
        {
            __prevGapX = GapX;
            anyChanged = parameterNames.Contains(nameof(GapX));
        }

        if (__prevGapY != GapY)
        {
            __prevGapY = GapY;
            anyChanged = parameterNames.Contains(nameof(GapY));
        }

        if (__prevIsGrayscale != Grayscale)
        {
            __prevIsGrayscale = Grayscale;
            anyChanged = parameterNames.Contains(nameof(Grayscale));
        }
        
        if (__prevTypeface != Typeface)
        {
            __prevTypeface = Typeface;
            anyChanged = parameterNames.Contains(nameof(Typeface));
        }

        return anyChanged;
    }
}
