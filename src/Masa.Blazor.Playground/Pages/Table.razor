@using System.Text.Json
@using Masa.Blazor.MasaTable
@inject IJSRuntime JSRuntime


<Masa.Blazor.MasaTable.MasaTable OnSave="SaveSheet"
                                 Sheet="@_sheet"
                                 Items="@_myRecords"
                                 ColumnTemplate="@ColumnTemplate"
                                 TItem="MyRecord">
</Masa.Blazor.MasaTable.MasaTable>


@code {

    #region mock data

    public class MyRecord
    {
        public string? Name { get; set; }
        public string? Description { get; set; }
        public int Age { get; set; }
        public bool GoOrNot { get; set; }
        public string? Homepage { get; set; }
        public DateTimeOffset Birthday { get; set; }
        public int Favorite { get; set; }
    }

    public static class MyRecordMock
    {
        public static List<MyRecord> GetMockData()
        {
            return new List<MyRecord>
            {
                new MyRecord
                {
                    Name = "John Doe",
                    Description = "A simple description",
                    Age = 30,
                    GoOrNot = true,
                    Homepage = "https://example.com",
                    Birthday = DateTimeOffset.Now,
                    Favorite = 1
                },
                new MyRecord
                {
                    Name = "Jane Doe",
                    Description = "Another simple description",
                    Age = 25,
                    GoOrNot = false,
                    Homepage = "https://example.com",
                    Birthday = DateTimeOffset.Now.AddDays(-300),
                    Favorite = 2
                },
                new MyRecord
                {
                    Name = "John Smith",
                    Description = "A simple description",
                    Age = 30,
                    GoOrNot = true,
                    Homepage = "https://example.com",
                    Birthday = DateTimeOffset.Now.AddDays(-100),
                    Favorite = 3
                },
                new MyRecord
                {
                    Name = "Jane Smith",
                    Description = "Another simple description",
                    Age = 25,
                    GoOrNot = false,
                    Homepage = "https://example.com",
                    Birthday = DateTimeOffset.Now.AddDays(-672),
                    Favorite = 4
                },
                new MyRecord
                {
                    Name = "John Doe",
                    Description = "A simple description",
                    Age = 30,
                    GoOrNot = true,
                    Homepage = "https://example.com",
                    Birthday = DateTimeOffset.Now.AddDays(-1000),
                    Favorite = 0
                },
                new MyRecord
                {
                    Name = "Jane Doe",
                    Description = "Another simple description",
                    Age = 25,
                    GoOrNot = false,
                    Homepage = "https://example.com",
                    Birthday = DateTimeOffset.Now.AddDays(-120),
                    Favorite = 3
                },
                new MyRecord
                {
                    Name = "John Smith",
                    Description = "A simple description",
                    Age = 30,
                    GoOrNot = true,
                    Homepage = "https://example.com",
                    Birthday = DateTimeOffset.Now.AddDays(-88),
                    Favorite = 2
                },
            };
        }
    }

    #endregion

    [Inject] private LocalStorage LocalStorage { get; set; } = null!;

    private List<MyRecord> _myRecords = new();
    private Sheet? _sheet;

    private Func<ValueTask<Sheet>> _sheetProvider;

    private List<ColumnTemplate<MyRecord, object>> ColumnTemplate(MyRecord record)
    {
        var name = new ColumnTemplate<MyRecord, object>(nameof(record.Name), ColumnType.Text, u => u.Name);
        var age = new ColumnTemplate<MyRecord, object>(nameof(record.Age), ColumnType.Number, u => u.Age);
        var getOrNot = new ColumnTemplate<MyRecord, object>(nameof(record.GoOrNot), ColumnType.Checkbox, u => u.GoOrNot);
        var birthday = new ColumnTemplate<MyRecord, object>(nameof(record.Birthday), ColumnType.Date, u => u.Birthday);
        var homepage = new ColumnTemplate<MyRecord, object>(nameof(record.Homepage), ColumnType.Link, u => u.Homepage);
        var favorite = new ColumnTemplate<MyRecord, object>(nameof(record.Favorite), ColumnType.Select, u => u.Favorite);

        return [name, age, getOrNot, homepage, birthday, favorite];
    }

    private async Task SaveSheet(Sheet sheet)
    {
        // TODO: save sheet
        
        var json = JsonSerializer.Serialize(sheet);
        
        await LocalStorage.SetItemAsync("sheet", json);
        await JSRuntime.InvokeVoidAsync(JsInteropConstants.Log, sheet);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _myRecords = MyRecordMock.GetMockData();
            _sheet = await LocalStorage.GetItemAsync<Sheet>("sheet");
            StateHasChanged();
        }
    }
}