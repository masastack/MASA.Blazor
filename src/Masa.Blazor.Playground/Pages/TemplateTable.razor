@using System.Text.Json
@using GraphQL.Client.Http
@using Masa.Blazor.Components.TemplateTable
@using Masa.Blazor.Components.TemplateTable.Actions
@inject GraphQLHttpClient GraphQLClient

<MButtonGroup Value="(int)_role"
              ValueChanged="v => _role = (Role)v.ToInt32()">
    <MButton Value="(int)Role.Manager">Manager</MButton>
    <MButton Value="(int)Role.User">User</MButton>
</MButtonGroup>

<MTemplateTable SheetProvider="@_sheetProvider"
                ItemsProvider="@_itemsProvider"
                UserViews="_userViews"
                OnUserViewAdd="@OnUserViewAdd"
                OnUserViewUpdate="@OnUserViewUpdate"
                OnUserViewDelete="@OnUserViewDelete"
                Role="@_role"
                Height="300"
                OnSave="@Save"
                CheckboxColor="primary"
                OnRemove="@Remove">
    <ViewActionsContent>
        <MButton OnClick="@(() => OnExport(context))" Color="primary">Export</MButton>
    </ViewActionsContent>
    <RowActionsContent>
        <DetailAction/>
        <UpdateAction/>
        <DeleteAction Icon="mdi-delete-variant" Tooltip="删除" OnClick="OnDelete"/>
        <ActionTemplate Icon="mdi-home" Tooltip="Custom Action !" OnClick="OnCustomAction"/>
    </RowActionsContent>
</MTemplateTable>

@code {
    private Role _role;
    private IList<View> _userViews = [];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _userViews = await HttpClient.GetFromJsonAsync<IList<View>>("http://localhost:5297/views/cyx");
            StateHasChanged();
        }
    }

    private async Task OnUserViewAdd(View view)
    {
        await HttpClient.PostAsJsonAsync("http://localhost:5297/views/cyx", view);
    }

    private async Task OnUserViewDelete(View view)
    {
        await HttpClient.DeleteAsync("http://localhost:5297/views/cyx/" + view.Id);
    }

    private async Task OnUserViewUpdate(View view)
    {
        
    }

    private void OnCustomAction(IReadOnlyDictionary<string, JsonElement> data)
    {
        Console.Out.WriteLine($"Custom Action Clicked {data["name"].GetString()}");
    }

    private async Task OnDelete(IReadOnlyDictionary<string, JsonElement> data)
    {
        await PopupService.ConfirmAsync("Are you sure to delete this item?", data["name"].GetString(), AlertTypes.Warning, async _ =>
        {
            await Task.Delay(1000);
            Console.Out.WriteLine("Deleted");
        });
    }

    private async Task Remove(ICollection<Row> items)
    {
        var keyString = string.Join(", ", items.Select(u => u.Key));
        var message = $"Are you sure to delete {items.Count()} items({keyString})?";
        var confirmed = await PopupService.ConfirmAsync(message, AlertTypes.Warning);
        if (confirmed)
        {
            Console.Out.WriteLine("Deleted");
        }
    }

    private async Task OnExport(ICollection<Row> items)
    {
        Console.Out.WriteLine("Export: " + string.Join(',', items.Select(u => u.Key)));
    }

}