{"version":3,"file":"gridstack-interop.js","sources":["../../Masa.Blazor.JS/node_modules/.pnpm/@rollup+plugin-typescript@8.5.0_rollup@2.79.2_tslib@2.8.1_typescript@4.9.5/node_modules/tslib/tslib.es6.js","../../Masa.Blazor.JS/node_modules/.pnpm/gridstack@9.5.1/node_modules/gridstack/dist/utils.js","../../Masa.Blazor.JS/node_modules/.pnpm/gridstack@9.5.1/node_modules/gridstack/dist/gridstack-engine.js","../../Masa.Blazor.JS/node_modules/.pnpm/gridstack@9.5.1/node_modules/gridstack/dist/types.js","../../Masa.Blazor.JS/node_modules/.pnpm/gridstack@9.5.1/node_modules/gridstack/dist/dd-manager.js","../../Masa.Blazor.JS/node_modules/.pnpm/gridstack@9.5.1/node_modules/gridstack/dist/dd-touch.js","../../Masa.Blazor.JS/node_modules/.pnpm/gridstack@9.5.1/node_modules/gridstack/dist/dd-resizable-handle.js","../../Masa.Blazor.JS/node_modules/.pnpm/gridstack@9.5.1/node_modules/gridstack/dist/dd-base-impl.js","../../Masa.Blazor.JS/node_modules/.pnpm/gridstack@9.5.1/node_modules/gridstack/dist/dd-resizable.js","../../Masa.Blazor.JS/node_modules/.pnpm/gridstack@9.5.1/node_modules/gridstack/dist/dd-draggable.js","../../Masa.Blazor.JS/node_modules/.pnpm/gridstack@9.5.1/node_modules/gridstack/dist/dd-droppable.js","../../Masa.Blazor.JS/node_modules/.pnpm/gridstack@9.5.1/node_modules/gridstack/dist/dd-element.js","../../Masa.Blazor.JS/node_modules/.pnpm/gridstack@9.5.1/node_modules/gridstack/dist/gridstack.js","../../Masa.Blazor.JS/node_modules/.pnpm/gridstack@9.5.1/node_modules/gridstack/dist/dd-gridstack.js","../../Masa.Blazor.JS/src/proxies/gridstack/index.ts"],"sourcesContent":["/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.unshift(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.unshift(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n};\r\n\r\nexport function __runInitializers(thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n};\r\n\r\nexport function __propKey(x) {\r\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n};\r\n\r\nexport function __setFunctionName(f, name, prefix) {\r\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n};\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\r\n    return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\r\n    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nvar ownKeys = function(o) {\r\n    ownKeys = Object.getOwnPropertyNames || function (o) {\r\n        var ar = [];\r\n        for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\r\n        return ar;\r\n    };\r\n    return ownKeys(o);\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n\r\nexport function __addDisposableResource(env, value, async) {\r\n    if (value !== null && value !== void 0) {\r\n        if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\r\n        var dispose, inner;\r\n        if (async) {\r\n            if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\r\n            dispose = value[Symbol.asyncDispose];\r\n        }\r\n        if (dispose === void 0) {\r\n            if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\r\n            dispose = value[Symbol.dispose];\r\n            if (async) inner = dispose;\r\n        }\r\n        if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\r\n        if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\r\n        env.stack.push({ value: value, dispose: dispose, async: async });\r\n    }\r\n    else if (async) {\r\n        env.stack.push({ async: true });\r\n    }\r\n    return value;\r\n\r\n}\r\n\r\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\r\n\r\nexport function __disposeResources(env) {\r\n    function fail(e) {\r\n        env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\r\n        env.hasError = true;\r\n    }\r\n    var r, s = 0;\r\n    function next() {\r\n        while (r = env.stack.pop()) {\r\n            try {\r\n                if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\r\n                if (r.dispose) {\r\n                    var result = r.dispose.call(r.value);\r\n                    if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\r\n                }\r\n                else s |= 1;\r\n            }\r\n            catch (e) {\r\n                fail(e);\r\n            }\r\n        }\r\n        if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\r\n        if (env.hasError) throw env.error;\r\n    }\r\n    return next();\r\n}\r\n\r\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\r\n    if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\r\n        return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\r\n            return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\r\n        });\r\n    }\r\n    return path;\r\n}\r\n\r\nexport default {\r\n    __extends: __extends,\r\n    __assign: __assign,\r\n    __rest: __rest,\r\n    __decorate: __decorate,\r\n    __param: __param,\r\n    __esDecorate: __esDecorate,\r\n    __runInitializers: __runInitializers,\r\n    __propKey: __propKey,\r\n    __setFunctionName: __setFunctionName,\r\n    __metadata: __metadata,\r\n    __awaiter: __awaiter,\r\n    __generator: __generator,\r\n    __createBinding: __createBinding,\r\n    __exportStar: __exportStar,\r\n    __values: __values,\r\n    __read: __read,\r\n    __spread: __spread,\r\n    __spreadArrays: __spreadArrays,\r\n    __spreadArray: __spreadArray,\r\n    __await: __await,\r\n    __asyncGenerator: __asyncGenerator,\r\n    __asyncDelegator: __asyncDelegator,\r\n    __asyncValues: __asyncValues,\r\n    __makeTemplateObject: __makeTemplateObject,\r\n    __importStar: __importStar,\r\n    __importDefault: __importDefault,\r\n    __classPrivateFieldGet: __classPrivateFieldGet,\r\n    __classPrivateFieldSet: __classPrivateFieldSet,\r\n    __classPrivateFieldIn: __classPrivateFieldIn,\r\n    __addDisposableResource: __addDisposableResource,\r\n    __disposeResources: __disposeResources,\r\n    __rewriteRelativeImportExtension: __rewriteRelativeImportExtension,\r\n};\r\n","/**\n * utils.ts 9.5.1\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n/** checks for obsolete method names */\n// eslint-disable-next-line\nexport function obsolete(self, f, oldName, newName, rev) {\n    let wrapper = (...args) => {\n        console.warn('gridstack.js: Function `' + oldName + '` is deprecated in ' + rev + ' and has been replaced ' +\n            'with `' + newName + '`. It will be **removed** in a future release');\n        return f.apply(self, args);\n    };\n    wrapper.prototype = f.prototype;\n    return wrapper;\n}\n/** checks for obsolete grid options (can be used for any fields, but msg is about options) */\nexport function obsoleteOpts(opts, oldName, newName, rev) {\n    if (opts[oldName] !== undefined) {\n        opts[newName] = opts[oldName];\n        console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + ' and has been replaced with `' +\n            newName + '`. It will be **removed** in a future release');\n    }\n}\n/** checks for obsolete grid options which are gone */\nexport function obsoleteOptsDel(opts, oldName, rev, info) {\n    if (opts[oldName] !== undefined) {\n        console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + info);\n    }\n}\n/** checks for obsolete Jquery element attributes */\nexport function obsoleteAttr(el, oldName, newName, rev) {\n    let oldAttr = el.getAttribute(oldName);\n    if (oldAttr !== null) {\n        el.setAttribute(newName, oldAttr);\n        console.warn('gridstack.js: attribute `' + oldName + '`=' + oldAttr + ' is deprecated on this object in ' + rev + ' and has been replaced with `' +\n            newName + '`. It will be **removed** in a future release');\n    }\n}\n/**\n * Utility methods\n */\nexport class Utils {\n    /** convert a potential selector into actual list of html elements. optional root which defaults to document (for shadow dom) */\n    static getElements(els, root = document) {\n        if (typeof els === 'string') {\n            const doc = ('getElementById' in root) ? root : undefined;\n            // Note: very common for people use to id='1,2,3' which is only legal as HTML5 id, but not CSS selectors\n            // so if we start with a number, assume it's an id and just return that one item...\n            // see https://github.com/gridstack/gridstack.js/issues/2234#issuecomment-1523796562\n            if (doc && !isNaN(+els[0])) { // start with digit\n                const el = doc.getElementById(els);\n                return el ? [el] : [];\n            }\n            let list = root.querySelectorAll(els);\n            if (!list.length && els[0] !== '.' && els[0] !== '#') {\n                list = root.querySelectorAll('.' + els);\n                if (!list.length) {\n                    list = root.querySelectorAll('#' + els);\n                }\n            }\n            return Array.from(list);\n        }\n        return [els];\n    }\n    /** convert a potential selector into actual single element. optional root which defaults to document (for shadow dom) */\n    static getElement(els, root = document) {\n        if (typeof els === 'string') {\n            const doc = ('getElementById' in root) ? root : undefined;\n            if (!els.length)\n                return null;\n            if (doc && els[0] === '#') {\n                return doc.getElementById(els.substring(1));\n            }\n            if (els[0] === '#' || els[0] === '.' || els[0] === '[') {\n                return root.querySelector(els);\n            }\n            // if we start with a digit, assume it's an id (error calling querySelector('#1')) as class are not valid CSS\n            if (doc && !isNaN(+els[0])) { // start with digit\n                return doc.getElementById(els);\n            }\n            // finally try string, then id, then class\n            let el = root.querySelector(els);\n            if (doc && !el) {\n                el = doc.getElementById(els);\n            }\n            if (!el) {\n                el = root.querySelector('.' + els);\n            }\n            return el;\n        }\n        return els;\n    }\n    /** true if we should resize to content */\n    static shouldSizeToContent(n) {\n        return n?.grid && (!!n.sizeToContent || (n.grid.opts.sizeToContent && n.sizeToContent !== false));\n    }\n    /** returns true if a and b overlap */\n    static isIntercepted(a, b) {\n        return !(a.y >= b.y + b.h || a.y + a.h <= b.y || a.x + a.w <= b.x || a.x >= b.x + b.w);\n    }\n    /** returns true if a and b touch edges or corners */\n    static isTouching(a, b) {\n        return Utils.isIntercepted(a, { x: b.x - 0.5, y: b.y - 0.5, w: b.w + 1, h: b.h + 1 });\n    }\n    /** returns the area a and b overlap */\n    static areaIntercept(a, b) {\n        let x0 = (a.x > b.x) ? a.x : b.x;\n        let x1 = (a.x + a.w < b.x + b.w) ? a.x + a.w : b.x + b.w;\n        if (x1 <= x0)\n            return 0; // no overlap\n        let y0 = (a.y > b.y) ? a.y : b.y;\n        let y1 = (a.y + a.h < b.y + b.h) ? a.y + a.h : b.y + b.h;\n        if (y1 <= y0)\n            return 0; // no overlap\n        return (x1 - x0) * (y1 - y0);\n    }\n    /** returns the area */\n    static area(a) {\n        return a.w * a.h;\n    }\n    /**\n     * Sorts array of nodes\n     * @param nodes array to sort\n     * @param dir 1 for asc, -1 for desc (optional)\n     * @param width width of the grid. If undefined the width will be calculated automatically (optional).\n     **/\n    static sort(nodes, dir = 1, column) {\n        column = column || nodes.reduce((col, n) => Math.max(n.x + n.w, col), 0) || 12;\n        if (dir === -1)\n            return nodes.sort((a, b) => ((b.x ?? 1000) + (b.y ?? 1000) * column) - ((a.x ?? 1000) + (a.y ?? 1000) * column));\n        else\n            return nodes.sort((b, a) => ((b.x ?? 1000) + (b.y ?? 1000) * column) - ((a.x ?? 1000) + (a.y ?? 1000) * column));\n    }\n    /** find an item by id */\n    static find(nodes, id) {\n        return id ? nodes.find(n => n.id === id) : undefined;\n    }\n    /**\n     * creates a style sheet with style id under given parent\n     * @param id will set the 'gs-style-id' attribute to that id\n     * @param parent to insert the stylesheet as first child,\n     * if none supplied it will be appended to the document head instead.\n     */\n    static createStylesheet(id, parent, options) {\n        let style = document.createElement('style');\n        const nonce = options?.nonce;\n        if (nonce)\n            style.nonce = nonce;\n        style.setAttribute('type', 'text/css');\n        style.setAttribute('gs-style-id', id);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (style.styleSheet) { // TODO: only CSSImportRule have that and different beast ??\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            style.styleSheet.cssText = '';\n        }\n        else {\n            style.appendChild(document.createTextNode('')); // WebKit hack\n        }\n        if (!parent) {\n            // default to head\n            parent = document.getElementsByTagName('head')[0];\n            parent.appendChild(style);\n        }\n        else {\n            parent.insertBefore(style, parent.firstChild);\n        }\n        return style.sheet;\n    }\n    /** removed the given stylesheet id */\n    static removeStylesheet(id) {\n        let el = document.querySelector('STYLE[gs-style-id=' + id + ']');\n        if (el && el.parentNode)\n            el.remove();\n    }\n    /** inserts a CSS rule */\n    static addCSSRule(sheet, selector, rules) {\n        if (typeof sheet.addRule === 'function') {\n            sheet.addRule(selector, rules);\n        }\n        else if (typeof sheet.insertRule === 'function') {\n            sheet.insertRule(`${selector}{${rules}}`);\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static toBool(v) {\n        if (typeof v === 'boolean') {\n            return v;\n        }\n        if (typeof v === 'string') {\n            v = v.toLowerCase();\n            return !(v === '' || v === 'no' || v === 'false' || v === '0');\n        }\n        return Boolean(v);\n    }\n    static toNumber(value) {\n        return (value === null || value.length === 0) ? undefined : Number(value);\n    }\n    static parseHeight(val) {\n        let h;\n        let unit = 'px';\n        if (typeof val === 'string') {\n            if (val === 'auto' || val === '')\n                h = 0;\n            else {\n                let match = val.match(/^(-[0-9]+\\.[0-9]+|[0-9]*\\.[0-9]+|-[0-9]+|[0-9]+)(px|em|rem|vh|vw|%)?$/);\n                if (!match) {\n                    throw new Error(`Invalid height val = ${val}`);\n                }\n                unit = match[2] || 'px';\n                h = parseFloat(match[1]);\n            }\n        }\n        else {\n            h = val;\n        }\n        return { h, unit };\n    }\n    /** copies unset fields in target to use the given default sources values */\n    // eslint-disable-next-line\n    static defaults(target, ...sources) {\n        sources.forEach(source => {\n            for (const key in source) {\n                if (!source.hasOwnProperty(key))\n                    return;\n                if (target[key] === null || target[key] === undefined) {\n                    target[key] = source[key];\n                }\n                else if (typeof source[key] === 'object' && typeof target[key] === 'object') {\n                    // property is an object, recursively add it's field over... #1373\n                    this.defaults(target[key], source[key]);\n                }\n            }\n        });\n        return target;\n    }\n    /** given 2 objects return true if they have the same values. Checks for Object {} having same fields and values (just 1 level down) */\n    static same(a, b) {\n        if (typeof a !== 'object')\n            return a == b;\n        if (typeof a !== typeof b)\n            return false;\n        // else we have object, check just 1 level deep for being same things...\n        if (Object.keys(a).length !== Object.keys(b).length)\n            return false;\n        for (const key in a) {\n            if (a[key] !== b[key])\n                return false;\n        }\n        return true;\n    }\n    /** copies over b size & position (GridStackPosition), and optionally min/max as well */\n    static copyPos(a, b, doMinMax = false) {\n        if (b.x !== undefined)\n            a.x = b.x;\n        if (b.y !== undefined)\n            a.y = b.y;\n        if (b.w !== undefined)\n            a.w = b.w;\n        if (b.h !== undefined)\n            a.h = b.h;\n        if (doMinMax) {\n            if (b.minW)\n                a.minW = b.minW;\n            if (b.minH)\n                a.minH = b.minH;\n            if (b.maxW)\n                a.maxW = b.maxW;\n            if (b.maxH)\n                a.maxH = b.maxH;\n        }\n        return a;\n    }\n    /** true if a and b has same size & position */\n    static samePos(a, b) {\n        return a && b && a.x === b.x && a.y === b.y && (a.w || 1) === (b.w || 1) && (a.h || 1) === (b.h || 1);\n    }\n    /** given a node, makes sure it's min/max are valid */\n    static sanitizeMinMax(node) {\n        // remove 0, undefine, null\n        if (!node.minW) {\n            delete node.minW;\n        }\n        if (!node.minH) {\n            delete node.minH;\n        }\n        if (!node.maxW) {\n            delete node.maxW;\n        }\n        if (!node.maxH) {\n            delete node.maxH;\n        }\n    }\n    /** removes field from the first object if same as the second objects (like diffing) and internal '_' for saving */\n    static removeInternalAndSame(a, b) {\n        if (typeof a !== 'object' || typeof b !== 'object')\n            return;\n        for (let key in a) {\n            let val = a[key];\n            if (key[0] === '_' || val === b[key]) {\n                delete a[key];\n            }\n            else if (val && typeof val === 'object' && b[key] !== undefined) {\n                for (let i in val) {\n                    if (val[i] === b[key][i] || i[0] === '_') {\n                        delete val[i];\n                    }\n                }\n                if (!Object.keys(val).length) {\n                    delete a[key];\n                }\n            }\n        }\n    }\n    /** removes internal fields '_' and default values for saving */\n    static removeInternalForSave(n, removeEl = true) {\n        for (let key in n) {\n            if (key[0] === '_' || n[key] === null || n[key] === undefined)\n                delete n[key];\n        }\n        delete n.grid;\n        if (removeEl)\n            delete n.el;\n        // delete default values (will be re-created on read)\n        if (!n.autoPosition)\n            delete n.autoPosition;\n        if (!n.noResize)\n            delete n.noResize;\n        if (!n.noMove)\n            delete n.noMove;\n        if (!n.locked)\n            delete n.locked;\n        if (n.w === 1 || n.w === n.minW)\n            delete n.w;\n        if (n.h === 1 || n.h === n.minH)\n            delete n.h;\n    }\n    /** return the closest parent (or itself) matching the given class */\n    // static closestUpByClass(el: HTMLElement, name: string): HTMLElement {\n    //   while (el) {\n    //     if (el.classList.contains(name)) return el;\n    //     el = el.parentElement\n    //   }\n    //   return null;\n    // }\n    /** delay calling the given function for given delay, preventing new calls from happening while waiting */\n    static throttle(func, delay) {\n        let isWaiting = false;\n        return (...args) => {\n            if (!isWaiting) {\n                isWaiting = true;\n                setTimeout(() => { func(...args); isWaiting = false; }, delay);\n            }\n        };\n    }\n    static removePositioningStyles(el) {\n        let style = el.style;\n        if (style.position) {\n            style.removeProperty('position');\n        }\n        if (style.left) {\n            style.removeProperty('left');\n        }\n        if (style.top) {\n            style.removeProperty('top');\n        }\n        if (style.width) {\n            style.removeProperty('width');\n        }\n        if (style.height) {\n            style.removeProperty('height');\n        }\n    }\n    /** @internal returns the passed element if scrollable, else the closest parent that will, up to the entire document scrolling element */\n    static getScrollElement(el) {\n        if (!el)\n            return document.scrollingElement || document.documentElement; // IE support\n        const style = getComputedStyle(el);\n        const overflowRegex = /(auto|scroll)/;\n        if (overflowRegex.test(style.overflow + style.overflowY)) {\n            return el;\n        }\n        else {\n            return this.getScrollElement(el.parentElement);\n        }\n    }\n    /** @internal */\n    static updateScrollPosition(el, position, distance) {\n        // is widget in view?\n        let rect = el.getBoundingClientRect();\n        let innerHeightOrClientHeight = (window.innerHeight || document.documentElement.clientHeight);\n        if (rect.top < 0 ||\n            rect.bottom > innerHeightOrClientHeight) {\n            // set scrollTop of first parent that scrolls\n            // if parent is larger than el, set as low as possible\n            // to get entire widget on screen\n            let offsetDiffDown = rect.bottom - innerHeightOrClientHeight;\n            let offsetDiffUp = rect.top;\n            let scrollEl = this.getScrollElement(el);\n            if (scrollEl !== null) {\n                let prevScroll = scrollEl.scrollTop;\n                if (rect.top < 0 && distance < 0) {\n                    // moving up\n                    if (el.offsetHeight > innerHeightOrClientHeight) {\n                        scrollEl.scrollTop += distance;\n                    }\n                    else {\n                        scrollEl.scrollTop += Math.abs(offsetDiffUp) > Math.abs(distance) ? distance : offsetDiffUp;\n                    }\n                }\n                else if (distance > 0) {\n                    // moving down\n                    if (el.offsetHeight > innerHeightOrClientHeight) {\n                        scrollEl.scrollTop += distance;\n                    }\n                    else {\n                        scrollEl.scrollTop += offsetDiffDown > distance ? distance : offsetDiffDown;\n                    }\n                }\n                // move widget y by amount scrolled\n                position.top += scrollEl.scrollTop - prevScroll;\n            }\n        }\n    }\n    /**\n     * @internal Function used to scroll the page.\n     *\n     * @param event `MouseEvent` that triggers the resize\n     * @param el `HTMLElement` that's being resized\n     * @param distance Distance from the V edges to start scrolling\n     */\n    static updateScrollResize(event, el, distance) {\n        const scrollEl = this.getScrollElement(el);\n        const height = scrollEl.clientHeight;\n        // #1727 event.clientY is relative to viewport, so must compare this against position of scrollEl getBoundingClientRect().top\n        // #1745 Special situation if scrollEl is document 'html': here browser spec states that\n        // clientHeight is height of viewport, but getBoundingClientRect() is rectangle of html element;\n        // this discrepancy arises because in reality scrollbar is attached to viewport, not html element itself.\n        const offsetTop = (scrollEl === this.getScrollElement()) ? 0 : scrollEl.getBoundingClientRect().top;\n        const pointerPosY = event.clientY - offsetTop;\n        const top = pointerPosY < distance;\n        const bottom = pointerPosY > height - distance;\n        if (top) {\n            // This also can be done with a timeout to keep scrolling while the mouse is\n            // in the scrolling zone. (will have smoother behavior)\n            scrollEl.scrollBy({ behavior: 'smooth', top: pointerPosY - distance });\n        }\n        else if (bottom) {\n            scrollEl.scrollBy({ behavior: 'smooth', top: distance - (height - pointerPosY) });\n        }\n    }\n    /** single level clone, returning a new object with same top fields. This will share sub objects and arrays */\n    static clone(obj) {\n        if (obj === null || obj === undefined || typeof (obj) !== 'object') {\n            return obj;\n        }\n        // return Object.assign({}, obj);\n        if (obj instanceof Array) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            return [...obj];\n        }\n        return { ...obj };\n    }\n    /**\n     * Recursive clone version that returns a full copy, checking for nested objects and arrays ONLY.\n     * Note: this will use as-is any key starting with double __ (and not copy inside) some lib have circular dependencies.\n     */\n    static cloneDeep(obj) {\n        // list of fields we will skip during cloneDeep (nested objects, other internal)\n        const skipFields = ['parentGrid', 'el', 'grid', 'subGrid', 'engine'];\n        // return JSON.parse(JSON.stringify(obj)); // doesn't work with date format ?\n        const ret = Utils.clone(obj);\n        for (const key in ret) {\n            // NOTE: we don't support function/circular dependencies so skip those properties for now...\n            if (ret.hasOwnProperty(key) && typeof (ret[key]) === 'object' && key.substring(0, 2) !== '__' && !skipFields.find(k => k === key)) {\n                ret[key] = Utils.cloneDeep(obj[key]);\n            }\n        }\n        return ret;\n    }\n    /** deep clone the given HTML node, removing teh unique id field */\n    static cloneNode(el) {\n        const node = el.cloneNode(true);\n        node.removeAttribute('id');\n        return node;\n    }\n    static appendTo(el, parent) {\n        let parentNode;\n        if (typeof parent === 'string') {\n            parentNode = Utils.getElement(parent);\n        }\n        else {\n            parentNode = parent;\n        }\n        if (parentNode) {\n            parentNode.appendChild(el);\n        }\n    }\n    // public static setPositionRelative(el: HTMLElement): void {\n    //   if (!(/^(?:r|a|f)/).test(getComputedStyle(el).position)) {\n    //     el.style.position = \"relative\";\n    //   }\n    // }\n    static addElStyles(el, styles) {\n        if (styles instanceof Object) {\n            for (const s in styles) {\n                if (styles.hasOwnProperty(s)) {\n                    if (Array.isArray(styles[s])) {\n                        // support fallback value\n                        styles[s].forEach(val => {\n                            el.style[s] = val;\n                        });\n                    }\n                    else {\n                        el.style[s] = styles[s];\n                    }\n                }\n            }\n        }\n    }\n    static initEvent(e, info) {\n        const evt = { type: info.type };\n        const obj = {\n            button: 0,\n            which: 0,\n            buttons: 1,\n            bubbles: true,\n            cancelable: true,\n            target: info.target ? info.target : e.target\n        };\n        // don't check for `instanceof DragEvent` as Safari use MouseEvent #1540\n        if (e.dataTransfer) {\n            evt['dataTransfer'] = e.dataTransfer; // workaround 'readonly' field.\n        }\n        ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'].forEach(p => evt[p] = e[p]); // keys\n        ['pageX', 'pageY', 'clientX', 'clientY', 'screenX', 'screenY'].forEach(p => evt[p] = e[p]); // point info\n        return { ...evt, ...obj };\n    }\n    /** copies the MouseEvent properties and sends it as another event to the given target */\n    static simulateMouseEvent(e, simulatedType, target) {\n        const simulatedEvent = document.createEvent('MouseEvents');\n        simulatedEvent.initMouseEvent(simulatedType, // type\n        true, // bubbles\n        true, // cancelable\n        window, // view\n        1, // detail\n        e.screenX, // screenX\n        e.screenY, // screenY\n        e.clientX, // clientX\n        e.clientY, // clientY\n        e.ctrlKey, // ctrlKey\n        e.altKey, // altKey\n        e.shiftKey, // shiftKey\n        e.metaKey, // metaKey\n        0, // button\n        e.target // relatedTarget\n        );\n        (target || e.target).dispatchEvent(simulatedEvent);\n    }\n}\n//# sourceMappingURL=utils.js.map","/**\n * gridstack-engine.ts 9.5.1\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\nimport { Utils } from './utils';\n/**\n * Defines the GridStack engine that does most no DOM grid manipulation.\n * See GridStack methods and vars for descriptions.\n *\n * NOTE: values should not be modified directly - call the main GridStack API instead\n */\nclass GridStackEngine {\n    constructor(opts = {}) {\n        this.addedNodes = [];\n        this.removedNodes = [];\n        this.column = opts.column || 12;\n        this.maxRow = opts.maxRow;\n        this._float = opts.float;\n        this.nodes = opts.nodes || [];\n        this.onChange = opts.onChange;\n    }\n    batchUpdate(flag = true, doPack = true) {\n        if (!!this.batchMode === flag)\n            return this;\n        this.batchMode = flag;\n        if (flag) {\n            this._prevFloat = this._float;\n            this._float = true; // let things go anywhere for now... will restore and possibly reposition later\n            this.cleanNodes();\n            this.saveInitial(); // since begin update (which is called multiple times) won't do this\n        }\n        else {\n            this._float = this._prevFloat;\n            delete this._prevFloat;\n            if (doPack)\n                this._packNodes();\n            this._notify();\n        }\n        return this;\n    }\n    // use entire row for hitting area (will use bottom reverse sorted first) if we not actively moving DOWN and didn't already skip\n    _useEntireRowArea(node, nn) {\n        return (!this.float || this.batchMode && !this._prevFloat) && !this._hasLocked && (!node._moving || node._skipDown || nn.y <= node.y);\n    }\n    /** @internal fix collision on given 'node', going to given new location 'nn', with optional 'collide' node already found.\n     * return true if we moved. */\n    _fixCollisions(node, nn = node, collide, opt = {}) {\n        this.sortNodes(-1); // from last to first, so recursive collision move items in the right order\n        collide = collide || this.collide(node, nn); // REAL area collide for swap and skip if none...\n        if (!collide)\n            return false;\n        // swap check: if we're actively moving in gravity mode, see if we collide with an object the same size\n        if (node._moving && !opt.nested && !this.float) {\n            if (this.swap(node, collide))\n                return true;\n        }\n        // during while() collisions MAKE SURE to check entire row so larger items don't leap frog small ones (push them all down starting last in grid)\n        let area = nn;\n        if (this._useEntireRowArea(node, nn)) {\n            area = { x: 0, w: this.column, y: nn.y, h: nn.h };\n            collide = this.collide(node, area, opt.skip); // force new hit\n        }\n        let didMove = false;\n        let newOpt = { nested: true, pack: false };\n        while (collide = collide || this.collide(node, area, opt.skip)) { // could collide with more than 1 item... so repeat for each\n            let moved;\n            // if colliding with a locked item OR moving down with top gravity (and collide could move up) -> skip past the collide,\n            // but remember that skip down so we only do this once (and push others otherwise).\n            if (collide.locked || node._moving && !node._skipDown && nn.y > node.y && !this.float &&\n                // can take space we had, or before where we're going\n                (!this.collide(collide, { ...collide, y: node.y }, node) || !this.collide(collide, { ...collide, y: nn.y - collide.h }, node))) {\n                node._skipDown = (node._skipDown || nn.y > node.y);\n                moved = this.moveNode(node, { ...nn, y: collide.y + collide.h, ...newOpt });\n                if (collide.locked && moved) {\n                    Utils.copyPos(nn, node); // moving after lock become our new desired location\n                }\n                else if (!collide.locked && moved && opt.pack) {\n                    // we moved after and will pack: do it now and keep the original drop location, but past the old collide to see what else we might push way\n                    this._packNodes();\n                    nn.y = collide.y + collide.h;\n                    Utils.copyPos(node, nn);\n                }\n                didMove = didMove || moved;\n            }\n            else {\n                // move collide down *after* where we will be, ignoring where we are now (don't collide with us)\n                moved = this.moveNode(collide, { ...collide, y: nn.y + nn.h, skip: node, ...newOpt });\n            }\n            if (!moved) {\n                return didMove;\n            } // break inf loop if we couldn't move after all (ex: maxRow, fixed)\n            collide = undefined;\n        }\n        return didMove;\n    }\n    /** return the nodes that intercept the given node. Optionally a different area can be used, as well as a second node to skip */\n    collide(skip, area = skip, skip2) {\n        const skipId = skip._id;\n        const skip2Id = skip2?._id;\n        return this.nodes.find(n => n._id !== skipId && n._id !== skip2Id && Utils.isIntercepted(n, area));\n    }\n    collideAll(skip, area = skip, skip2) {\n        const skipId = skip._id;\n        const skip2Id = skip2?._id;\n        return this.nodes.filter(n => n._id !== skipId && n._id !== skip2Id && Utils.isIntercepted(n, area));\n    }\n    /** does a pixel coverage collision based on where we started, returning the node that has the most coverage that is >50% mid line */\n    directionCollideCoverage(node, o, collides) {\n        if (!o.rect || !node._rect)\n            return;\n        let r0 = node._rect; // where started\n        let r = { ...o.rect }; // where we are\n        // update dragged rect to show where it's coming from (above or below, etc...)\n        if (r.y > r0.y) {\n            r.h += r.y - r0.y;\n            r.y = r0.y;\n        }\n        else {\n            r.h += r0.y - r.y;\n        }\n        if (r.x > r0.x) {\n            r.w += r.x - r0.x;\n            r.x = r0.x;\n        }\n        else {\n            r.w += r0.x - r.x;\n        }\n        let collide;\n        let overMax = 0.5; // need >50%\n        collides.forEach(n => {\n            if (n.locked || !n._rect)\n                return;\n            let r2 = n._rect; // overlapping target\n            let yOver = Number.MAX_VALUE, xOver = Number.MAX_VALUE;\n            // depending on which side we started from, compute the overlap % of coverage\n            // (ex: from above/below we only compute the max horizontal line coverage)\n            if (r0.y < r2.y) { // from above\n                yOver = ((r.y + r.h) - r2.y) / r2.h;\n            }\n            else if (r0.y + r0.h > r2.y + r2.h) { // from below\n                yOver = ((r2.y + r2.h) - r.y) / r2.h;\n            }\n            if (r0.x < r2.x) { // from the left\n                xOver = ((r.x + r.w) - r2.x) / r2.w;\n            }\n            else if (r0.x + r0.w > r2.x + r2.w) { // from the right\n                xOver = ((r2.x + r2.w) - r.x) / r2.w;\n            }\n            let over = Math.min(xOver, yOver);\n            if (over > overMax) {\n                overMax = over;\n                collide = n;\n            }\n        });\n        o.collide = collide; // save it so we don't have to find it again\n        return collide;\n    }\n    /** does a pixel coverage returning the node that has the most coverage by area */\n    /*\n    protected collideCoverage(r: GridStackPosition, collides: GridStackNode[]): {collide: GridStackNode, over: number} {\n      let collide: GridStackNode;\n      let overMax = 0;\n      collides.forEach(n => {\n        if (n.locked || !n._rect) return;\n        let over = Utils.areaIntercept(r, n._rect);\n        if (over > overMax) {\n          overMax = over;\n          collide = n;\n        }\n      });\n      return {collide, over: overMax};\n    }\n    */\n    /** called to cache the nodes pixel rectangles used for collision detection during drag */\n    cacheRects(w, h, top, right, bottom, left) {\n        this.nodes.forEach(n => n._rect = {\n            y: n.y * h + top,\n            x: n.x * w + left,\n            w: n.w * w - left - right,\n            h: n.h * h - top - bottom\n        });\n        return this;\n    }\n    /** called to possibly swap between 2 nodes (same size or column, not locked, touching), returning true if successful */\n    swap(a, b) {\n        if (!b || b.locked || !a || a.locked)\n            return false;\n        function _doSwap() {\n            let x = b.x, y = b.y;\n            b.x = a.x;\n            b.y = a.y; // b -> a position\n            if (a.h != b.h) {\n                a.x = x;\n                a.y = b.y + b.h; // a -> goes after b\n            }\n            else if (a.w != b.w) {\n                a.x = b.x + b.w;\n                a.y = y; // a -> goes after b\n            }\n            else {\n                a.x = x;\n                a.y = y; // a -> old b position\n            }\n            a._dirty = b._dirty = true;\n            return true;\n        }\n        let touching; // remember if we called it (vs undefined)\n        // same size and same row or column, and touching\n        if (a.w === b.w && a.h === b.h && (a.x === b.x || a.y === b.y) && (touching = Utils.isTouching(a, b)))\n            return _doSwap();\n        if (touching === false)\n            return; // IFF ran test and fail, bail out\n        // check for taking same columns (but different height) and touching\n        if (a.w === b.w && a.x === b.x && (touching || (touching = Utils.isTouching(a, b)))) {\n            if (b.y < a.y) {\n                let t = a;\n                a = b;\n                b = t;\n            } // swap a <-> b vars so a is first\n            return _doSwap();\n        }\n        if (touching === false)\n            return;\n        // check if taking same row (but different width) and touching\n        if (a.h === b.h && a.y === b.y && (touching || (touching = Utils.isTouching(a, b)))) {\n            if (b.x < a.x) {\n                let t = a;\n                a = b;\n                b = t;\n            } // swap a <-> b vars so a is first\n            return _doSwap();\n        }\n        return false;\n    }\n    isAreaEmpty(x, y, w, h) {\n        let nn = { x: x || 0, y: y || 0, w: w || 1, h: h || 1 };\n        return !this.collide(nn);\n    }\n    /** re-layout grid items to reclaim any empty space - optionally keeping the sort order exactly the same ('list' mode) vs truly finding an empty spaces */\n    compact(layout = 'compact', doSort = true) {\n        if (this.nodes.length === 0)\n            return this;\n        if (doSort)\n            this.sortNodes();\n        const wasBatch = this.batchMode;\n        if (!wasBatch)\n            this.batchUpdate();\n        const wasColumnResize = this._inColumnResize;\n        if (!wasColumnResize)\n            this._inColumnResize = true; // faster addNode()\n        let copyNodes = this.nodes;\n        this.nodes = []; // pretend we have no nodes to conflict layout to start with...\n        copyNodes.forEach((n, index, list) => {\n            let after;\n            if (!n.locked) {\n                n.autoPosition = true;\n                if (layout === 'list' && index)\n                    after = list[index - 1];\n            }\n            this.addNode(n, false, after); // 'false' for add event trigger\n        });\n        if (!wasColumnResize)\n            delete this._inColumnResize;\n        if (!wasBatch)\n            this.batchUpdate(false);\n        return this;\n    }\n    /** enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html) */\n    set float(val) {\n        if (this._float === val)\n            return;\n        this._float = val || false;\n        if (!val) {\n            this._packNodes()._notify();\n        }\n    }\n    /** float getter method */\n    get float() { return this._float || false; }\n    /** sort the nodes array from first to last, or reverse. Called during collision/placement to force an order */\n    sortNodes(dir = 1, column = this.column) {\n        this.nodes = Utils.sort(this.nodes, dir, column);\n        return this;\n    }\n    /** @internal called to top gravity pack the items back OR revert back to original Y positions when floating */\n    _packNodes() {\n        if (this.batchMode) {\n            return this;\n        }\n        this.sortNodes(); // first to last\n        if (this.float) {\n            // restore original Y pos\n            this.nodes.forEach(n => {\n                if (n._updating || n._orig === undefined || n.y === n._orig.y)\n                    return;\n                let newY = n.y;\n                while (newY > n._orig.y) {\n                    --newY;\n                    let collide = this.collide(n, { x: n.x, y: newY, w: n.w, h: n.h });\n                    if (!collide) {\n                        n._dirty = true;\n                        n.y = newY;\n                    }\n                }\n            });\n        }\n        else {\n            // top gravity pack\n            this.nodes.forEach((n, i) => {\n                if (n.locked)\n                    return;\n                while (n.y > 0) {\n                    let newY = i === 0 ? 0 : n.y - 1;\n                    let canBeMoved = i === 0 || !this.collide(n, { x: n.x, y: newY, w: n.w, h: n.h });\n                    if (!canBeMoved)\n                        break;\n                    // Note: must be dirty (from last position) for GridStack::OnChange CB to update positions\n                    // and move items back. The user 'change' CB should detect changes from the original\n                    // starting position instead.\n                    n._dirty = (n.y !== newY);\n                    n.y = newY;\n                }\n            });\n        }\n        return this;\n    }\n    /**\n     * given a random node, makes sure it's coordinates/values are valid in the current grid\n     * @param node to adjust\n     * @param resizing if out of bound, resize down or move into the grid to fit ?\n     */\n    prepareNode(node, resizing) {\n        node._id = node._id ?? GridStackEngine._idSeq++;\n        // if we're missing position, have the grid position us automatically (before we set them to 0,0)\n        if (node.x === undefined || node.y === undefined || node.x === null || node.y === null) {\n            node.autoPosition = true;\n        }\n        // assign defaults for missing required fields\n        let defaults = { x: 0, y: 0, w: 1, h: 1 };\n        Utils.defaults(node, defaults);\n        if (!node.autoPosition) {\n            delete node.autoPosition;\n        }\n        if (!node.noResize) {\n            delete node.noResize;\n        }\n        if (!node.noMove) {\n            delete node.noMove;\n        }\n        Utils.sanitizeMinMax(node);\n        // check for NaN (in case messed up strings were passed. can't do parseInt() || defaults.x above as 0 is valid #)\n        if (typeof node.x == 'string') {\n            node.x = Number(node.x);\n        }\n        if (typeof node.y == 'string') {\n            node.y = Number(node.y);\n        }\n        if (typeof node.w == 'string') {\n            node.w = Number(node.w);\n        }\n        if (typeof node.h == 'string') {\n            node.h = Number(node.h);\n        }\n        if (isNaN(node.x)) {\n            node.x = defaults.x;\n            node.autoPosition = true;\n        }\n        if (isNaN(node.y)) {\n            node.y = defaults.y;\n            node.autoPosition = true;\n        }\n        if (isNaN(node.w)) {\n            node.w = defaults.w;\n        }\n        if (isNaN(node.h)) {\n            node.h = defaults.h;\n        }\n        this.nodeBoundFix(node, resizing);\n        return node;\n    }\n    /** part2 of preparing a node to fit inside our grid - checks for x,y,w from grid dimensions */\n    nodeBoundFix(node, resizing) {\n        let before = node._orig || Utils.copyPos({}, node);\n        if (node.maxW) {\n            node.w = Math.min(node.w, node.maxW);\n        }\n        if (node.maxH) {\n            node.h = Math.min(node.h, node.maxH);\n        }\n        if (node.minW && node.minW <= this.column) {\n            node.w = Math.max(node.w, node.minW);\n        }\n        if (node.minH) {\n            node.h = Math.max(node.h, node.minH);\n        }\n        // if user loaded a larger than allowed widget for current # of columns,\n        // remember it's position & width so we can restore back (1 -> 12 column) #1655 #1985\n        // IFF we're not in the middle of column resizing!\n        const saveOrig = (node.x || 0) + (node.w || 1) > this.column;\n        if (saveOrig && this.column < 12 && !this._inColumnResize && node._id && this.findCacheLayout(node, 12) === -1) {\n            let copy = { ...node }; // need _id + positions\n            if (copy.autoPosition || copy.x === undefined) {\n                delete copy.x;\n                delete copy.y;\n            }\n            else\n                copy.x = Math.min(11, copy.x);\n            copy.w = Math.min(12, copy.w || 1);\n            this.cacheOneLayout(copy, 12);\n        }\n        if (node.w > this.column) {\n            node.w = this.column;\n        }\n        else if (node.w < 1) {\n            node.w = 1;\n        }\n        if (this.maxRow && node.h > this.maxRow) {\n            node.h = this.maxRow;\n        }\n        else if (node.h < 1) {\n            node.h = 1;\n        }\n        if (node.x < 0) {\n            node.x = 0;\n        }\n        if (node.y < 0) {\n            node.y = 0;\n        }\n        if (node.x + node.w > this.column) {\n            if (resizing) {\n                node.w = this.column - node.x;\n            }\n            else {\n                node.x = this.column - node.w;\n            }\n        }\n        if (this.maxRow && node.y + node.h > this.maxRow) {\n            if (resizing) {\n                node.h = this.maxRow - node.y;\n            }\n            else {\n                node.y = this.maxRow - node.h;\n            }\n        }\n        if (!Utils.samePos(node, before)) {\n            node._dirty = true;\n        }\n        return this;\n    }\n    /** returns a list of modified nodes from their original values */\n    getDirtyNodes(verify) {\n        // compare original x,y,w,h instead as _dirty can be a temporary state\n        if (verify) {\n            return this.nodes.filter(n => n._dirty && !Utils.samePos(n, n._orig));\n        }\n        return this.nodes.filter(n => n._dirty);\n    }\n    /** @internal call this to call onChange callback with dirty nodes so DOM can be updated */\n    _notify(removedNodes) {\n        if (this.batchMode || !this.onChange)\n            return this;\n        let dirtyNodes = (removedNodes || []).concat(this.getDirtyNodes());\n        this.onChange(dirtyNodes);\n        return this;\n    }\n    /** @internal remove dirty and last tried info */\n    cleanNodes() {\n        if (this.batchMode)\n            return this;\n        this.nodes.forEach(n => {\n            delete n._dirty;\n            delete n._lastTried;\n        });\n        return this;\n    }\n    /** @internal called to save initial position/size to track real dirty state.\n     * Note: should be called right after we call change event (so next API is can detect changes)\n     * as well as right before we start move/resize/enter (so we can restore items to prev values) */\n    saveInitial() {\n        this.nodes.forEach(n => {\n            n._orig = Utils.copyPos({}, n);\n            delete n._dirty;\n        });\n        this._hasLocked = this.nodes.some(n => n.locked);\n        return this;\n    }\n    /** @internal restore all the nodes back to initial values (called when we leave) */\n    restoreInitial() {\n        this.nodes.forEach(n => {\n            if (Utils.samePos(n, n._orig))\n                return;\n            Utils.copyPos(n, n._orig);\n            n._dirty = true;\n        });\n        this._notify();\n        return this;\n    }\n    /** find the first available empty spot for the given node width/height, updating the x,y attributes. return true if found.\n     * optionally you can pass your own existing node list and column count, otherwise defaults to that engine data.\n     * Optionally pass a widget to start search AFTER, meaning the order will remain the same but possibly have empty slots we skipped\n     */\n    findEmptyPosition(node, nodeList = this.nodes, column = this.column, after) {\n        let start = after ? after.y * column + (after.x + after.w) : 0;\n        let found = false;\n        for (let i = start; !found; ++i) {\n            let x = i % column;\n            let y = Math.floor(i / column);\n            if (x + node.w > column) {\n                continue;\n            }\n            let box = { x, y, w: node.w, h: node.h };\n            if (!nodeList.find(n => Utils.isIntercepted(box, n))) {\n                if (node.x !== x || node.y !== y)\n                    node._dirty = true;\n                node.x = x;\n                node.y = y;\n                delete node.autoPosition;\n                found = true;\n            }\n        }\n        return found;\n    }\n    /** call to add the given node to our list, fixing collision and re-packing */\n    addNode(node, triggerAddEvent = false, after) {\n        let dup = this.nodes.find(n => n._id === node._id);\n        if (dup)\n            return dup; // prevent inserting twice! return it instead.\n        // skip prepareNode if we're in middle of column resize (not new) but do check for bounds!\n        this._inColumnResize ? this.nodeBoundFix(node) : this.prepareNode(node);\n        delete node._temporaryRemoved;\n        delete node._removeDOM;\n        let skipCollision;\n        if (node.autoPosition && this.findEmptyPosition(node, this.nodes, this.column, after)) {\n            delete node.autoPosition; // found our slot\n            skipCollision = true;\n        }\n        this.nodes.push(node);\n        if (triggerAddEvent) {\n            this.addedNodes.push(node);\n        }\n        if (!skipCollision)\n            this._fixCollisions(node);\n        if (!this.batchMode) {\n            this._packNodes()._notify();\n        }\n        return node;\n    }\n    removeNode(node, removeDOM = true, triggerEvent = false) {\n        if (!this.nodes.find(n => n._id === node._id)) {\n            // TEST console.log(`Error: GridStackEngine.removeNode() node._id=${node._id} not found!`)\n            return this;\n        }\n        if (triggerEvent) { // we wait until final drop to manually track removed items (rather than during drag)\n            this.removedNodes.push(node);\n        }\n        if (removeDOM)\n            node._removeDOM = true; // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\n        // don't use 'faster' .splice(findIndex(),1) in case node isn't in our list, or in multiple times.\n        this.nodes = this.nodes.filter(n => n._id !== node._id);\n        if (!node._isAboutToRemove)\n            this._packNodes(); // if dragged out, no need to relayout as already done...\n        this._notify([node]);\n        return this;\n    }\n    removeAll(removeDOM = true) {\n        delete this._layouts;\n        if (!this.nodes.length)\n            return this;\n        removeDOM && this.nodes.forEach(n => n._removeDOM = true); // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\n        this.removedNodes = this.nodes;\n        this.nodes = [];\n        return this._notify(this.removedNodes);\n    }\n    /** checks if item can be moved (layout constrain) vs moveNode(), returning true if was able to move.\n     * In more complicated cases (maxRow) it will attempt at moving the item and fixing\n     * others in a clone first, then apply those changes if still within specs. */\n    moveNodeCheck(node, o) {\n        // if (node.locked) return false;\n        if (!this.changedPosConstrain(node, o))\n            return false;\n        o.pack = true;\n        // simpler case: move item directly...\n        if (!this.maxRow) {\n            return this.moveNode(node, o);\n        }\n        // complex case: create a clone with NO maxRow (will check for out of bounds at the end)\n        let clonedNode;\n        let clone = new GridStackEngine({\n            column: this.column,\n            float: this.float,\n            nodes: this.nodes.map(n => {\n                if (n._id === node._id) {\n                    clonedNode = { ...n };\n                    return clonedNode;\n                }\n                return { ...n };\n            })\n        });\n        if (!clonedNode)\n            return false;\n        // check if we're covering 50% collision and could move, while still being under maxRow or at least not making it worse\n        // (case where widget was somehow added past our max #2449)\n        let canMove = clone.moveNode(clonedNode, o) && clone.getRow() <= Math.max(this.getRow(), this.maxRow);\n        // else check if we can force a swap (float=true, or different shapes) on non-resize\n        if (!canMove && !o.resizing && o.collide) {\n            let collide = o.collide.el.gridstackNode; // find the source node the clone collided with at 50%\n            if (this.swap(node, collide)) { // swaps and mark dirty\n                this._notify();\n                return true;\n            }\n        }\n        if (!canMove)\n            return false;\n        // if clone was able to move, copy those mods over to us now instead of caller trying to do this all over!\n        // Note: we can't use the list directly as elements and other parts point to actual node, so copy content\n        clone.nodes.filter(n => n._dirty).forEach(c => {\n            let n = this.nodes.find(a => a._id === c._id);\n            if (!n)\n                return;\n            Utils.copyPos(n, c);\n            n._dirty = true;\n        });\n        this._notify();\n        return true;\n    }\n    /** return true if can fit in grid height constrain only (always true if no maxRow) */\n    willItFit(node) {\n        delete node._willFitPos;\n        if (!this.maxRow)\n            return true;\n        // create a clone with NO maxRow and check if still within size\n        let clone = new GridStackEngine({\n            column: this.column,\n            float: this.float,\n            nodes: this.nodes.map(n => { return { ...n }; })\n        });\n        let n = { ...node }; // clone node so we don't mod any settings on it but have full autoPosition and min/max as well! #1687\n        this.cleanupNode(n);\n        delete n.el;\n        delete n._id;\n        delete n.content;\n        delete n.grid;\n        clone.addNode(n);\n        if (clone.getRow() <= this.maxRow) {\n            node._willFitPos = Utils.copyPos({}, n);\n            return true;\n        }\n        return false;\n    }\n    /** true if x,y or w,h are different after clamping to min/max */\n    changedPosConstrain(node, p) {\n        // first make sure w,h are set for caller\n        p.w = p.w || node.w;\n        p.h = p.h || node.h;\n        if (node.x !== p.x || node.y !== p.y)\n            return true;\n        // check constrained w,h\n        if (node.maxW) {\n            p.w = Math.min(p.w, node.maxW);\n        }\n        if (node.maxH) {\n            p.h = Math.min(p.h, node.maxH);\n        }\n        if (node.minW) {\n            p.w = Math.max(p.w, node.minW);\n        }\n        if (node.minH) {\n            p.h = Math.max(p.h, node.minH);\n        }\n        return (node.w !== p.w || node.h !== p.h);\n    }\n    /** return true if the passed in node was actually moved (checks for no-op and locked) */\n    moveNode(node, o) {\n        if (!node || /*node.locked ||*/ !o)\n            return false;\n        let wasUndefinedPack;\n        if (o.pack === undefined && !this.batchMode) {\n            wasUndefinedPack = o.pack = true;\n        }\n        // constrain the passed in values and check if we're still changing our node\n        if (typeof o.x !== 'number') {\n            o.x = node.x;\n        }\n        if (typeof o.y !== 'number') {\n            o.y = node.y;\n        }\n        if (typeof o.w !== 'number') {\n            o.w = node.w;\n        }\n        if (typeof o.h !== 'number') {\n            o.h = node.h;\n        }\n        let resizing = (node.w !== o.w || node.h !== o.h);\n        let nn = Utils.copyPos({}, node, true); // get min/max out first, then opt positions next\n        Utils.copyPos(nn, o);\n        this.nodeBoundFix(nn, resizing);\n        Utils.copyPos(o, nn);\n        if (!o.forceCollide && Utils.samePos(node, o))\n            return false;\n        let prevPos = Utils.copyPos({}, node);\n        // check if we will need to fix collision at our new location\n        let collides = this.collideAll(node, nn, o.skip);\n        let needToMove = true;\n        if (collides.length) {\n            let activeDrag = node._moving && !o.nested;\n            // check to make sure we actually collided over 50% surface area while dragging\n            let collide = activeDrag ? this.directionCollideCoverage(node, o, collides) : collides[0];\n            // if we're enabling creation of sub-grids on the fly, see if we're covering 80% of either one, if we didn't already do that\n            if (activeDrag && collide && node.grid?.opts?.subGridDynamic && !node.grid._isTemp) {\n                let over = Utils.areaIntercept(o.rect, collide._rect);\n                let a1 = Utils.area(o.rect);\n                let a2 = Utils.area(collide._rect);\n                let perc = over / (a1 < a2 ? a1 : a2);\n                if (perc > .8) {\n                    collide.grid.makeSubGrid(collide.el, undefined, node);\n                    collide = undefined;\n                }\n            }\n            if (collide) {\n                needToMove = !this._fixCollisions(node, nn, collide, o); // check if already moved...\n            }\n            else {\n                needToMove = false; // we didn't cover >50% for a move, skip...\n                if (wasUndefinedPack)\n                    delete o.pack;\n            }\n        }\n        // now move (to the original ask vs the collision version which might differ) and repack things\n        if (needToMove) {\n            node._dirty = true;\n            Utils.copyPos(node, nn);\n        }\n        if (o.pack) {\n            this._packNodes()\n                ._notify();\n        }\n        return !Utils.samePos(node, prevPos); // pack might have moved things back\n    }\n    getRow() {\n        return this.nodes.reduce((row, n) => Math.max(row, n.y + n.h), 0);\n    }\n    beginUpdate(node) {\n        if (!node._updating) {\n            node._updating = true;\n            delete node._skipDown;\n            if (!this.batchMode)\n                this.saveInitial();\n        }\n        return this;\n    }\n    endUpdate() {\n        let n = this.nodes.find(n => n._updating);\n        if (n) {\n            delete n._updating;\n            delete n._skipDown;\n        }\n        return this;\n    }\n    /** saves a copy of the largest column layout (eg 12 even when rendering oneColumnMode) so we don't loose orig layout,\n     * returning a list of widgets for serialization */\n    save(saveElement = true, saveCB) {\n        // use the highest layout for any saved info so we can have full detail on reload #1849\n        let len = this._layouts?.length;\n        let layout = len && this.column !== (len - 1) ? this._layouts[len - 1] : null;\n        let list = [];\n        this.sortNodes();\n        this.nodes.forEach(n => {\n            let wl = layout?.find(l => l._id === n._id);\n            // use layout info fields instead if set\n            let w = { ...n, ...(wl || {}) };\n            Utils.removeInternalForSave(w, !saveElement);\n            if (saveCB)\n                saveCB(n, w);\n            list.push(w);\n        });\n        return list;\n    }\n    /** @internal called whenever a node is added or moved - updates the cached layouts */\n    layoutsNodesChange(nodes) {\n        if (!this._layouts || this._inColumnResize)\n            return this;\n        // remove smaller layouts - we will re-generate those on the fly... larger ones need to update\n        this._layouts.forEach((layout, column) => {\n            if (!layout || column === this.column)\n                return this;\n            if (column < this.column) {\n                this._layouts[column] = undefined;\n            }\n            else {\n                // we save the original x,y,w (h isn't cached) to see what actually changed to propagate better.\n                // NOTE: we don't need to check against out of bound scaling/moving as that will be done when using those cache values. #1785\n                let ratio = column / this.column;\n                nodes.forEach(node => {\n                    if (!node._orig)\n                        return; // didn't change (newly added ?)\n                    let n = layout.find(l => l._id === node._id);\n                    if (!n)\n                        return; // no cache for new nodes. Will use those values.\n                    // Y changed, push down same amount\n                    // TODO: detect doing item 'swaps' will help instead of move (especially in 1 column mode)\n                    if (n.y >= 0 && node.y !== node._orig.y) {\n                        n.y += (node.y - node._orig.y);\n                    }\n                    // X changed, scale from new position\n                    if (node.x !== node._orig.x) {\n                        n.x = Math.round(node.x * ratio);\n                    }\n                    // width changed, scale from new width\n                    if (node.w !== node._orig.w) {\n                        n.w = Math.round(node.w * ratio);\n                    }\n                    // ...height always carries over from cache\n                });\n            }\n        });\n        return this;\n    }\n    /**\n     * @internal Called to scale the widget width & position up/down based on the column change.\n     * Note we store previous layouts (especially original ones) to make it possible to go\n     * from say 12 -> 1 -> 12 and get back to where we were.\n     *\n     * @param prevColumn previous number of columns\n     * @param column  new column number\n     * @param nodes different sorted list (ex: DOM order) instead of current list\n     * @param layout specify the type of re-layout that will happen (position, size, etc...).\n     * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\n     */\n    columnChanged(prevColumn, column, nodes, layout = 'moveScale') {\n        if (!this.nodes.length || !column || prevColumn === column)\n            return this;\n        // simpler shortcuts layouts\n        const doCompact = layout === 'compact' || layout === 'list';\n        if (doCompact) {\n            this.sortNodes(1, prevColumn); // sort with original layout once and only once (new column will affect order otherwise)\n        }\n        // cache the current layout in case they want to go back (like 12 -> 1 -> 12) as it requires original data IFF we're sizing down (see below)\n        if (column < prevColumn)\n            this.cacheLayout(this.nodes, prevColumn);\n        this.batchUpdate(); // do this EARLY as it will call saveInitial() so we can detect where we started for _dirty and collision\n        let newNodes = [];\n        // if we're going to 1 column and using DOM order (item passed in) rather than default sorting, then generate that layout\n        let domOrder = false;\n        if (column === 1 && nodes?.length) {\n            domOrder = true;\n            let top = 0;\n            nodes.forEach(n => {\n                n.x = 0;\n                n.w = 1;\n                n.y = Math.max(n.y, top);\n                top = n.y + n.h;\n            });\n            newNodes = nodes;\n            nodes = [];\n        }\n        else {\n            nodes = doCompact ? this.nodes : Utils.sort(this.nodes, -1, prevColumn); // current column reverse sorting so we can insert last to front (limit collision)\n        }\n        // see if we have cached previous layout IFF we are going up in size (restore) otherwise always\n        // generate next size down from where we are (looks more natural as you gradually size down).\n        if (column > prevColumn && this._layouts) {\n            const cacheNodes = this._layouts[column] || [];\n            // ...if not, start with the largest layout (if not already there) as down-scaling is more accurate\n            // by pretending we came from that larger column by assigning those values as starting point\n            let lastIndex = this._layouts.length - 1;\n            if (!cacheNodes.length && prevColumn !== lastIndex && this._layouts[lastIndex]?.length) {\n                prevColumn = lastIndex;\n                this._layouts[lastIndex].forEach(cacheNode => {\n                    let n = nodes.find(n => n._id === cacheNode._id);\n                    if (n) {\n                        // still current, use cache info positions\n                        if (!doCompact && !cacheNode.autoPosition) {\n                            n.x = cacheNode.x ?? n.x;\n                            n.y = cacheNode.y ?? n.y;\n                        }\n                        n.w = cacheNode.w ?? n.w;\n                        if (cacheNode.x == undefined || cacheNode.y === undefined)\n                            n.autoPosition = true;\n                    }\n                });\n            }\n            // if we found cache re-use those nodes that are still current\n            cacheNodes.forEach(cacheNode => {\n                let j = nodes.findIndex(n => n._id === cacheNode._id);\n                if (j !== -1) {\n                    const n = nodes[j];\n                    // still current, use cache info positions\n                    if (doCompact) {\n                        n.w = cacheNode.w; // only w is used, and don't trim the list\n                        return;\n                    }\n                    if (cacheNode.autoPosition || isNaN(cacheNode.x) || isNaN(cacheNode.y)) {\n                        this.findEmptyPosition(cacheNode, newNodes);\n                    }\n                    if (!cacheNode.autoPosition) {\n                        n.x = cacheNode.x ?? n.x;\n                        n.y = cacheNode.y ?? n.y;\n                        n.w = cacheNode.w ?? n.w;\n                        newNodes.push(n);\n                    }\n                    nodes.splice(j, 1);\n                }\n            });\n        }\n        // much simpler layout that just compacts\n        if (doCompact) {\n            this.compact(layout, false);\n        }\n        else {\n            // ...and add any extra non-cached ones\n            if (nodes.length) {\n                if (typeof layout === 'function') {\n                    layout(column, prevColumn, newNodes, nodes);\n                }\n                else if (!domOrder) {\n                    let ratio = (doCompact || layout === 'none') ? 1 : column / prevColumn;\n                    let move = (layout === 'move' || layout === 'moveScale');\n                    let scale = (layout === 'scale' || layout === 'moveScale');\n                    nodes.forEach(node => {\n                        // NOTE: x + w could be outside of the grid, but addNode() below will handle that\n                        node.x = (column === 1 ? 0 : (move ? Math.round(node.x * ratio) : Math.min(node.x, column - 1)));\n                        node.w = ((column === 1 || prevColumn === 1) ? 1 : scale ? (Math.round(node.w * ratio) || 1) : (Math.min(node.w, column)));\n                        newNodes.push(node);\n                    });\n                    nodes = [];\n                }\n            }\n            // finally re-layout them in reverse order (to get correct placement)\n            if (!domOrder)\n                newNodes = Utils.sort(newNodes, -1, column);\n            this._inColumnResize = true; // prevent cache update\n            this.nodes = []; // pretend we have no nodes to start with (add() will use same structures) to simplify layout\n            newNodes.forEach(node => {\n                this.addNode(node, false); // 'false' for add event trigger\n                delete node._orig; // make sure the commit doesn't try to restore things back to original\n            });\n        }\n        this.nodes.forEach(n => delete n._orig); // clear _orig before batch=false so it doesn't handle float=true restore\n        this.batchUpdate(false, !doCompact);\n        delete this._inColumnResize;\n        return this;\n    }\n    /**\n     * call to cache the given layout internally to the given location so we can restore back when column changes size\n     * @param nodes list of nodes\n     * @param column corresponding column index to save it under\n     * @param clear if true, will force other caches to be removed (default false)\n     */\n    cacheLayout(nodes, column, clear = false) {\n        let copy = [];\n        nodes.forEach((n, i) => {\n            // make sure we have an id in case this is new layout, else re-use id already set\n            if (n._id === undefined) {\n                const existing = n.id ? this.nodes.find(n2 => n2.id === n.id) : undefined; // find existing node using users id\n                n._id = existing?._id ?? GridStackEngine._idSeq++;\n            }\n            copy[i] = { x: n.x, y: n.y, w: n.w, _id: n._id }; // only thing we change is x,y,w and id to find it back\n        });\n        this._layouts = clear ? [] : this._layouts || []; // use array to find larger quick\n        this._layouts[column] = copy;\n        return this;\n    }\n    /**\n     * call to cache the given node layout internally to the given location so we can restore back when column changes size\n     * @param node single node to cache\n     * @param column corresponding column index to save it under\n     */\n    cacheOneLayout(n, column) {\n        n._id = n._id ?? GridStackEngine._idSeq++;\n        let l = { x: n.x, y: n.y, w: n.w, _id: n._id };\n        if (n.autoPosition || n.x === undefined) {\n            delete l.x;\n            delete l.y;\n            if (n.autoPosition)\n                l.autoPosition = true;\n        }\n        this._layouts = this._layouts || [];\n        this._layouts[column] = this._layouts[column] || [];\n        let index = this.findCacheLayout(n, column);\n        if (index === -1)\n            this._layouts[column].push(l);\n        else\n            this._layouts[column][index] = l;\n        return this;\n    }\n    findCacheLayout(n, column) {\n        return this._layouts?.[column]?.findIndex(l => l._id === n._id) ?? -1;\n    }\n    removeNodeFromLayoutCache(n) {\n        if (!this._layouts) {\n            return;\n        }\n        for (let i = 0; i < this._layouts.length; i++) {\n            let index = this.findCacheLayout(n, i);\n            if (index !== -1) {\n                this._layouts[i].splice(index, 1);\n            }\n        }\n    }\n    /** called to remove all internal values but the _id */\n    cleanupNode(node) {\n        for (let prop in node) {\n            if (prop[0] === '_' && prop !== '_id')\n                delete node[prop];\n        }\n        return this;\n    }\n}\n/** @internal unique global internal _id counter */\nGridStackEngine._idSeq = 0;\nexport { GridStackEngine };\n//# sourceMappingURL=gridstack-engine.js.map","/**\n * types.ts 9.5.1\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n// default values for grid options - used during init and when saving out\nexport const gridDefaults = {\n    alwaysShowResizeHandle: 'mobile',\n    animate: true,\n    auto: true,\n    cellHeight: 'auto',\n    cellHeightThrottle: 100,\n    cellHeightUnit: 'px',\n    column: 12,\n    draggable: { handle: '.grid-stack-item-content', appendTo: 'body', scroll: true },\n    handle: '.grid-stack-item-content',\n    itemClass: 'grid-stack-item',\n    margin: 10,\n    marginUnit: 'px',\n    maxRow: 0,\n    minRow: 0,\n    oneColumnSize: 768,\n    placeholderClass: 'grid-stack-placeholder',\n    placeholderText: '',\n    removableOptions: { accept: 'grid-stack-item', decline: 'grid-stack-non-removable' },\n    resizable: { handles: 'se' },\n    rtl: 'auto',\n    // **** same as not being set ****\n    // disableDrag: false,\n    // disableOneColumnMode: false,\n    // disableResize: false,\n    // float: false,\n    // handleClass: null,\n    // oneColumnModeDomSort: false,\n    // removable: false,\n    // staticGrid: false,\n    // styleInHead: false,\n    //removable\n};\n/** default dragIn options */\nexport const dragInDefaultOptions = {\n    handle: '.grid-stack-item-content',\n    appendTo: 'body',\n    // revert: 'invalid',\n    // scroll: false,\n};\n//# sourceMappingURL=types.js.map","/**\n * dd-manager.ts 9.5.1\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n/**\n * globals that are shared across Drag & Drop instances\n */\nexport class DDManager {\n}\n//# sourceMappingURL=dd-manager.js.map","/**\n * touch.ts 9.5.1\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\nimport { DDManager } from './dd-manager';\n/**\n * Detect touch support - Windows Surface devices and other touch devices\n * should we use this instead ? (what we had for always showing resize handles)\n * /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)\n */\nexport const isTouch = typeof window !== 'undefined' && typeof document !== 'undefined' &&\n    ('ontouchstart' in document\n        || 'ontouchstart' in window\n        // || !!window.TouchEvent // true on Windows 10 Chrome desktop so don't use this\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        || (window.DocumentTouch && document instanceof window.DocumentTouch)\n        || navigator.maxTouchPoints > 0\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        || navigator.msMaxTouchPoints > 0);\n// interface TouchCoord {x: number, y: number};\nclass DDTouch {\n}\n/**\n* Get the x,y position of a touch event\n*/\n// function getTouchCoords(e: TouchEvent): TouchCoord {\n//   return {\n//     x: e.changedTouches[0].pageX,\n//     y: e.changedTouches[0].pageY\n//   };\n// }\n/**\n * Simulate a mouse event based on a corresponding touch event\n * @param {Object} e A touch event\n * @param {String} simulatedType The corresponding mouse event\n */\nfunction simulateMouseEvent(e, simulatedType) {\n    // Ignore multi-touch events\n    if (e.touches.length > 1)\n        return;\n    // Prevent \"Ignored attempt to cancel a touchmove event with cancelable=false\" errors\n    if (e.cancelable)\n        e.preventDefault();\n    const touch = e.changedTouches[0], simulatedEvent = document.createEvent('MouseEvents');\n    // Initialize the simulated mouse event using the touch event's coordinates\n    simulatedEvent.initMouseEvent(simulatedType, // type\n    true, // bubbles\n    true, // cancelable\n    window, // view\n    1, // detail\n    touch.screenX, // screenX\n    touch.screenY, // screenY\n    touch.clientX, // clientX\n    touch.clientY, // clientY\n    false, // ctrlKey\n    false, // altKey\n    false, // shiftKey\n    false, // metaKey\n    0, // button\n    null // relatedTarget\n    );\n    // Dispatch the simulated event to the target element\n    e.target.dispatchEvent(simulatedEvent);\n}\n/**\n * Simulate a mouse event based on a corresponding Pointer event\n * @param {Object} e A pointer event\n * @param {String} simulatedType The corresponding mouse event\n */\nfunction simulatePointerMouseEvent(e, simulatedType) {\n    // Prevent \"Ignored attempt to cancel a touchmove event with cancelable=false\" errors\n    if (e.cancelable)\n        e.preventDefault();\n    const simulatedEvent = document.createEvent('MouseEvents');\n    // Initialize the simulated mouse event using the touch event's coordinates\n    simulatedEvent.initMouseEvent(simulatedType, // type\n    true, // bubbles\n    true, // cancelable\n    window, // view\n    1, // detail\n    e.screenX, // screenX\n    e.screenY, // screenY\n    e.clientX, // clientX\n    e.clientY, // clientY\n    false, // ctrlKey\n    false, // altKey\n    false, // shiftKey\n    false, // metaKey\n    0, // button\n    null // relatedTarget\n    );\n    // Dispatch the simulated event to the target element\n    e.target.dispatchEvent(simulatedEvent);\n}\n/**\n * Handle the touchstart events\n * @param {Object} e The widget element's touchstart event\n */\nexport function touchstart(e) {\n    // Ignore the event if another widget is already being handled\n    if (DDTouch.touchHandled)\n        return;\n    DDTouch.touchHandled = true;\n    // Simulate the mouse events\n    // simulateMouseEvent(e, 'mouseover');\n    // simulateMouseEvent(e, 'mousemove');\n    simulateMouseEvent(e, 'mousedown');\n}\n/**\n * Handle the touchmove events\n * @param {Object} e The document's touchmove event\n */\nexport function touchmove(e) {\n    // Ignore event if not handled by us\n    if (!DDTouch.touchHandled)\n        return;\n    simulateMouseEvent(e, 'mousemove');\n}\n/**\n * Handle the touchend events\n * @param {Object} e The document's touchend event\n */\nexport function touchend(e) {\n    // Ignore event if not handled\n    if (!DDTouch.touchHandled)\n        return;\n    // cancel delayed leave event when we release on ourself which happens BEFORE we get this!\n    if (DDTouch.pointerLeaveTimeout) {\n        window.clearTimeout(DDTouch.pointerLeaveTimeout);\n        delete DDTouch.pointerLeaveTimeout;\n    }\n    const wasDragging = !!DDManager.dragElement;\n    // Simulate the mouseup event\n    simulateMouseEvent(e, 'mouseup');\n    // simulateMouseEvent(event, 'mouseout');\n    // If the touch interaction did not move, it should trigger a click\n    if (!wasDragging) {\n        simulateMouseEvent(e, 'click');\n    }\n    // Unset the flag to allow other widgets to inherit the touch event\n    DDTouch.touchHandled = false;\n}\n/**\n * Note we don't get touchenter/touchleave (which are deprecated)\n * see https://stackoverflow.com/questions/27908339/js-touch-equivalent-for-mouseenter\n * so instead of PointerEvent to still get enter/leave and send the matching mouse event.\n */\nexport function pointerdown(e) {\n    // console.log(\"pointer down\")\n    if (e.pointerType === 'mouse')\n        return;\n    e.target.releasePointerCapture(e.pointerId); // <- Important!\n}\nexport function pointerenter(e) {\n    // ignore the initial one we get on pointerdown on ourself\n    if (!DDManager.dragElement) {\n        // console.log('pointerenter ignored');\n        return;\n    }\n    // console.log('pointerenter');\n    if (e.pointerType === 'mouse')\n        return;\n    simulatePointerMouseEvent(e, 'mouseenter');\n}\nexport function pointerleave(e) {\n    // ignore the leave on ourself we get before releasing the mouse over ourself\n    // by delaying sending the event and having the up event cancel us\n    if (!DDManager.dragElement) {\n        // console.log('pointerleave ignored');\n        return;\n    }\n    if (e.pointerType === 'mouse')\n        return;\n    DDTouch.pointerLeaveTimeout = window.setTimeout(() => {\n        delete DDTouch.pointerLeaveTimeout;\n        // console.log('pointerleave delayed');\n        simulatePointerMouseEvent(e, 'mouseleave');\n    }, 10);\n}\n//# sourceMappingURL=dd-touch.js.map","/**\n * dd-resizable-handle.ts 9.5.1\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\nimport { isTouch, pointerdown, touchend, touchmove, touchstart } from './dd-touch';\nclass DDResizableHandle {\n    constructor(host, direction, option) {\n        /** @internal true after we've moved enough pixels to start a resize */\n        this.moving = false;\n        this.host = host;\n        this.dir = direction;\n        this.option = option;\n        // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n        this._mouseDown = this._mouseDown.bind(this);\n        this._mouseMove = this._mouseMove.bind(this);\n        this._mouseUp = this._mouseUp.bind(this);\n        this._init();\n    }\n    /** @internal */\n    _init() {\n        const el = document.createElement('div');\n        el.classList.add('ui-resizable-handle');\n        el.classList.add(`${DDResizableHandle.prefix}${this.dir}`);\n        el.style.zIndex = '100';\n        el.style.userSelect = 'none';\n        this.el = el;\n        this.host.appendChild(this.el);\n        this.el.addEventListener('mousedown', this._mouseDown);\n        if (isTouch) {\n            this.el.addEventListener('touchstart', touchstart);\n            this.el.addEventListener('pointerdown', pointerdown);\n            // this.el.style.touchAction = 'none'; // not needed unlike pointerdown doc comment\n        }\n        return this;\n    }\n    /** call this when resize handle needs to be removed and cleaned up */\n    destroy() {\n        if (this.moving)\n            this._mouseUp(this.mouseDownEvent);\n        this.el.removeEventListener('mousedown', this._mouseDown);\n        if (isTouch) {\n            this.el.removeEventListener('touchstart', touchstart);\n            this.el.removeEventListener('pointerdown', pointerdown);\n        }\n        this.host.removeChild(this.el);\n        delete this.el;\n        delete this.host;\n        return this;\n    }\n    /** @internal called on mouse down on us: capture move on the entire document (mouse might not stay on us) until we release the mouse */\n    _mouseDown(e) {\n        this.mouseDownEvent = e;\n        document.addEventListener('mousemove', this._mouseMove, true); // capture, not bubble\n        document.addEventListener('mouseup', this._mouseUp, true);\n        if (isTouch) {\n            this.el.addEventListener('touchmove', touchmove);\n            this.el.addEventListener('touchend', touchend);\n        }\n        e.stopPropagation();\n        e.preventDefault();\n    }\n    /** @internal */\n    _mouseMove(e) {\n        let s = this.mouseDownEvent;\n        if (this.moving) {\n            this._triggerEvent('move', e);\n        }\n        else if (Math.abs(e.x - s.x) + Math.abs(e.y - s.y) > 2) {\n            // don't start unless we've moved at least 3 pixels\n            this.moving = true;\n            this._triggerEvent('start', this.mouseDownEvent);\n            this._triggerEvent('move', e);\n        }\n        e.stopPropagation();\n        e.preventDefault();\n    }\n    /** @internal */\n    _mouseUp(e) {\n        if (this.moving) {\n            this._triggerEvent('stop', e);\n        }\n        document.removeEventListener('mousemove', this._mouseMove, true);\n        document.removeEventListener('mouseup', this._mouseUp, true);\n        if (isTouch) {\n            this.el.removeEventListener('touchmove', touchmove);\n            this.el.removeEventListener('touchend', touchend);\n        }\n        delete this.moving;\n        delete this.mouseDownEvent;\n        e.stopPropagation();\n        e.preventDefault();\n    }\n    /** @internal */\n    _triggerEvent(name, event) {\n        if (this.option[name])\n            this.option[name](event);\n        return this;\n    }\n}\n/** @internal */\nDDResizableHandle.prefix = 'ui-resizable-';\nexport { DDResizableHandle };\n//# sourceMappingURL=dd-resizable-handle.js.map","/**\n * dd-base-impl.ts 9.5.1\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\nexport class DDBaseImplement {\n    constructor() {\n        /** @internal */\n        this._eventRegister = {};\n    }\n    /** returns the enable state, but you have to call enable()/disable() to change (as other things need to happen) */\n    get disabled() { return this._disabled; }\n    on(event, callback) {\n        this._eventRegister[event] = callback;\n    }\n    off(event) {\n        delete this._eventRegister[event];\n    }\n    enable() {\n        this._disabled = false;\n    }\n    disable() {\n        this._disabled = true;\n    }\n    destroy() {\n        delete this._eventRegister;\n    }\n    triggerEvent(eventName, event) {\n        if (!this.disabled && this._eventRegister && this._eventRegister[eventName])\n            return this._eventRegister[eventName](event);\n    }\n}\n//# sourceMappingURL=dd-base-impl.js.map","/**\n * dd-resizable.ts 9.5.1\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\nimport { DDResizableHandle } from './dd-resizable-handle';\nimport { DDBaseImplement } from './dd-base-impl';\nimport { Utils } from './utils';\nimport { DDManager } from './dd-manager';\nclass DDResizable extends DDBaseImplement {\n    constructor(el, opts = {}) {\n        super();\n        /** @internal */\n        this.rectScale = { x: 1, y: 1 };\n        /** @internal */\n        this._ui = () => {\n            const containmentEl = this.el.parentElement;\n            const containmentRect = containmentEl.getBoundingClientRect();\n            const newRect = {\n                width: this.originalRect.width,\n                height: this.originalRect.height + this.scrolled,\n                left: this.originalRect.left,\n                top: this.originalRect.top - this.scrolled\n            };\n            const rect = this.temporalRect || newRect;\n            return {\n                position: {\n                    left: (rect.left - containmentRect.left) * this.rectScale.x,\n                    top: (rect.top - containmentRect.top) * this.rectScale.y\n                },\n                size: {\n                    width: rect.width * this.rectScale.x,\n                    height: rect.height * this.rectScale.y\n                }\n                /* Gridstack ONLY needs position set above... keep around in case.\n                element: [this.el], // The object representing the element to be resized\n                helper: [], // TODO: not support yet - The object representing the helper that's being resized\n                originalElement: [this.el],// we don't wrap here, so simplify as this.el //The object representing the original element before it is wrapped\n                originalPosition: { // The position represented as { left, top } before the resizable is resized\n                  left: this.originalRect.left - containmentRect.left,\n                  top: this.originalRect.top - containmentRect.top\n                },\n                originalSize: { // The size represented as { width, height } before the resizable is resized\n                  width: this.originalRect.width,\n                  height: this.originalRect.height\n                }\n                */\n            };\n        };\n        this.el = el;\n        this.option = opts;\n        // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n        this._mouseOver = this._mouseOver.bind(this);\n        this._mouseOut = this._mouseOut.bind(this);\n        this.enable();\n        this._setupAutoHide(this.option.autoHide);\n        this._setupHandlers();\n    }\n    on(event, callback) {\n        super.on(event, callback);\n    }\n    off(event) {\n        super.off(event);\n    }\n    enable() {\n        super.enable();\n        this.el.classList.remove('ui-resizable-disabled');\n        this._setupAutoHide(this.option.autoHide);\n    }\n    disable() {\n        super.disable();\n        this.el.classList.add('ui-resizable-disabled');\n        this._setupAutoHide(false);\n    }\n    destroy() {\n        this._removeHandlers();\n        this._setupAutoHide(false);\n        delete this.el;\n        super.destroy();\n    }\n    updateOption(opts) {\n        let updateHandles = (opts.handles && opts.handles !== this.option.handles);\n        let updateAutoHide = (opts.autoHide && opts.autoHide !== this.option.autoHide);\n        Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n        if (updateHandles) {\n            this._removeHandlers();\n            this._setupHandlers();\n        }\n        if (updateAutoHide) {\n            this._setupAutoHide(this.option.autoHide);\n        }\n        return this;\n    }\n    /** @internal turns auto hide on/off */\n    _setupAutoHide(auto) {\n        if (auto) {\n            this.el.classList.add('ui-resizable-autohide');\n            // use mouseover and not mouseenter to get better performance and track for nested cases\n            this.el.addEventListener('mouseover', this._mouseOver);\n            this.el.addEventListener('mouseout', this._mouseOut);\n        }\n        else {\n            this.el.classList.remove('ui-resizable-autohide');\n            this.el.removeEventListener('mouseover', this._mouseOver);\n            this.el.removeEventListener('mouseout', this._mouseOut);\n            if (DDManager.overResizeElement === this) {\n                delete DDManager.overResizeElement;\n            }\n        }\n        return this;\n    }\n    /** @internal */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _mouseOver(e) {\n        // console.log(`${count++} pre-enter ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n        // already over a child, ignore. Ideally we just call e.stopPropagation() but see https://github.com/gridstack/gridstack.js/issues/2018\n        if (DDManager.overResizeElement || DDManager.dragElement)\n            return;\n        DDManager.overResizeElement = this;\n        // console.log(`${count++} enter ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n        this.el.classList.remove('ui-resizable-autohide');\n    }\n    /** @internal */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _mouseOut(e) {\n        // console.log(`${count++} pre-leave ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n        if (DDManager.overResizeElement !== this)\n            return;\n        delete DDManager.overResizeElement;\n        // console.log(`${count++} leave ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n        this.el.classList.add('ui-resizable-autohide');\n    }\n    /** @internal */\n    _setupHandlers() {\n        let handlerDirection = this.option.handles || 'e,s,se';\n        if (handlerDirection === 'all') {\n            handlerDirection = 'n,e,s,w,se,sw,ne,nw';\n        }\n        this.handlers = handlerDirection.split(',')\n            .map(dir => dir.trim())\n            .map(dir => new DDResizableHandle(this.el, dir, {\n            start: (event) => {\n                this._resizeStart(event);\n            },\n            stop: (event) => {\n                this._resizeStop(event);\n            },\n            move: (event) => {\n                this._resizing(event, dir);\n            }\n        }));\n        return this;\n    }\n    /** @internal */\n    _resizeStart(event) {\n        this.originalRect = this.el.getBoundingClientRect();\n        this.scrollEl = Utils.getScrollElement(this.el);\n        this.scrollY = this.scrollEl.scrollTop;\n        this.scrolled = 0;\n        this.startEvent = event;\n        this._setupHelper();\n        this._applyChange();\n        const ev = Utils.initEvent(event, { type: 'resizestart', target: this.el });\n        if (this.option.start) {\n            this.option.start(ev, this._ui());\n        }\n        this.el.classList.add('ui-resizable-resizing');\n        this.triggerEvent('resizestart', ev);\n        return this;\n    }\n    /** @internal */\n    _resizing(event, dir) {\n        this.scrolled = this.scrollEl.scrollTop - this.scrollY;\n        this.temporalRect = this._getChange(event, dir);\n        this._applyChange();\n        const ev = Utils.initEvent(event, { type: 'resize', target: this.el });\n        if (this.option.resize) {\n            this.option.resize(ev, this._ui());\n        }\n        this.triggerEvent('resize', ev);\n        return this;\n    }\n    /** @internal */\n    _resizeStop(event) {\n        const ev = Utils.initEvent(event, { type: 'resizestop', target: this.el });\n        if (this.option.stop) {\n            this.option.stop(ev); // Note: ui() not used by gridstack so don't pass\n        }\n        this.el.classList.remove('ui-resizable-resizing');\n        this.triggerEvent('resizestop', ev);\n        this._cleanHelper();\n        delete this.startEvent;\n        delete this.originalRect;\n        delete this.temporalRect;\n        delete this.scrollY;\n        delete this.scrolled;\n        return this;\n    }\n    /** @internal */\n    _setupHelper() {\n        this.elOriginStyleVal = DDResizable._originStyleProp.map(prop => this.el.style[prop]);\n        this.parentOriginStylePosition = this.el.parentElement.style.position;\n        const parent = this.el.parentElement;\n        const testEl = document.createElement('div');\n        Utils.addElStyles(testEl, {\n            opacity: '0',\n            position: 'fixed',\n            top: 0 + 'px',\n            left: 0 + 'px',\n            width: '1px',\n            height: '1px',\n            zIndex: '-999999',\n        });\n        parent.appendChild(testEl);\n        const testElPosition = testEl.getBoundingClientRect();\n        parent.removeChild(testEl);\n        this.rectScale = {\n            x: 1 / testElPosition.width,\n            y: 1 / testElPosition.height\n        };\n        if (getComputedStyle(this.el.parentElement).position.match(/static/)) {\n            this.el.parentElement.style.position = 'relative';\n        }\n        this.el.style.position = 'absolute';\n        this.el.style.opacity = '0.8';\n        return this;\n    }\n    /** @internal */\n    _cleanHelper() {\n        DDResizable._originStyleProp.forEach((prop, i) => {\n            this.el.style[prop] = this.elOriginStyleVal[i] || null;\n        });\n        this.el.parentElement.style.position = this.parentOriginStylePosition || null;\n        return this;\n    }\n    /** @internal */\n    _getChange(event, dir) {\n        const oEvent = this.startEvent;\n        const newRect = {\n            width: this.originalRect.width,\n            height: this.originalRect.height + this.scrolled,\n            left: this.originalRect.left,\n            top: this.originalRect.top - this.scrolled\n        };\n        const offsetX = event.clientX - oEvent.clientX;\n        const offsetY = event.clientY - oEvent.clientY;\n        if (dir.indexOf('e') > -1) {\n            newRect.width += offsetX;\n        }\n        else if (dir.indexOf('w') > -1) {\n            newRect.width -= offsetX;\n            newRect.left += offsetX;\n        }\n        if (dir.indexOf('s') > -1) {\n            newRect.height += offsetY;\n        }\n        else if (dir.indexOf('n') > -1) {\n            newRect.height -= offsetY;\n            newRect.top += offsetY;\n        }\n        const constrain = this._constrainSize(newRect.width, newRect.height);\n        if (Math.round(newRect.width) !== Math.round(constrain.width)) { // round to ignore slight round-off errors\n            if (dir.indexOf('w') > -1) {\n                newRect.left += newRect.width - constrain.width;\n            }\n            newRect.width = constrain.width;\n        }\n        if (Math.round(newRect.height) !== Math.round(constrain.height)) {\n            if (dir.indexOf('n') > -1) {\n                newRect.top += newRect.height - constrain.height;\n            }\n            newRect.height = constrain.height;\n        }\n        return newRect;\n    }\n    /** @internal constrain the size to the set min/max values */\n    _constrainSize(oWidth, oHeight) {\n        const maxWidth = this.option.maxWidth || Number.MAX_SAFE_INTEGER;\n        const minWidth = this.option.minWidth / this.rectScale.x || oWidth;\n        const maxHeight = this.option.maxHeight || Number.MAX_SAFE_INTEGER;\n        const minHeight = this.option.minHeight / this.rectScale.y || oHeight;\n        const width = Math.min(maxWidth, Math.max(minWidth, oWidth));\n        const height = Math.min(maxHeight, Math.max(minHeight, oHeight));\n        return { width, height };\n    }\n    /** @internal */\n    _applyChange() {\n        let containmentRect = { left: 0, top: 0, width: 0, height: 0 };\n        if (this.el.style.position === 'absolute') {\n            const containmentEl = this.el.parentElement;\n            const { left, top } = containmentEl.getBoundingClientRect();\n            containmentRect = { left, top, width: 0, height: 0 };\n        }\n        if (!this.temporalRect)\n            return this;\n        Object.keys(this.temporalRect).forEach(key => {\n            const value = this.temporalRect[key];\n            const scaleReciprocal = key === 'width' || key === 'left' ? this.rectScale.x : key === 'height' || key === 'top' ? this.rectScale.y : 1;\n            this.el.style[key] = (value - containmentRect[key]) * scaleReciprocal + 'px';\n        });\n        return this;\n    }\n    /** @internal */\n    _removeHandlers() {\n        this.handlers.forEach(handle => handle.destroy());\n        delete this.handlers;\n        return this;\n    }\n}\n/** @internal */\nDDResizable._originStyleProp = ['width', 'height', 'position', 'left', 'top', 'opacity', 'zIndex'];\nexport { DDResizable };\n//# sourceMappingURL=dd-resizable.js.map","/**\n * dd-draggable.ts 9.5.1\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\nimport { DDManager } from './dd-manager';\nimport { Utils } from './utils';\nimport { DDBaseImplement } from './dd-base-impl';\nimport { isTouch, touchend, touchmove, touchstart, pointerdown } from './dd-touch';\n// make sure we are not clicking on known object that handles mouseDown\nconst skipMouseDown = 'input,textarea,button,select,option,[contenteditable=\"true\"],.ui-resizable-handle';\n// let count = 0; // TEST\nclass DDDraggable extends DDBaseImplement {\n    constructor(el, option = {}) {\n        super();\n        /** @internal */\n        this.dragScale = { x: 1, y: 1 };\n        this.el = el;\n        this.option = option;\n        // get the element that is actually supposed to be dragged by\n        let handleName = option.handle.substring(1);\n        this.dragEl = el.classList.contains(handleName) ? el : el.querySelector(option.handle) || el;\n        // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n        this._mouseDown = this._mouseDown.bind(this);\n        this._mouseMove = this._mouseMove.bind(this);\n        this._mouseUp = this._mouseUp.bind(this);\n        this.enable();\n    }\n    on(event, callback) {\n        super.on(event, callback);\n    }\n    off(event) {\n        super.off(event);\n    }\n    enable() {\n        if (this.disabled === false)\n            return;\n        super.enable();\n        this.dragEl.addEventListener('mousedown', this._mouseDown);\n        if (isTouch) {\n            this.dragEl.addEventListener('touchstart', touchstart);\n            this.dragEl.addEventListener('pointerdown', pointerdown);\n            // this.dragEl.style.touchAction = 'none'; // not needed unlike pointerdown doc comment\n        }\n        this.el.classList.remove('ui-draggable-disabled');\n    }\n    disable(forDestroy = false) {\n        if (this.disabled === true)\n            return;\n        super.disable();\n        this.dragEl.removeEventListener('mousedown', this._mouseDown);\n        if (isTouch) {\n            this.dragEl.removeEventListener('touchstart', touchstart);\n            this.dragEl.removeEventListener('pointerdown', pointerdown);\n        }\n        if (!forDestroy)\n            this.el.classList.add('ui-draggable-disabled');\n    }\n    destroy() {\n        if (this.dragTimeout)\n            window.clearTimeout(this.dragTimeout);\n        delete this.dragTimeout;\n        if (this.mouseDownEvent)\n            this._mouseUp(this.mouseDownEvent);\n        this.disable(true);\n        delete this.el;\n        delete this.helper;\n        delete this.option;\n        super.destroy();\n    }\n    updateOption(opts) {\n        Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n        return this;\n    }\n    /** @internal call when mouse goes down before a dragstart happens */\n    _mouseDown(e) {\n        // don't let more than one widget handle mouseStart\n        if (DDManager.mouseHandled)\n            return;\n        if (e.button !== 0)\n            return true; // only left click\n        // make sure we are not clicking on known object that handles mouseDown, or ones supplied by the user\n        if (e.target.closest(skipMouseDown))\n            return true;\n        if (this.option.cancel) {\n            if (e.target.closest(this.option.cancel))\n                return true;\n        }\n        // REMOVE: why would we get the event if it wasn't for us or child ?\n        // make sure we are clicking on a drag handle or child of it...\n        // Note: we don't need to check that's handle is an immediate child, as mouseHandled will prevent parents from also handling it (lowest wins)\n        // let className = this.option.handle.substring(1);\n        // let el = e.target as HTMLElement;\n        // while (el && !el.classList.contains(className)) { el = el.parentElement; }\n        // if (!el) return;\n        this.mouseDownEvent = e;\n        delete this.dragging;\n        delete DDManager.dragElement;\n        delete DDManager.dropElement;\n        // document handler so we can continue receiving moves as the item is 'fixed' position, and capture=true so WE get a first crack\n        document.addEventListener('mousemove', this._mouseMove, true); // true=capture, not bubble\n        document.addEventListener('mouseup', this._mouseUp, true);\n        if (isTouch) {\n            this.dragEl.addEventListener('touchmove', touchmove);\n            this.dragEl.addEventListener('touchend', touchend);\n        }\n        e.preventDefault();\n        // preventDefault() prevents blur event which occurs just after mousedown event.\n        // if an editable content has focus, then blur must be call\n        if (document.activeElement)\n            document.activeElement.blur();\n        DDManager.mouseHandled = true;\n        return true;\n    }\n    /** @internal method to call actual drag event */\n    _callDrag(e) {\n        if (!this.dragging)\n            return;\n        const ev = Utils.initEvent(e, { target: this.el, type: 'drag' });\n        if (this.option.drag) {\n            this.option.drag(ev, this.ui());\n        }\n        this.triggerEvent('drag', ev);\n    }\n    /** @internal called when the main page (after successful mousedown) receives a move event to drag the item around the screen */\n    _mouseMove(e) {\n        // console.log(`${count++} move ${e.x},${e.y}`)\n        let s = this.mouseDownEvent;\n        if (this.dragging) {\n            this._dragFollow(e);\n            // delay actual grid handling drag until we pause for a while if set\n            if (DDManager.pauseDrag) {\n                const pause = Number.isInteger(DDManager.pauseDrag) ? DDManager.pauseDrag : 100;\n                if (this.dragTimeout)\n                    window.clearTimeout(this.dragTimeout);\n                this.dragTimeout = window.setTimeout(() => this._callDrag(e), pause);\n            }\n            else {\n                this._callDrag(e);\n            }\n        }\n        else if (Math.abs(e.x - s.x) + Math.abs(e.y - s.y) > 3) {\n            /**\n             * don't start unless we've moved at least 3 pixels\n             */\n            this.dragging = true;\n            DDManager.dragElement = this;\n            // if we're dragging an actual grid item, set the current drop as the grid (to detect enter/leave)\n            let grid = this.el.gridstackNode?.grid;\n            if (grid) {\n                DDManager.dropElement = grid.el.ddElement.ddDroppable;\n            }\n            else {\n                delete DDManager.dropElement;\n            }\n            this.helper = this._createHelper(e);\n            this._setupHelperContainmentStyle();\n            this.dragOffset = this._getDragOffset(e, this.el, this.helperContainment);\n            const ev = Utils.initEvent(e, { target: this.el, type: 'dragstart' });\n            this._setupHelperStyle(e);\n            if (this.option.start) {\n                this.option.start(ev, this.ui());\n            }\n            this.triggerEvent('dragstart', ev);\n        }\n        e.preventDefault(); // needed otherwise we get text sweep text selection as we drag around\n        return true;\n    }\n    /** @internal call when the mouse gets released to drop the item at current location */\n    _mouseUp(e) {\n        document.removeEventListener('mousemove', this._mouseMove, true);\n        document.removeEventListener('mouseup', this._mouseUp, true);\n        if (isTouch) {\n            this.dragEl.removeEventListener('touchmove', touchmove, true);\n            this.dragEl.removeEventListener('touchend', touchend, true);\n        }\n        if (this.dragging) {\n            delete this.dragging;\n            // reset the drop target if dragging over ourself (already parented, just moving during stop callback below)\n            if (DDManager.dropElement?.el === this.el.parentElement) {\n                delete DDManager.dropElement;\n            }\n            this.helperContainment.style.position = this.parentOriginStylePosition || null;\n            if (this.helper === this.el) {\n                this._removeHelperStyle();\n            }\n            else {\n                this.helper.remove();\n            }\n            const ev = Utils.initEvent(e, { target: this.el, type: 'dragstop' });\n            if (this.option.stop) {\n                this.option.stop(ev); // NOTE: destroy() will be called when removing item, so expect NULL ptr after!\n            }\n            this.triggerEvent('dragstop', ev);\n            // call the droppable method to receive the item\n            if (DDManager.dropElement) {\n                DDManager.dropElement.drop(e);\n            }\n        }\n        delete this.helper;\n        delete this.mouseDownEvent;\n        delete DDManager.dragElement;\n        delete DDManager.dropElement;\n        delete DDManager.mouseHandled;\n        e.preventDefault();\n    }\n    /** @internal create a clone copy (or user defined method) of the original drag item if set */\n    _createHelper(event) {\n        let helper = this.el;\n        if (typeof this.option.helper === 'function') {\n            helper = this.option.helper(event);\n        }\n        else if (this.option.helper === 'clone') {\n            helper = Utils.cloneNode(this.el);\n        }\n        if (!document.body.contains(helper)) {\n            Utils.appendTo(helper, this.option.appendTo === 'parent' ? this.el.parentElement : this.option.appendTo);\n        }\n        if (helper === this.el) {\n            this.dragElementOriginStyle = DDDraggable.originStyleProp.map(prop => this.el.style[prop]);\n        }\n        return helper;\n    }\n    /** @internal set the fix position of the dragged item */\n    _setupHelperStyle(e) {\n        this.helper.classList.add('ui-draggable-dragging');\n        // TODO: set all at once with style.cssText += ... ? https://stackoverflow.com/questions/3968593\n        const style = this.helper.style;\n        style.pointerEvents = 'none'; // needed for over items to get enter/leave\n        // style.cursor = 'move'; //  TODO: can't set with pointerEvents=none ! (done in CSS as well)\n        style.width = this.dragOffset.width + 'px';\n        style.height = this.dragOffset.height + 'px';\n        style.willChange = 'left, top';\n        style.position = 'fixed'; // let us drag between grids by not clipping as parent .grid-stack is position: 'relative'\n        this._dragFollow(e); // now position it\n        style.transition = 'none'; // show up instantly\n        setTimeout(() => {\n            if (this.helper) {\n                style.transition = null; // recover animation\n            }\n        }, 0);\n        return this;\n    }\n    /** @internal restore back the original style before dragging */\n    _removeHelperStyle() {\n        this.helper.classList.remove('ui-draggable-dragging');\n        let node = this.helper?.gridstackNode;\n        // don't bother restoring styles if we're gonna remove anyway...\n        if (!node?._isAboutToRemove && this.dragElementOriginStyle) {\n            let helper = this.helper;\n            // don't animate, otherwise we animate offseted when switching back to 'absolute' from 'fixed'.\n            // TODO: this also removes resizing animation which doesn't have this issue, but others.\n            // Ideally both would animate ('move' would immediately restore 'absolute' and adjust coordinate to match,\n            // then trigger a delay (repaint) to restore to final dest with animate) but then we need to make sure 'resizestop'\n            // is called AFTER 'transitionend' event is received (see https://github.com/gridstack/gridstack.js/issues/2033)\n            let transition = this.dragElementOriginStyle['transition'] || null;\n            helper.style.transition = this.dragElementOriginStyle['transition'] = 'none'; // can't be NULL #1973\n            DDDraggable.originStyleProp.forEach(prop => helper.style[prop] = this.dragElementOriginStyle[prop] || null);\n            setTimeout(() => helper.style.transition = transition, 50); // recover animation from saved vars after a pause (0 isn't enough #1973)\n        }\n        delete this.dragElementOriginStyle;\n        return this;\n    }\n    /** @internal updates the top/left position to follow the mouse */\n    _dragFollow(e) {\n        let containmentRect = { left: 0, top: 0 };\n        // if (this.helper.style.position === 'absolute') { // we use 'fixed'\n        //   const { left, top } = this.helperContainment.getBoundingClientRect();\n        //   containmentRect = { left, top };\n        // }\n        const style = this.helper.style;\n        const offset = this.dragOffset;\n        style.left = (e.clientX + offset.offsetLeft - containmentRect.left) * this.dragScale.x + 'px';\n        style.top = (e.clientY + offset.offsetTop - containmentRect.top) * this.dragScale.y + 'px';\n    }\n    /** @internal */\n    _setupHelperContainmentStyle() {\n        this.helperContainment = this.helper.parentElement;\n        if (this.helper.style.position !== 'fixed') {\n            this.parentOriginStylePosition = this.helperContainment.style.position;\n            if (getComputedStyle(this.helperContainment).position.match(/static/)) {\n                this.helperContainment.style.position = 'relative';\n            }\n        }\n        return this;\n    }\n    /** @internal */\n    _getDragOffset(event, el, parent) {\n        // in case ancestor has transform/perspective css properties that change the viewpoint\n        let xformOffsetX = 0;\n        let xformOffsetY = 0;\n        if (parent) {\n            const testEl = document.createElement('div');\n            Utils.addElStyles(testEl, {\n                opacity: '0',\n                position: 'fixed',\n                top: 0 + 'px',\n                left: 0 + 'px',\n                width: '1px',\n                height: '1px',\n                zIndex: '-999999',\n            });\n            parent.appendChild(testEl);\n            const testElPosition = testEl.getBoundingClientRect();\n            parent.removeChild(testEl);\n            xformOffsetX = testElPosition.left;\n            xformOffsetY = testElPosition.top;\n            this.dragScale = {\n                x: 1 / testElPosition.width,\n                y: 1 / testElPosition.height\n            };\n        }\n        const targetOffset = el.getBoundingClientRect();\n        return {\n            left: targetOffset.left,\n            top: targetOffset.top,\n            offsetLeft: -event.clientX + targetOffset.left - xformOffsetX,\n            offsetTop: -event.clientY + targetOffset.top - xformOffsetY,\n            width: targetOffset.width * this.dragScale.x,\n            height: targetOffset.height * this.dragScale.y\n        };\n    }\n    /** @internal TODO: set to public as called by DDDroppable! */\n    ui() {\n        const containmentEl = this.el.parentElement;\n        const containmentRect = containmentEl.getBoundingClientRect();\n        const offset = this.helper.getBoundingClientRect();\n        return {\n            position: {\n                top: (offset.top - containmentRect.top) * this.dragScale.y,\n                left: (offset.left - containmentRect.left) * this.dragScale.x\n            }\n            /* not used by GridStack for now...\n            helper: [this.helper], //The object arr representing the helper that's being dragged.\n            offset: { top: offset.top, left: offset.left } // Current offset position of the helper as { top, left } object.\n            */\n        };\n    }\n}\n/** @internal properties we change during dragging, and restore back */\nDDDraggable.originStyleProp = ['transition', 'pointerEvents', 'position', 'left', 'top', 'minWidth', 'willChange'];\nexport { DDDraggable };\n//# sourceMappingURL=dd-draggable.js.map","/**\n * dd-droppable.ts 9.5.1\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\nimport { DDManager } from './dd-manager';\nimport { DDBaseImplement } from './dd-base-impl';\nimport { Utils } from './utils';\nimport { isTouch, pointerenter, pointerleave } from './dd-touch';\n// let count = 0; // TEST\nexport class DDDroppable extends DDBaseImplement {\n    constructor(el, opts = {}) {\n        super();\n        this.el = el;\n        this.option = opts;\n        // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n        this._mouseEnter = this._mouseEnter.bind(this);\n        this._mouseLeave = this._mouseLeave.bind(this);\n        this.enable();\n        this._setupAccept();\n    }\n    on(event, callback) {\n        super.on(event, callback);\n    }\n    off(event) {\n        super.off(event);\n    }\n    enable() {\n        if (this.disabled === false)\n            return;\n        super.enable();\n        this.el.classList.add('ui-droppable');\n        this.el.classList.remove('ui-droppable-disabled');\n        this.el.addEventListener('mouseenter', this._mouseEnter);\n        this.el.addEventListener('mouseleave', this._mouseLeave);\n        if (isTouch) {\n            this.el.addEventListener('pointerenter', pointerenter);\n            this.el.addEventListener('pointerleave', pointerleave);\n        }\n    }\n    disable(forDestroy = false) {\n        if (this.disabled === true)\n            return;\n        super.disable();\n        this.el.classList.remove('ui-droppable');\n        if (!forDestroy)\n            this.el.classList.add('ui-droppable-disabled');\n        this.el.removeEventListener('mouseenter', this._mouseEnter);\n        this.el.removeEventListener('mouseleave', this._mouseLeave);\n        if (isTouch) {\n            this.el.removeEventListener('pointerenter', pointerenter);\n            this.el.removeEventListener('pointerleave', pointerleave);\n        }\n    }\n    destroy() {\n        this.disable(true);\n        this.el.classList.remove('ui-droppable');\n        this.el.classList.remove('ui-droppable-disabled');\n        super.destroy();\n    }\n    updateOption(opts) {\n        Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n        this._setupAccept();\n        return this;\n    }\n    /** @internal called when the cursor enters our area - prepare for a possible drop and track leaving */\n    _mouseEnter(e) {\n        // console.log(`${count++} Enter ${this.el.id || (this.el as GridHTMLElement).gridstack.opts.id}`); // TEST\n        if (!DDManager.dragElement)\n            return;\n        if (!this._canDrop(DDManager.dragElement.el))\n            return;\n        e.preventDefault();\n        e.stopPropagation();\n        // make sure when we enter this, that the last one gets a leave FIRST to correctly cleanup as we don't always do\n        if (DDManager.dropElement && DDManager.dropElement !== this) {\n            DDManager.dropElement._mouseLeave(e);\n        }\n        DDManager.dropElement = this;\n        const ev = Utils.initEvent(e, { target: this.el, type: 'dropover' });\n        if (this.option.over) {\n            this.option.over(ev, this._ui(DDManager.dragElement));\n        }\n        this.triggerEvent('dropover', ev);\n        this.el.classList.add('ui-droppable-over');\n        // console.log('tracking'); // TEST\n    }\n    /** @internal called when the item is leaving our area, stop tracking if we had moving item */\n    _mouseLeave(e) {\n        // console.log(`${count++} Leave ${this.el.id || (this.el as GridHTMLElement).gridstack.opts.id}`); // TEST\n        if (!DDManager.dragElement || DDManager.dropElement !== this)\n            return;\n        e.preventDefault();\n        e.stopPropagation();\n        const ev = Utils.initEvent(e, { target: this.el, type: 'dropout' });\n        if (this.option.out) {\n            this.option.out(ev, this._ui(DDManager.dragElement));\n        }\n        this.triggerEvent('dropout', ev);\n        if (DDManager.dropElement === this) {\n            delete DDManager.dropElement;\n            // console.log('not tracking'); // TEST\n            // if we're still over a parent droppable, send it an enter as we don't get one from leaving nested children\n            let parentDrop;\n            let parent = this.el.parentElement;\n            while (!parentDrop && parent) {\n                parentDrop = parent.ddElement?.ddDroppable;\n                parent = parent.parentElement;\n            }\n            if (parentDrop) {\n                parentDrop._mouseEnter(e);\n            }\n        }\n    }\n    /** item is being dropped on us - called by the drag mouseup handler - this calls the client drop event */\n    drop(e) {\n        e.preventDefault();\n        const ev = Utils.initEvent(e, { target: this.el, type: 'drop' });\n        if (this.option.drop) {\n            this.option.drop(ev, this._ui(DDManager.dragElement));\n        }\n        this.triggerEvent('drop', ev);\n    }\n    /** @internal true if element matches the string/method accept option */\n    _canDrop(el) {\n        return el && (!this.accept || this.accept(el));\n    }\n    /** @internal */\n    _setupAccept() {\n        if (!this.option.accept)\n            return this;\n        if (typeof this.option.accept === 'string') {\n            this.accept = (el) => el.classList.contains(this.option.accept) || el.matches(this.option.accept);\n        }\n        else {\n            this.accept = this.option.accept;\n        }\n        return this;\n    }\n    /** @internal */\n    _ui(drag) {\n        return {\n            draggable: drag.el,\n            ...drag.ui()\n        };\n    }\n}\n//# sourceMappingURL=dd-droppable.js.map","/**\n * dd-elements.ts 9.5.1\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\nimport { DDResizable } from './dd-resizable';\nimport { DDDraggable } from './dd-draggable';\nimport { DDDroppable } from './dd-droppable';\nexport class DDElement {\n    static init(el) {\n        if (!el.ddElement) {\n            el.ddElement = new DDElement(el);\n        }\n        return el.ddElement;\n    }\n    constructor(el) {\n        this.el = el;\n    }\n    on(eventName, callback) {\n        if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\n            this.ddDraggable.on(eventName, callback);\n        }\n        else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\n            this.ddDroppable.on(eventName, callback);\n        }\n        else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\n            this.ddResizable.on(eventName, callback);\n        }\n        return this;\n    }\n    off(eventName) {\n        if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\n            this.ddDraggable.off(eventName);\n        }\n        else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\n            this.ddDroppable.off(eventName);\n        }\n        else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\n            this.ddResizable.off(eventName);\n        }\n        return this;\n    }\n    setupDraggable(opts) {\n        if (!this.ddDraggable) {\n            this.ddDraggable = new DDDraggable(this.el, opts);\n        }\n        else {\n            this.ddDraggable.updateOption(opts);\n        }\n        return this;\n    }\n    cleanDraggable() {\n        if (this.ddDraggable) {\n            this.ddDraggable.destroy();\n            delete this.ddDraggable;\n        }\n        return this;\n    }\n    setupResizable(opts) {\n        if (!this.ddResizable) {\n            this.ddResizable = new DDResizable(this.el, opts);\n        }\n        else {\n            this.ddResizable.updateOption(opts);\n        }\n        return this;\n    }\n    cleanResizable() {\n        if (this.ddResizable) {\n            this.ddResizable.destroy();\n            delete this.ddResizable;\n        }\n        return this;\n    }\n    setupDroppable(opts) {\n        if (!this.ddDroppable) {\n            this.ddDroppable = new DDDroppable(this.el, opts);\n        }\n        else {\n            this.ddDroppable.updateOption(opts);\n        }\n        return this;\n    }\n    cleanDroppable() {\n        if (this.ddDroppable) {\n            this.ddDroppable.destroy();\n            delete this.ddDroppable;\n        }\n        return this;\n    }\n}\n//# sourceMappingURL=dd-element.js.map","/*!\n * GridStack 9.5.1\n * https://gridstackjs.com/\n *\n * Copyright (c) 2021-2022 Alain Dumesny\n * see root license https://github.com/gridstack/gridstack.js/tree/master/LICENSE\n */\nimport { GridStackEngine } from './gridstack-engine';\nimport { Utils, obsolete } from './utils';\nimport { gridDefaults, dragInDefaultOptions } from './types';\n/*\n * and include D&D by default\n * TODO: while we could generate a gridstack-static.js at smaller size - saves about 31k (41k -> 72k)\n * I don't know how to generate the DD only code at the remaining 31k to delay load as code depends on Gridstack.ts\n * also it caused loading issues in prod - see https://github.com/gridstack/gridstack.js/issues/2039\n */\nimport { DDGridStack } from './dd-gridstack';\nimport { isTouch } from './dd-touch';\nimport { DDManager } from './dd-manager';\n/** global instance */\nconst dd = new DDGridStack;\n// export all dependent file as well to make it easier for users to just import the main file\nexport * from './types';\nexport * from './utils';\nexport * from './gridstack-engine';\nexport * from './dd-gridstack';\n/**\n * Main gridstack class - you will need to call `GridStack.init()` first to initialize your grid.\n * Note: your grid elements MUST have the following classes for the CSS layout to work:\n * @example\n * <div class=\"grid-stack\">\n *   <div class=\"grid-stack-item\">\n *     <div class=\"grid-stack-item-content\">Item 1</div>\n *   </div>\n * </div>\n */\nclass GridStack {\n    /**\n     * initializing the HTML element, or selector string, into a grid will return the grid. Calling it again will\n     * simply return the existing instance (ignore any passed options). There is also an initAll() version that support\n     * multiple grids initialization at once. Or you can use addGrid() to create the entire grid from JSON.\n     * @param options grid options (optional)\n     * @param elOrString element or CSS selector (first one used) to convert to a grid (default to '.grid-stack' class selector)\n     *\n     * @example\n     * let grid = GridStack.init();\n     *\n     * Note: the HTMLElement (of type GridHTMLElement) will store a `gridstack: GridStack` value that can be retrieve later\n     * let grid = document.querySelector('.grid-stack').gridstack;\n     */\n    static init(options = {}, elOrString = '.grid-stack') {\n        let el = GridStack.getGridElement(elOrString);\n        if (!el) {\n            if (typeof elOrString === 'string') {\n                console.error('GridStack.initAll() no grid was found with selector \"' + elOrString + '\" - element missing or wrong selector ?' +\n                    '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\n            }\n            else {\n                console.error('GridStack.init() no grid element was passed.');\n            }\n            return null;\n        }\n        if (!el.gridstack) {\n            el.gridstack = new GridStack(el, Utils.cloneDeep(options));\n        }\n        return el.gridstack;\n    }\n    /**\n     * Will initialize a list of elements (given a selector) and return an array of grids.\n     * @param options grid options (optional)\n     * @param selector elements selector to convert to grids (default to '.grid-stack' class selector)\n     *\n     * @example\n     * let grids = GridStack.initAll();\n     * grids.forEach(...)\n     */\n    static initAll(options = {}, selector = '.grid-stack') {\n        let grids = [];\n        GridStack.getGridElements(selector).forEach(el => {\n            if (!el.gridstack) {\n                el.gridstack = new GridStack(el, Utils.cloneDeep(options));\n            }\n            grids.push(el.gridstack);\n        });\n        if (grids.length === 0) {\n            console.error('GridStack.initAll() no grid was found with selector \"' + selector + '\" - element missing or wrong selector ?' +\n                '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\n        }\n        return grids;\n    }\n    /**\n     * call to create a grid with the given options, including loading any children from JSON structure. This will call GridStack.init(), then\n     * grid.load() on any passed children (recursively). Great alternative to calling init() if you want entire grid to come from\n     * JSON serialized data, including options.\n     * @param parent HTML element parent to the grid\n     * @param opt grids options used to initialize the grid, and list of children\n     */\n    static addGrid(parent, opt = {}) {\n        if (!parent)\n            return null;\n        let el = parent;\n        if (el.gridstack) {\n            // already a grid - set option and load data\n            const grid = el.gridstack;\n            if (opt)\n                grid.opts = { ...grid.opts, ...opt };\n            if (opt.children !== undefined)\n                grid.load(opt.children);\n            return grid;\n        }\n        // create the grid element, but check if the passed 'parent' already has grid styling and should be used instead\n        const parentIsGrid = parent.classList.contains('grid-stack');\n        if (!parentIsGrid || GridStack.addRemoveCB) {\n            if (GridStack.addRemoveCB) {\n                el = GridStack.addRemoveCB(parent, opt, true, true);\n            }\n            else {\n                let doc = document.implementation.createHTMLDocument(''); // IE needs a param\n                doc.body.innerHTML = `<div class=\"grid-stack ${opt.class || ''}\"></div>`;\n                el = doc.body.children[0];\n                parent.appendChild(el);\n            }\n        }\n        // create grid class and load any children\n        let grid = GridStack.init(opt, el);\n        return grid;\n    }\n    /** call this method to register your engine instead of the default one.\n     * See instead `GridStackOptions.engineClass` if you only need to\n     * replace just one instance.\n     */\n    static registerEngine(engineClass) {\n        GridStack.engineClass = engineClass;\n    }\n    /** @internal create placeholder DIV as needed */\n    get placeholder() {\n        if (!this._placeholder) {\n            let placeholderChild = document.createElement('div'); // child so padding match item-content\n            placeholderChild.className = 'placeholder-content';\n            if (this.opts.placeholderText) {\n                placeholderChild.innerHTML = this.opts.placeholderText;\n            }\n            this._placeholder = document.createElement('div');\n            this._placeholder.classList.add(this.opts.placeholderClass, gridDefaults.itemClass, this.opts.itemClass);\n            this.placeholder.appendChild(placeholderChild);\n        }\n        return this._placeholder;\n    }\n    /**\n     * Construct a grid item from the given element and options\n     * @param el\n     * @param opts\n     */\n    constructor(el, opts = {}) {\n        /** @internal */\n        this._gsEventHandler = {};\n        /** @internal extra row added when dragging at the bottom of the grid */\n        this._extraDragRow = 0;\n        this.el = el; // exposed HTML element to the user\n        opts = opts || {}; // handles null/undefined/0\n        if (!el.classList.contains('grid-stack')) {\n            this.el.classList.add('grid-stack');\n        }\n        // if row property exists, replace minRow and maxRow instead\n        if (opts.row) {\n            opts.minRow = opts.maxRow = opts.row;\n            delete opts.row;\n        }\n        let rowAttr = Utils.toNumber(el.getAttribute('gs-row'));\n        // flag only valid in sub-grids (handled by parent, not here)\n        if (opts.column === 'auto') {\n            delete opts.column;\n        }\n        // save original setting so we can restore on save\n        if (opts.alwaysShowResizeHandle !== undefined) {\n            opts._alwaysShowResizeHandle = opts.alwaysShowResizeHandle;\n        }\n        // elements DOM attributes override any passed options (like CSS style) - merge the two together\n        let defaults = { ...Utils.cloneDeep(gridDefaults),\n            column: Utils.toNumber(el.getAttribute('gs-column')) || gridDefaults.column,\n            minRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-min-row')) || gridDefaults.minRow,\n            maxRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-max-row')) || gridDefaults.maxRow,\n            staticGrid: Utils.toBool(el.getAttribute('gs-static')) || gridDefaults.staticGrid,\n            draggable: {\n                handle: (opts.handleClass ? '.' + opts.handleClass : (opts.handle ? opts.handle : '')) || gridDefaults.draggable.handle,\n            },\n            removableOptions: {\n                accept: opts.itemClass || gridDefaults.removableOptions.accept,\n                decline: gridDefaults.removableOptions.decline\n            },\n        };\n        if (el.getAttribute('gs-animate')) { // default to true, but if set to false use that instead\n            defaults.animate = Utils.toBool(el.getAttribute('gs-animate'));\n        }\n        this.opts = Utils.defaults(opts, defaults);\n        opts = null; // make sure we use this.opts instead\n        this._initMargin(); // part of settings defaults...\n        // Now check if we're loading into 1 column mode FIRST so we don't do un-necessary work (like cellHeight = width / 12 then go 1 column)\n        if (this.opts.column !== 1 && !this.opts.disableOneColumnMode && this._widthOrContainer() <= this.opts.oneColumnSize) {\n            this._prevColumn = this.getColumn();\n            this.opts.column = 1;\n        }\n        if (this.opts.rtl === 'auto') {\n            this.opts.rtl = (el.style.direction === 'rtl');\n        }\n        if (this.opts.rtl) {\n            this.el.classList.add('grid-stack-rtl');\n        }\n        // check if we're been nested, and if so update our style and keep pointer around (used during save)\n        const grandParent = this.el.parentElement?.parentElement;\n        let parentGridItem = grandParent?.classList.contains(gridDefaults.itemClass) ? grandParent.gridstackNode : undefined;\n        if (parentGridItem) {\n            parentGridItem.subGrid = this;\n            this.parentGridItem = parentGridItem;\n            this.el.classList.add('grid-stack-nested');\n            parentGridItem.el.classList.add('grid-stack-sub-grid');\n        }\n        this._isAutoCellHeight = (this.opts.cellHeight === 'auto');\n        if (this._isAutoCellHeight || this.opts.cellHeight === 'initial') {\n            // make the cell content square initially (will use resize/column event to keep it square)\n            this.cellHeight(undefined, false);\n        }\n        else {\n            // append unit if any are set\n            if (typeof this.opts.cellHeight == 'number' && this.opts.cellHeightUnit && this.opts.cellHeightUnit !== gridDefaults.cellHeightUnit) {\n                this.opts.cellHeight = this.opts.cellHeight + this.opts.cellHeightUnit;\n                delete this.opts.cellHeightUnit;\n            }\n            this.cellHeight(this.opts.cellHeight, false);\n        }\n        // see if we need to adjust auto-hide\n        if (this.opts.alwaysShowResizeHandle === 'mobile') {\n            this.opts.alwaysShowResizeHandle = isTouch;\n        }\n        this._styleSheetClass = 'gs-id-' + GridStackEngine._idSeq++;\n        this.el.classList.add(this._styleSheetClass);\n        this._setStaticClass();\n        let engineClass = this.opts.engineClass || GridStack.engineClass || GridStackEngine;\n        this.engine = new engineClass({\n            column: this.getColumn(),\n            float: this.opts.float,\n            maxRow: this.opts.maxRow,\n            onChange: (cbNodes) => {\n                let maxH = 0;\n                this.engine.nodes.forEach(n => { maxH = Math.max(maxH, n.y + n.h); });\n                cbNodes.forEach(n => {\n                    let el = n.el;\n                    if (!el)\n                        return;\n                    if (n._removeDOM) {\n                        if (el)\n                            el.remove();\n                        delete n._removeDOM;\n                    }\n                    else {\n                        this._writePosAttr(el, n);\n                    }\n                });\n                this._updateStyles(false, maxH); // false = don't recreate, just append if need be\n            }\n        });\n        if (this.opts.auto) {\n            this.batchUpdate(); // prevent in between re-layout #1535 TODO: this only set float=true, need to prevent collision check...\n            this.getGridItems().forEach(el => this._prepareElement(el));\n            this.batchUpdate(false);\n        }\n        // load any passed in children as well, which overrides any DOM layout done above\n        if (this.opts.children) {\n            let children = this.opts.children;\n            delete this.opts.children;\n            if (children.length)\n                this.load(children); // don't load empty\n        }\n        this.setAnimation(this.opts.animate);\n        this._updateStyles();\n        this.el.classList.add('gs-' + this.opts.column);\n        // dynamic grids require pausing during drag to detect over to nest vs push\n        if (this.opts.subGridDynamic && !DDManager.pauseDrag)\n            DDManager.pauseDrag = true;\n        if (this.opts.draggable?.pause !== undefined)\n            DDManager.pauseDrag = this.opts.draggable.pause;\n        this._setupRemoveDrop();\n        this._setupAcceptWidget();\n        this._updateResizeEvent();\n    }\n    /**\n     * add a new widget and returns it.\n     *\n     * Widget will be always placed even if result height is more than actual grid height.\n     * You need to use `willItFit()` before calling addWidget for additional check.\n     * See also `makeWidget()`.\n     *\n     * @example\n     * let grid = GridStack.init();\n     * grid.addWidget({w: 3, content: 'hello'});\n     * grid.addWidget('<div class=\"grid-stack-item\"><div class=\"grid-stack-item-content\">hello</div></div>', {w: 3});\n     *\n     * @param el  GridStackWidget (which can have content string as well), html element, or string definition to add\n     * @param options widget position/size options (optional, and ignore if first param is already option) - see GridStackWidget\n     */\n    addWidget(els, options) {\n        function isGridStackWidget(w) {\n            return w.el !== undefined || w.x !== undefined || w.y !== undefined || w.w !== undefined || w.h !== undefined || w.content !== undefined ? true : false;\n        }\n        let el;\n        let node;\n        if (typeof els === 'string') {\n            let doc = document.implementation.createHTMLDocument(''); // IE needs a param\n            doc.body.innerHTML = els;\n            el = doc.body.children[0];\n        }\n        else if (arguments.length === 0 || arguments.length === 1 && isGridStackWidget(els)) {\n            node = options = els;\n            if (node?.el) {\n                el = node.el; // re-use element stored in the node\n            }\n            else if (GridStack.addRemoveCB) {\n                el = GridStack.addRemoveCB(this.el, options, true, false);\n            }\n            else {\n                let content = options?.content || '';\n                let doc = document.implementation.createHTMLDocument(''); // IE needs a param\n                doc.body.innerHTML = `<div class=\"grid-stack-item ${this.opts.itemClass || ''}\"><div class=\"grid-stack-item-content\">${content}</div></div>`;\n                el = doc.body.children[0];\n            }\n        }\n        else {\n            el = els;\n        }\n        if (!el)\n            return;\n        // if the caller ended up initializing the widget in addRemoveCB, or we stared with one already, skip the rest\n        node = el.gridstackNode;\n        if (node && el.parentElement === this.el && this.engine.nodes.find(n => n._id === node._id))\n            return el;\n        // Tempting to initialize the passed in opt with default and valid values, but this break knockout demos\n        // as the actual value are filled in when _prepareElement() calls el.getAttribute('gs-xyz') before adding the node.\n        // So make sure we load any DOM attributes that are not specified in passed in options (which override)\n        let domAttr = this._readAttr(el);\n        options = Utils.cloneDeep(options) || {}; // make a copy before we modify in case caller re-uses it\n        Utils.defaults(options, domAttr);\n        node = this.engine.prepareNode(options);\n        this._writeAttr(el, options);\n        if (this._insertNotAppend) {\n            this.el.prepend(el);\n        }\n        else {\n            this.el.appendChild(el);\n        }\n        this.makeWidget(el, options);\n        return el;\n    }\n    /**\n     * Convert an existing gridItem element into a sub-grid with the given (optional) options, else inherit them\n     * from the parent's subGrid options.\n     * @param el gridItem element to convert\n     * @param ops (optional) sub-grid options, else default to node, then parent settings, else defaults\n     * @param nodeToAdd (optional) node to add to the newly created sub grid (used when dragging over existing regular item)\n     * @returns newly created grid\n     */\n    makeSubGrid(el, ops, nodeToAdd, saveContent = true) {\n        let node = el.gridstackNode;\n        if (!node) {\n            node = this.makeWidget(el).gridstackNode;\n        }\n        if (node.subGrid?.el)\n            return node.subGrid; // already done\n        // find the template subGrid stored on a parent as fallback...\n        let subGridTemplate; // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let grid = this;\n        while (grid && !subGridTemplate) {\n            subGridTemplate = grid.opts?.subGridOpts;\n            grid = grid.parentGridItem?.grid;\n        }\n        //... and set the create options\n        ops = Utils.cloneDeep({ ...(subGridTemplate || {}), children: undefined, ...(ops || node.subGridOpts) });\n        node.subGridOpts = ops;\n        // if column special case it set, remember that flag and set default\n        let autoColumn;\n        if (ops.column === 'auto') {\n            autoColumn = true;\n            ops.column = Math.max(node.w || 1, nodeToAdd?.w || 1);\n            ops.disableOneColumnMode = true; // driven by parent\n        }\n        // if we're converting an existing full item, move over the content to be the first sub item in the new grid\n        let content = node.el.querySelector('.grid-stack-item-content');\n        let newItem;\n        let newItemOpt;\n        if (saveContent) {\n            this._removeDD(node.el); // remove D&D since it's set on content div\n            newItemOpt = { ...node, x: 0, y: 0 };\n            Utils.removeInternalForSave(newItemOpt);\n            delete newItemOpt.subGridOpts;\n            if (node.content) {\n                newItemOpt.content = node.content;\n                delete node.content;\n            }\n            if (GridStack.addRemoveCB) {\n                newItem = GridStack.addRemoveCB(this.el, newItemOpt, true, false);\n            }\n            else {\n                let doc = document.implementation.createHTMLDocument(''); // IE needs a param\n                doc.body.innerHTML = `<div class=\"grid-stack-item\"></div>`;\n                newItem = doc.body.children[0];\n                newItem.appendChild(content);\n                doc.body.innerHTML = `<div class=\"grid-stack-item-content\"></div>`;\n                content = doc.body.children[0];\n                node.el.appendChild(content);\n            }\n            this._prepareDragDropByNode(node); // ... and restore original D&D\n        }\n        // if we're adding an additional item, make the container large enough to have them both\n        if (nodeToAdd) {\n            let w = autoColumn ? ops.column : node.w;\n            let h = node.h + nodeToAdd.h;\n            let style = node.el.style;\n            style.transition = 'none'; // show up instantly so we don't see scrollbar with nodeToAdd\n            this.update(node.el, { w, h });\n            setTimeout(() => style.transition = null); // recover animation\n        }\n        let subGrid = node.subGrid = GridStack.addGrid(content, ops);\n        if (nodeToAdd?._moving)\n            subGrid._isTemp = true; // prevent re-nesting as we add over\n        if (autoColumn)\n            subGrid._autoColumn = true;\n        // add the original content back as a child of hte newly created grid\n        if (saveContent) {\n            subGrid.addWidget(newItem, newItemOpt);\n        }\n        // now add any additional node\n        if (nodeToAdd) {\n            if (nodeToAdd._moving) {\n                // create an artificial event even for the just created grid to receive this item\n                window.setTimeout(() => Utils.simulateMouseEvent(nodeToAdd._event, 'mouseenter', subGrid.el), 0);\n            }\n            else {\n                subGrid.addWidget(node.el, node);\n            }\n        }\n        return subGrid;\n    }\n    /**\n     * called when an item was converted into a nested grid to accommodate a dragged over item, but then item leaves - return back\n     * to the original grid-item. Also called to remove empty sub-grids when last item is dragged out (since re-creating is simple)\n     */\n    removeAsSubGrid(nodeThatRemoved) {\n        let pGrid = this.parentGridItem?.grid;\n        if (!pGrid)\n            return;\n        pGrid.batchUpdate();\n        pGrid.removeWidget(this.parentGridItem.el, true, true);\n        this.engine.nodes.forEach(n => {\n            // migrate any children over and offsetting by our location\n            n.x += this.parentGridItem.x;\n            n.y += this.parentGridItem.y;\n            pGrid.addWidget(n.el, n);\n        });\n        pGrid.batchUpdate(false);\n        if (this.parentGridItem)\n            delete this.parentGridItem.subGrid;\n        delete this.parentGridItem;\n        // create an artificial event for the original grid now that this one is gone (got a leave, but won't get enter)\n        if (nodeThatRemoved) {\n            window.setTimeout(() => Utils.simulateMouseEvent(nodeThatRemoved._event, 'mouseenter', pGrid.el), 0);\n        }\n    }\n    /**\n     * saves the current layout returning a list of widgets for serialization which might include any nested grids.\n     * @param saveContent if true (default) the latest html inside .grid-stack-content will be saved to GridStackWidget.content field, else it will\n     * be removed.\n     * @param saveGridOpt if true (default false), save the grid options itself, so you can call the new GridStack.addGrid()\n     * to recreate everything from scratch. GridStackOptions.children would then contain the widget list instead.\n     * @param saveCB callback for each node -> widget, so application can insert additional data to be saved into the widget data structure.\n     * @returns list of widgets or full grid option, including .children list of widgets\n     */\n    save(saveContent = true, saveGridOpt = false, saveCB = GridStack.saveCB) {\n        // return copied GridStackWidget (with optionally .el) we can modify at will...\n        let list = this.engine.save(saveContent, saveCB);\n        // check for HTML content and nested grids\n        list.forEach(n => {\n            if (saveContent && n.el && !n.subGrid && !saveCB) { // sub-grid are saved differently, not plain content\n                let sub = n.el.querySelector('.grid-stack-item-content');\n                n.content = sub ? sub.innerHTML : undefined;\n                if (!n.content)\n                    delete n.content;\n            }\n            else {\n                if (!saveContent && !saveCB) {\n                    delete n.content;\n                }\n                // check for nested grid\n                if (n.subGrid?.el) {\n                    const listOrOpt = n.subGrid.save(saveContent, saveGridOpt, saveCB);\n                    n.subGridOpts = (saveGridOpt ? listOrOpt : { children: listOrOpt });\n                    delete n.subGrid;\n                }\n            }\n            delete n.el;\n        });\n        // check if save entire grid options (needed for recursive) + children...\n        if (saveGridOpt) {\n            let o = Utils.cloneDeep(this.opts);\n            // delete default values that will be recreated on launch\n            if (o.marginBottom === o.marginTop && o.marginRight === o.marginLeft && o.marginTop === o.marginRight) {\n                o.margin = o.marginTop;\n                delete o.marginTop;\n                delete o.marginRight;\n                delete o.marginBottom;\n                delete o.marginLeft;\n            }\n            if (o.rtl === (this.el.style.direction === 'rtl')) {\n                o.rtl = 'auto';\n            }\n            if (this._isAutoCellHeight) {\n                o.cellHeight = 'auto';\n            }\n            if (this._autoColumn) {\n                o.column = 'auto';\n                delete o.disableOneColumnMode;\n            }\n            const origShow = o._alwaysShowResizeHandle;\n            delete o._alwaysShowResizeHandle;\n            if (origShow !== undefined) {\n                o.alwaysShowResizeHandle = origShow;\n            }\n            else {\n                delete o.alwaysShowResizeHandle;\n            }\n            Utils.removeInternalAndSame(o, gridDefaults);\n            o.children = list;\n            return o;\n        }\n        return list;\n    }\n    /**\n     * load the widgets from a list. This will call update() on each (matching by id) or add/remove widgets that are not there.\n     *\n     * @param layout list of widgets definition to update/create\n     * @param addAndRemove boolean (default true) or callback method can be passed to control if and how missing widgets can be added/removed, giving\n     * the user control of insertion.\n     *\n     * @example\n     * see http://gridstackjs.com/demo/serialization.html\n     */\n    load(items, addRemove = GridStack.addRemoveCB || true) {\n        items = Utils.cloneDeep(items); // so we can mod\n        // if passed list has coordinates, use them (insert from end to beginning for conflict resolution) else force widget same order\n        const haveCoord = items.some(w => w.x !== undefined || w.y !== undefined);\n        if (haveCoord)\n            items = Utils.sort(items, -1, this._prevColumn || this.getColumn());\n        this._insertNotAppend = haveCoord; // if we create in reverse order...\n        // if we're loading a layout into for example 1 column (_prevColumn is set only when going to 1) and items don't fit, make sure to save\n        // the original wanted layout so we can scale back up correctly #1471\n        const column = this.opts.column;\n        if (this._prevColumn && this._prevColumn !== column && items.some(n => ((n.x || 0) + n.w) > column)) {\n            this._ignoreLayoutsNodeChange = true; // skip layout update\n            this.engine.cacheLayout(items, this._prevColumn, true);\n        }\n        // if given a different callback, temporally set it as global option so creating will use it\n        const prevCB = GridStack.addRemoveCB;\n        if (typeof (addRemove) === 'function')\n            GridStack.addRemoveCB = addRemove;\n        let removed = [];\n        this.batchUpdate();\n        // see if any items are missing from new layout and need to be removed first\n        if (addRemove) {\n            let copyNodes = [...this.engine.nodes]; // don't loop through array you modify\n            copyNodes.forEach(n => {\n                if (!n.id)\n                    return;\n                let item = Utils.find(items, n.id);\n                if (!item) {\n                    if (GridStack.addRemoveCB)\n                        GridStack.addRemoveCB(this.el, n, false, false);\n                    removed.push(n); // batch keep track\n                    this.removeWidget(n.el, true, false);\n                }\n            });\n        }\n        // now add/update the widgets - starting with removing items in the new layout we will reposition\n        // to reduce collision and add no-coord ones at next available spot\n        let updateNodes = [];\n        this.engine.nodes = this.engine.nodes.filter(n => {\n            if (Utils.find(items, n.id)) {\n                updateNodes.push(n);\n                return false;\n            } // remove if found from list\n            return true;\n        });\n        let widthChanged = false;\n        items.forEach(w => {\n            let item = Utils.find(updateNodes, w.id);\n            if (item) {\n                // if item sizes to content, re-use the exiting height so it's a better guess at the final size 9same if width doesn't change)\n                if (Utils.shouldSizeToContent(item))\n                    w.h = item.h;\n                // check if missing coord, in which case find next empty slot with new (or old if missing) sizes\n                this.engine.nodeBoundFix(w); // before widthChanged is checked below...\n                if (w.autoPosition || w.x === undefined || w.y === undefined) {\n                    w.w = w.w || item.w;\n                    w.h = w.h || item.h;\n                    this.engine.findEmptyPosition(w);\n                }\n                widthChanged = widthChanged || (w.w !== undefined && w.w !== item.w);\n                // add back to current list BUT force a collision check if it 'appears' we didn't change to make sure we don't overlap others now\n                this.engine.nodes.push(item);\n                if (Utils.samePos(item, w)) {\n                    this.moveNode(item, { ...w, forceCollide: true });\n                }\n                this.update(item.el, w);\n                if (w.subGridOpts?.children) { // update any sub grid as well\n                    let sub = item.el.querySelector('.grid-stack');\n                    if (sub && sub.gridstack) {\n                        sub.gridstack.load(w.subGridOpts.children); // TODO: support updating grid options ?\n                        this._insertNotAppend = true; // got reset by above call\n                    }\n                }\n            }\n            else if (addRemove) {\n                this.addWidget(w);\n            }\n        });\n        this.engine.removedNodes = removed;\n        this.doContentResize(widthChanged, true); // we only need to wait for animation if we changed any widths\n        this.batchUpdate(false);\n        // after commit, clear that flag\n        delete this._ignoreLayoutsNodeChange;\n        delete this._insertNotAppend;\n        prevCB ? GridStack.addRemoveCB = prevCB : delete GridStack.addRemoveCB;\n        return this;\n    }\n    /**\n     * use before calling a bunch of `addWidget()` to prevent un-necessary relayouts in between (more efficient)\n     * and get a single event callback. You will see no changes until `batchUpdate(false)` is called.\n     */\n    batchUpdate(flag = true) {\n        this.engine.batchUpdate(flag);\n        if (!flag) {\n            this._updateContainerHeight();\n            this._triggerRemoveEvent();\n            this._triggerAddEvent();\n            this._triggerChangeEvent();\n        }\n        return this;\n    }\n    /**\n     * Gets current cell height.\n     */\n    getCellHeight(forcePixel = false) {\n        if (this.opts.cellHeight && this.opts.cellHeight !== 'auto' &&\n            (!forcePixel || !this.opts.cellHeightUnit || this.opts.cellHeightUnit === 'px')) {\n            return this.opts.cellHeight;\n        }\n        // else get first cell height\n        let el = this.el.querySelector('.' + this.opts.itemClass);\n        if (el) {\n            let height = Utils.toNumber(el.getAttribute('gs-h')) || 1; // since we don't write 1 anymore\n            return Math.round(el.offsetHeight / height);\n        }\n        // else do entire grid and # of rows (but doesn't work if min-height is the actual constrain)\n        let rows = parseInt(this.el.getAttribute('gs-current-row'));\n        return rows ? Math.round(this.el.getBoundingClientRect().height / rows) : this.opts.cellHeight;\n    }\n    /**\n     * Update current cell height - see `GridStackOptions.cellHeight` for format.\n     * This method rebuilds an internal CSS style sheet.\n     * Note: You can expect performance issues if call this method too often.\n     *\n     * @param val the cell height. If not passed (undefined), cells content will be made square (match width minus margin),\n     * if pass 0 the CSS will be generated by the application instead.\n     * @param update (Optional) if false, styles will not be updated\n     *\n     * @example\n     * grid.cellHeight(100); // same as 100px\n     * grid.cellHeight('70px');\n     * grid.cellHeight(grid.cellWidth() * 1.2);\n     */\n    cellHeight(val, update = true) {\n        // if not called internally, check if we're changing mode\n        if (update && val !== undefined) {\n            if (this._isAutoCellHeight !== (val === 'auto')) {\n                this._isAutoCellHeight = (val === 'auto');\n                this._updateResizeEvent();\n            }\n        }\n        if (val === 'initial' || val === 'auto') {\n            val = undefined;\n        }\n        // make item content be square\n        if (val === undefined) {\n            let marginDiff = -this.opts.marginRight - this.opts.marginLeft\n                + this.opts.marginTop + this.opts.marginBottom;\n            val = this.cellWidth() + marginDiff;\n        }\n        let data = Utils.parseHeight(val);\n        if (this.opts.cellHeightUnit === data.unit && this.opts.cellHeight === data.h) {\n            return this;\n        }\n        this.opts.cellHeightUnit = data.unit;\n        this.opts.cellHeight = data.h;\n        this.doContentResize(false, true); // no anim wait, but use attributes since we only change row height\n        if (update) {\n            this._updateStyles(true); // true = force re-create for current # of rows\n        }\n        return this;\n    }\n    /** Gets current cell width. */\n    cellWidth() {\n        return this._widthOrContainer() / this.getColumn();\n    }\n    /** return our expected width (or parent) for 1 column check */\n    _widthOrContainer() {\n        // use `offsetWidth` or `clientWidth` (no scrollbar) ?\n        // https://stackoverflow.com/questions/21064101/understanding-offsetwidth-clientwidth-scrollwidth-and-height-respectively\n        return (this.el.clientWidth || this.el.parentElement.clientWidth || window.innerWidth);\n    }\n    /**\n     * re-layout grid items to reclaim any empty space. Options are:\n     * 'list' keep the widget left->right order the same, even if that means leaving an empty slot if things don't fit\n     * 'compact' might re-order items to fill any empty space\n     *\n     * doSort - 'false' to let you do your own sorting ahead in case you need to control a different order. (default to sort)\n     */\n    compact(layout = 'compact', doSort = true) {\n        this.engine.compact(layout, doSort);\n        this._triggerChangeEvent();\n        return this;\n    }\n    /**\n     * set the number of columns in the grid. Will update existing widgets to conform to new number of columns,\n     * as well as cache the original layout so you can revert back to previous positions without loss.\n     * Requires `gridstack-extra.css` or `gridstack-extra.min.css` for [2-11],\n     * else you will need to generate correct CSS (see https://github.com/gridstack/gridstack.js#change-grid-columns)\n     * @param column - Integer > 0 (default 12).\n     * @param layout specify the type of re-layout that will happen (position, size, etc...).\n     * Note: items will never be outside of the current column boundaries. default ('moveScale'). Ignored for 1 column\n     */\n    column(column, layout = 'moveScale') {\n        if (!column || column < 1 || this.opts.column === column)\n            return this;\n        let oldColumn = this.getColumn();\n        // if we go into 1 column mode due to size change (disableOneColumnMode is off and we hit min width)\n        // then remember the original columns so we can restore.\n        if (column === 1 && !this.opts.disableOneColumnMode) {\n            this._prevColumn = oldColumn;\n        }\n        else {\n            delete this._prevColumn;\n        }\n        this.el.classList.remove('gs-' + oldColumn);\n        this.el.classList.add('gs-' + column);\n        this.opts.column = this.engine.column = column;\n        // update the items now - see if the dom order nodes should be passed instead (else default to current list)\n        let domNodes;\n        if (column === 1 && this.opts.oneColumnModeDomSort) {\n            domNodes = [];\n            this.getGridItems().forEach(el => {\n                if (el.gridstackNode) {\n                    domNodes.push(el.gridstackNode);\n                }\n            });\n            if (!domNodes.length) {\n                domNodes = undefined;\n            }\n        }\n        this.engine.columnChanged(oldColumn, column, domNodes, layout);\n        if (this._isAutoCellHeight)\n            this.cellHeight();\n        this.doContentResize();\n        // and trigger our event last...\n        this._ignoreLayoutsNodeChange = true; // skip layout update\n        this._triggerChangeEvent();\n        delete this._ignoreLayoutsNodeChange;\n        return this;\n    }\n    /**\n     * get the number of columns in the grid (default 12)\n     */\n    getColumn() {\n        return this.opts.column;\n    }\n    /** returns an array of grid HTML elements (no placeholder) - used to iterate through our children in DOM order */\n    getGridItems() {\n        return Array.from(this.el.children)\n            .filter((el) => el.matches('.' + this.opts.itemClass) && !el.matches('.' + this.opts.placeholderClass));\n    }\n    /**\n     * Destroys a grid instance. DO NOT CALL any methods or access any vars after this as it will free up members.\n     * @param removeDOM if `false` grid and items HTML elements will not be removed from the DOM (Optional. Default `true`).\n     */\n    destroy(removeDOM = true) {\n        if (!this.el)\n            return; // prevent multiple calls\n        this.offAll();\n        this._updateResizeEvent(true);\n        this.setStatic(true, false); // permanently removes DD but don't set CSS class (we're going away)\n        this.setAnimation(false);\n        if (!removeDOM) {\n            this.removeAll(removeDOM);\n            this.el.classList.remove(this._styleSheetClass);\n            this.el.removeAttribute('gs-current-row');\n        }\n        else {\n            this.el.parentNode.removeChild(this.el);\n        }\n        this._removeStylesheet();\n        if (this.parentGridItem)\n            delete this.parentGridItem.subGrid;\n        delete this.parentGridItem;\n        delete this.opts;\n        delete this._placeholder;\n        delete this.engine;\n        delete this.el.gridstack; // remove circular dependency that would prevent a freeing\n        delete this.el;\n        return this;\n    }\n    /**\n     * enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html)\n     */\n    float(val) {\n        if (this.opts.float !== val) {\n            this.opts.float = this.engine.float = val;\n            this._triggerChangeEvent();\n        }\n        return this;\n    }\n    /**\n     * get the current float mode\n     */\n    getFloat() {\n        return this.engine.float;\n    }\n    /**\n     * Get the position of the cell under a pixel on screen.\n     * @param position the position of the pixel to resolve in\n     * absolute coordinates, as an object with top and left properties\n     * @param useDocRelative if true, value will be based on document position vs parent position (Optional. Default false).\n     * Useful when grid is within `position: relative` element\n     *\n     * Returns an object with properties `x` and `y` i.e. the column and row in the grid.\n     */\n    getCellFromPixel(position, useDocRelative = false) {\n        let box = this.el.getBoundingClientRect();\n        // console.log(`getBoundingClientRect left: ${box.left} top: ${box.top} w: ${box.w} h: ${box.h}`)\n        let containerPos;\n        if (useDocRelative) {\n            containerPos = { top: box.top + document.documentElement.scrollTop, left: box.left };\n            // console.log(`getCellFromPixel scrollTop: ${document.documentElement.scrollTop}`)\n        }\n        else {\n            containerPos = { top: this.el.offsetTop, left: this.el.offsetLeft };\n            // console.log(`getCellFromPixel offsetTop: ${containerPos.left} offsetLeft: ${containerPos.top}`)\n        }\n        let relativeLeft = position.left - containerPos.left;\n        let relativeTop = position.top - containerPos.top;\n        let columnWidth = (box.width / this.getColumn());\n        let rowHeight = (box.height / parseInt(this.el.getAttribute('gs-current-row')));\n        return { x: Math.floor(relativeLeft / columnWidth), y: Math.floor(relativeTop / rowHeight) };\n    }\n    /** returns the current number of rows, which will be at least `minRow` if set */\n    getRow() {\n        return Math.max(this.engine.getRow(), this.opts.minRow);\n    }\n    /**\n     * Checks if specified area is empty.\n     * @param x the position x.\n     * @param y the position y.\n     * @param w the width of to check\n     * @param h the height of to check\n     */\n    isAreaEmpty(x, y, w, h) {\n        return this.engine.isAreaEmpty(x, y, w, h);\n    }\n    /**\n     * If you add elements to your grid by hand (or have some framework creating DOM), you have to tell gridstack afterwards to make them widgets.\n     * If you want gridstack to add the elements for you, use `addWidget()` instead.\n     * Makes the given element a widget and returns it.\n     * @param els widget or single selector to convert.\n     * @param options widget definition to use instead of reading attributes or using default sizing values\n     *\n     * @example\n     * let grid = GridStack.init();\n     * grid.el.appendChild('<div id=\"1\" gs-w=\"3\"></div>');\n     * grid.el.appendChild('<div id=\"2\"></div>');\n     * grid.makeWidget('1');\n     * grid.makeWidget('2', {w:2, content: 'hello'});\n     */\n    makeWidget(els, options) {\n        let el = GridStack.getElement(els);\n        this._prepareElement(el, true, options);\n        const node = el.gridstackNode;\n        this._updateContainerHeight();\n        this.doContentResize(false, false, node);\n        // see if there is a sub-grid to create\n        if (node.subGridOpts) {\n            this.makeSubGrid(el, node.subGridOpts, undefined, false); // node.subGrid will be used as option in method, no need to pass\n        }\n        // if we're adding an item into 1 column (_prevColumn is set only when going to 1) make sure\n        // we don't override the larger 12 column layout that was already saved. #1985\n        if (this._prevColumn && this.opts.column === 1) {\n            this._ignoreLayoutsNodeChange = true;\n        }\n        this._triggerAddEvent();\n        this._triggerChangeEvent();\n        delete this._ignoreLayoutsNodeChange;\n        return el;\n    }\n    /**\n     * Event handler that extracts our CustomEvent data out automatically for receiving custom\n     * notifications (see doc for supported events)\n     * @param name of the event (see possible values) or list of names space separated\n     * @param callback function called with event and optional second/third param\n     * (see README documentation for each signature).\n     *\n     * @example\n     * grid.on('added', function(e, items) { log('added ', items)} );\n     * or\n     * grid.on('added removed change', function(e, items) { log(e.type, items)} );\n     *\n     * Note: in some cases it is the same as calling native handler and parsing the event.\n     * grid.el.addEventListener('added', function(event) { log('added ', event.detail)} );\n     *\n     */\n    on(name, callback) {\n        // check for array of names being passed instead\n        if (name.indexOf(' ') !== -1) {\n            let names = name.split(' ');\n            names.forEach(name => this.on(name, callback));\n            return this;\n        }\n        if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\n            // native CustomEvent handlers - cash the generic handlers so we can easily remove\n            let noData = (name === 'enable' || name === 'disable');\n            if (noData) {\n                this._gsEventHandler[name] = (event) => callback(event);\n            }\n            else {\n                this._gsEventHandler[name] = (event) => callback(event, event.detail);\n            }\n            this.el.addEventListener(name, this._gsEventHandler[name]);\n        }\n        else if (name === 'drag' || name === 'dragstart' || name === 'dragstop' || name === 'resizestart' || name === 'resize'\n            || name === 'resizestop' || name === 'dropped' || name === 'resizecontent') {\n            // drag&drop stop events NEED to be call them AFTER we update node attributes so handle them ourself.\n            // do same for start event to make it easier...\n            this._gsEventHandler[name] = callback;\n        }\n        else {\n            console.log('GridStack.on(' + name + ') event not supported, but you can still use $(\".grid-stack\").on(...) while jquery-ui is still used internally.');\n        }\n        return this;\n    }\n    /**\n     * unsubscribe from the 'on' event below\n     * @param name of the event (see possible values)\n     */\n    off(name) {\n        // check for array of names being passed instead\n        if (name.indexOf(' ') !== -1) {\n            let names = name.split(' ');\n            names.forEach(name => this.off(name));\n            return this;\n        }\n        if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\n            // remove native CustomEvent handlers\n            if (this._gsEventHandler[name]) {\n                this.el.removeEventListener(name, this._gsEventHandler[name]);\n            }\n        }\n        delete this._gsEventHandler[name];\n        return this;\n    }\n    /** remove all event handlers */\n    offAll() {\n        Object.keys(this._gsEventHandler).forEach(key => this.off(key));\n        return this;\n    }\n    /**\n     * Removes widget from the grid.\n     * @param el  widget or selector to modify\n     * @param removeDOM if `false` DOM element won't be removed from the tree (Default? true).\n     * @param triggerEvent if `false` (quiet mode) element will not be added to removed list and no 'removed' callbacks will be called (Default? true).\n     */\n    removeWidget(els, removeDOM = true, triggerEvent = true) {\n        GridStack.getElements(els).forEach(el => {\n            if (el.parentElement && el.parentElement !== this.el)\n                return; // not our child!\n            let node = el.gridstackNode;\n            // For Meteor support: https://github.com/gridstack/gridstack.js/pull/272\n            if (!node) {\n                node = this.engine.nodes.find(n => el === n.el);\n            }\n            if (!node)\n                return;\n            if (GridStack.addRemoveCB) {\n                GridStack.addRemoveCB(this.el, node, false, false);\n            }\n            // remove our DOM data (circular link) and drag&drop permanently\n            delete el.gridstackNode;\n            this._removeDD(el);\n            this.engine.removeNode(node, removeDOM, triggerEvent);\n            if (removeDOM && el.parentElement) {\n                el.remove(); // in batch mode engine.removeNode doesn't call back to remove DOM\n            }\n        });\n        if (triggerEvent) {\n            this._triggerRemoveEvent();\n            this._triggerChangeEvent();\n        }\n        return this;\n    }\n    /**\n     * Removes all widgets from the grid.\n     * @param removeDOM if `false` DOM elements won't be removed from the tree (Default? `true`).\n     */\n    removeAll(removeDOM = true) {\n        // always remove our DOM data (circular link) before list gets emptied and drag&drop permanently\n        this.engine.nodes.forEach(n => {\n            delete n.el.gridstackNode;\n            this._removeDD(n.el);\n        });\n        this.engine.removeAll(removeDOM);\n        this._triggerRemoveEvent();\n        return this;\n    }\n    /**\n     * Toggle the grid animation state.  Toggles the `grid-stack-animate` class.\n     * @param doAnimate if true the grid will animate.\n     */\n    setAnimation(doAnimate) {\n        if (doAnimate) {\n            this.el.classList.add('grid-stack-animate');\n        }\n        else {\n            this.el.classList.remove('grid-stack-animate');\n        }\n        return this;\n    }\n    /**\n     * Toggle the grid static state, which permanently removes/add Drag&Drop support, unlike disable()/enable() that just turns it off/on.\n     * Also toggle the grid-stack-static class.\n     * @param val if true the grid become static.\n     * @param updateClass true (default) if css class gets updated\n     * @param recurse true (default) if sub-grids also get updated\n     */\n    setStatic(val, updateClass = true, recurse = true) {\n        if (!!this.opts.staticGrid === val)\n            return this;\n        val ? this.opts.staticGrid = true : delete this.opts.staticGrid;\n        this._setupRemoveDrop();\n        this._setupAcceptWidget();\n        this.engine.nodes.forEach(n => {\n            this._prepareDragDropByNode(n); // either delete or init Drag&drop\n            if (n.subGrid && recurse)\n                n.subGrid.setStatic(val, updateClass, recurse);\n        });\n        if (updateClass) {\n            this._setStaticClass();\n        }\n        return this;\n    }\n    /**\n     * Updates widget position/size and other info. Note: if you need to call this on all nodes, use load() instead which will update what changed.\n     * @param els  widget or selector of objects to modify (note: setting the same x,y for multiple items will be indeterministic and likely unwanted)\n     * @param opt new widget options (x,y,w,h, etc..). Only those set will be updated.\n     */\n    update(els, opt) {\n        // support legacy call for now ?\n        if (arguments.length > 2) {\n            console.warn('gridstack.ts: `update(el, x, y, w, h)` is deprecated. Use `update(el, {x, w, content, ...})`. It will be removed soon');\n            // eslint-disable-next-line prefer-rest-params\n            let a = arguments, i = 1;\n            opt = { x: a[i++], y: a[i++], w: a[i++], h: a[i++] };\n            return this.update(els, opt);\n        }\n        GridStack.getElements(els).forEach(el => {\n            let n = el?.gridstackNode;\n            if (!n)\n                return;\n            let w = Utils.cloneDeep(opt); // make a copy we can modify in case they re-use it or multiple items\n            this.engine.nodeBoundFix(w);\n            delete w.autoPosition;\n            delete w.id;\n            // move/resize widget if anything changed\n            let keys = ['x', 'y', 'w', 'h'];\n            let m;\n            if (keys.some(k => w[k] !== undefined && w[k] !== n[k])) {\n                m = {};\n                keys.forEach(k => {\n                    m[k] = (w[k] !== undefined) ? w[k] : n[k];\n                    delete w[k];\n                });\n            }\n            // for a move as well IFF there is any min/max fields set\n            if (!m && (w.minW || w.minH || w.maxW || w.maxH)) {\n                m = {}; // will use node position but validate values\n            }\n            // check for content changing\n            if (w.content !== undefined) {\n                const itemContent = el.querySelector('.grid-stack-item-content');\n                if (itemContent && itemContent.innerHTML !== w.content) {\n                    itemContent.innerHTML = w.content;\n                    // restore any sub-grid back\n                    if (n.subGrid?.el) {\n                        itemContent.appendChild(n.subGrid.el);\n                        if (!n.subGrid.opts.styleInHead)\n                            n.subGrid._updateStyles(true); // force create\n                    }\n                }\n                delete w.content;\n            }\n            // any remaining fields are assigned, but check for dragging changes, resize constrain\n            let changed = false;\n            let ddChanged = false;\n            for (const key in w) {\n                if (key[0] !== '_' && n[key] !== w[key]) {\n                    n[key] = w[key];\n                    changed = true;\n                    ddChanged = ddChanged || (!this.opts.staticGrid && (key === 'noResize' || key === 'noMove' || key === 'locked'));\n                }\n            }\n            Utils.sanitizeMinMax(n);\n            // finally move the widget and update attr\n            if (m)\n                this.moveNode(n, m);\n            if (m || changed) {\n                this._writeAttr(el, n);\n            }\n            if (ddChanged) {\n                this._prepareDragDropByNode(n);\n            }\n        });\n        return this;\n    }\n    moveNode(n, m) {\n        this.engine.cleanNodes()\n            .beginUpdate(n)\n            .moveNode(n, m);\n        this._updateContainerHeight();\n        this._triggerChangeEvent();\n        this.engine.endUpdate();\n    }\n    /**\n     * Updates widget height to match the content height to avoid v-scrollbar or dead space.\n     * Note: this assumes only 1 child under resizeToContentParent='.grid-stack-item-content' (sized to gridItem minus padding) that is at the entire content size wanted.\n     * useAttrSize set to true if GridStackNode.h should be used instead of actual container height when we don't need to wait for animation to finish to get actual DOM heights\n     */\n    resizeToContent(el, useAttrSize = false) {\n        if (!el)\n            return;\n        el.classList.remove('size-to-content-max');\n        if (!el.clientHeight)\n            return; // 0 when hidden, skip\n        let n = el.gridstackNode;\n        if (!n)\n            return;\n        const grid = n.grid;\n        if (!grid)\n            return;\n        if (el.parentElement !== grid.el)\n            return; // skip if we are not inside a grid\n        const cell = grid.getCellHeight();\n        if (!cell)\n            return;\n        let height = useAttrSize && n.h ? n.h * cell : el.clientHeight; // getBoundingClientRect().height seem to flicker back and forth\n        let item;\n        if (n.resizeToContentParent)\n            item = el.querySelector(n.resizeToContentParent);\n        if (!item)\n            item = el.querySelector(GridStack.resizeToContentParent);\n        if (!item)\n            return;\n        const padding = el.clientHeight - item.clientHeight; // full - available height to our child (minus border, padding...)\n        const itemH = useAttrSize && n.h ? n.h * cell - padding : item.clientHeight; // calculated to what cellHeight is or will become (rather than actual to prevent waiting for animation to finish)\n        let wantedH;\n        if (n.subGrid) {\n            // sub-grid - use their actual row count * their cell height\n            wantedH = n.subGrid.getRow() * n.subGrid.getCellHeight();\n        }\n        else {\n            // NOTE: clientHeight & getBoundingClientRect() is undefined for text and other leaf nodes. use <div> container!\n            const child = item.firstElementChild;\n            if (!child) {\n                console.log(`Error: resizeToContent() '${GridStack.resizeToContentParent}'.firstElementChild is null, make sure to have a div like container. Skipping sizing.`);\n                return;\n            }\n            wantedH = child.getBoundingClientRect().height || itemH;\n        }\n        if (itemH === wantedH)\n            return;\n        height += wantedH - itemH;\n        let h = Math.ceil(height / cell);\n        // check for min/max and special sizing\n        const softMax = Number.isInteger(n.sizeToContent) ? n.sizeToContent : 0;\n        if (softMax && h > softMax) {\n            h = softMax;\n            el.classList.add('size-to-content-max'); // get v-scroll back\n        }\n        if (n.minH && h < n.minH)\n            h = n.minH;\n        else if (n.maxH && h > n.maxH)\n            h = n.maxH;\n        if (h !== n.h) {\n            grid._ignoreLayoutsNodeChange = true;\n            grid.moveNode(n, { h });\n            delete grid._ignoreLayoutsNodeChange;\n        }\n    }\n    /** call the user resize (so they can do extra work) else our build in version */\n    resizeToContentCheck(el, useAttr = false) {\n        if (GridStack.resizeToContentCB)\n            GridStack.resizeToContentCB(el, useAttr);\n        else\n            this.resizeToContent(el, useAttr);\n    }\n    /**\n     * Updates the margins which will set all 4 sides at once - see `GridStackOptions.margin` for format options (CSS string format of 1,2,4 values or single number).\n     * @param value margin value\n     */\n    margin(value) {\n        let isMultiValue = (typeof value === 'string' && value.split(' ').length > 1);\n        // check if we can skip re-creating our CSS file... won't check if multi values (too much hassle)\n        if (!isMultiValue) {\n            let data = Utils.parseHeight(value);\n            if (this.opts.marginUnit === data.unit && this.opts.margin === data.h)\n                return;\n        }\n        // re-use existing margin handling\n        this.opts.margin = value;\n        this.opts.marginTop = this.opts.marginBottom = this.opts.marginLeft = this.opts.marginRight = undefined;\n        this._initMargin();\n        this._updateStyles(true); // true = force re-create\n        return this;\n    }\n    /** returns current margin number value (undefined if 4 sides don't match) */\n    getMargin() { return this.opts.margin; }\n    /**\n     * Returns true if the height of the grid will be less than the vertical\n     * constraint. Always returns true if grid doesn't have height constraint.\n     * @param node contains x,y,w,h,auto-position options\n     *\n     * @example\n     * if (grid.willItFit(newWidget)) {\n     *   grid.addWidget(newWidget);\n     * } else {\n     *   alert('Not enough free space to place the widget');\n     * }\n     */\n    willItFit(node) {\n        // support legacy call for now\n        if (arguments.length > 1) {\n            console.warn('gridstack.ts: `willItFit(x,y,w,h,autoPosition)` is deprecated. Use `willItFit({x, y,...})`. It will be removed soon');\n            // eslint-disable-next-line prefer-rest-params\n            let a = arguments, i = 0, w = { x: a[i++], y: a[i++], w: a[i++], h: a[i++], autoPosition: a[i++] };\n            return this.willItFit(w);\n        }\n        return this.engine.willItFit(node);\n    }\n    /** @internal */\n    _triggerChangeEvent() {\n        if (this.engine.batchMode)\n            return this;\n        let elements = this.engine.getDirtyNodes(true); // verify they really changed\n        if (elements && elements.length) {\n            if (!this._ignoreLayoutsNodeChange) {\n                this.engine.layoutsNodesChange(elements);\n            }\n            this._triggerEvent('change', elements);\n        }\n        this.engine.saveInitial(); // we called, now reset initial values & dirty flags\n        return this;\n    }\n    /** @internal */\n    _triggerAddEvent() {\n        if (this.engine.batchMode)\n            return this;\n        if (this.engine.addedNodes?.length) {\n            if (!this._ignoreLayoutsNodeChange) {\n                this.engine.layoutsNodesChange(this.engine.addedNodes);\n            }\n            // prevent added nodes from also triggering 'change' event (which is called next)\n            this.engine.addedNodes.forEach(n => { delete n._dirty; });\n            this._triggerEvent('added', this.engine.addedNodes);\n            this.engine.addedNodes = [];\n        }\n        return this;\n    }\n    /** @internal */\n    _triggerRemoveEvent() {\n        if (this.engine.batchMode)\n            return this;\n        if (this.engine.removedNodes?.length) {\n            this._triggerEvent('removed', this.engine.removedNodes);\n            this.engine.removedNodes = [];\n        }\n        return this;\n    }\n    /** @internal */\n    _triggerEvent(type, data) {\n        let event = data ? new CustomEvent(type, { bubbles: false, detail: data }) : new Event(type);\n        this.el.dispatchEvent(event);\n        return this;\n    }\n    /** @internal called to delete the current dynamic style sheet used for our layout */\n    _removeStylesheet() {\n        if (this._styles) {\n            Utils.removeStylesheet(this._styleSheetClass);\n            delete this._styles;\n        }\n        return this;\n    }\n    /** @internal updated/create the CSS styles for row based layout and initial margin setting */\n    _updateStyles(forceUpdate = false, maxH) {\n        // call to delete existing one if we change cellHeight / margin\n        if (forceUpdate) {\n            this._removeStylesheet();\n        }\n        if (!maxH)\n            maxH = this.getRow();\n        this._updateContainerHeight();\n        // if user is telling us they will handle the CSS themselves by setting heights to 0. Do we need this opts really ??\n        if (this.opts.cellHeight === 0) {\n            return this;\n        }\n        let cellHeight = this.opts.cellHeight;\n        let cellHeightUnit = this.opts.cellHeightUnit;\n        let prefix = `.${this._styleSheetClass} > .${this.opts.itemClass}`;\n        // create one as needed\n        if (!this._styles) {\n            // insert style to parent (instead of 'head' by default) to support WebComponent\n            let styleLocation = this.opts.styleInHead ? undefined : this.el.parentNode;\n            this._styles = Utils.createStylesheet(this._styleSheetClass, styleLocation, {\n                nonce: this.opts.nonce,\n            });\n            if (!this._styles)\n                return this;\n            this._styles._max = 0;\n            // these are done once only\n            Utils.addCSSRule(this._styles, prefix, `height: ${cellHeight}${cellHeightUnit}`);\n            // content margins\n            let top = this.opts.marginTop + this.opts.marginUnit;\n            let bottom = this.opts.marginBottom + this.opts.marginUnit;\n            let right = this.opts.marginRight + this.opts.marginUnit;\n            let left = this.opts.marginLeft + this.opts.marginUnit;\n            let content = `${prefix} > .grid-stack-item-content`;\n            let placeholder = `.${this._styleSheetClass} > .grid-stack-placeholder > .placeholder-content`;\n            Utils.addCSSRule(this._styles, content, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\n            Utils.addCSSRule(this._styles, placeholder, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\n            // resize handles offset (to match margin)\n            Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-ne`, `right: ${right}`);\n            Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-e`, `right: ${right}`);\n            Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-se`, `right: ${right}; bottom: ${bottom}`);\n            Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-nw`, `left: ${left}`);\n            Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-w`, `left: ${left}`);\n            Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-sw`, `left: ${left}; bottom: ${bottom}`);\n        }\n        // now update the height specific fields\n        maxH = maxH || this._styles._max;\n        if (maxH > this._styles._max) {\n            let getHeight = (rows) => (cellHeight * rows) + cellHeightUnit;\n            for (let i = this._styles._max + 1; i <= maxH; i++) { // start at 1\n                Utils.addCSSRule(this._styles, `${prefix}[gs-y=\"${i}\"]`, `top: ${getHeight(i)}`);\n                Utils.addCSSRule(this._styles, `${prefix}[gs-h=\"${i + 1}\"]`, `height: ${getHeight(i + 1)}`); // start at 2\n            }\n            this._styles._max = maxH;\n        }\n        return this;\n    }\n    /** @internal */\n    _updateContainerHeight() {\n        if (!this.engine || this.engine.batchMode)\n            return this;\n        const parent = this.parentGridItem;\n        let row = this.getRow() + this._extraDragRow; // this checks for minRow already\n        const cellHeight = this.opts.cellHeight;\n        const unit = this.opts.cellHeightUnit;\n        if (!cellHeight)\n            return this;\n        // check for css min height (non nested grid). TODO: support mismatch, say: min % while unit is px.\n        if (!parent) {\n            const cssMinHeight = Utils.parseHeight(getComputedStyle(this.el)['minHeight']);\n            if (cssMinHeight.h > 0 && cssMinHeight.unit === unit) {\n                const minRow = Math.floor(cssMinHeight.h / cellHeight);\n                if (row < minRow) {\n                    row = minRow;\n                }\n            }\n        }\n        this.el.setAttribute('gs-current-row', String(row));\n        this.el.style.removeProperty('min-height');\n        this.el.style.removeProperty('height');\n        if (row) {\n            // nested grids have 'insert:0' to fill the space of parent by default, but we may be taller so use min-height for possible scrollbars\n            this.el.style[parent ? 'minHeight' : 'height'] = row * cellHeight + unit;\n        }\n        // if we're a nested grid inside an sizeToContent item, tell it to resize itself too\n        if (parent && !parent.grid.engine.batchMode && Utils.shouldSizeToContent(parent)) {\n            parent.grid.resizeToContentCheck(parent.el);\n        }\n        return this;\n    }\n    /** @internal */\n    _prepareElement(el, triggerAddEvent = false, node) {\n        el.classList.add(this.opts.itemClass);\n        node = node || this._readAttr(el);\n        el.gridstackNode = node;\n        node.el = el;\n        node.grid = this;\n        let copy = { ...node };\n        node = this.engine.addNode(node, triggerAddEvent);\n        // write node attr back in case there was collision or we have to fix bad values during addNode()\n        if (!Utils.same(node, copy)) {\n            this._writeAttr(el, node);\n        }\n        if (Utils.shouldSizeToContent(node))\n            el.classList.add('size-to-content');\n        this._prepareDragDropByNode(node);\n        return this;\n    }\n    /** @internal call to write position x,y,w,h attributes back to element */\n    _writePosAttr(el, n) {\n        if (n.x !== undefined && n.x !== null) {\n            el.setAttribute('gs-x', String(n.x));\n        }\n        if (n.y !== undefined && n.y !== null) {\n            el.setAttribute('gs-y', String(n.y));\n        }\n        n.w > 1 ? el.setAttribute('gs-w', String(n.w)) : el.removeAttribute('gs-w');\n        n.h > 1 ? el.setAttribute('gs-h', String(n.h)) : el.removeAttribute('gs-h');\n        return this;\n    }\n    /** @internal call to write any default attributes back to element */\n    _writeAttr(el, node) {\n        if (!node)\n            return this;\n        this._writePosAttr(el, node);\n        let attrs /*: GridStackWidget but strings */ = {\n            autoPosition: 'gs-auto-position',\n            noResize: 'gs-no-resize',\n            noMove: 'gs-no-move',\n            locked: 'gs-locked',\n            id: 'gs-id',\n        };\n        for (const key in attrs) {\n            if (node[key]) { // 0 is valid for x,y only but done above already and not in list anyway\n                el.setAttribute(attrs[key], String(node[key]));\n            }\n            else {\n                el.removeAttribute(attrs[key]);\n            }\n        }\n        return this;\n    }\n    /** @internal call to read any default attributes from element */\n    _readAttr(el, clearDefaultAttr = true) {\n        let n = {};\n        n.x = Utils.toNumber(el.getAttribute('gs-x'));\n        n.y = Utils.toNumber(el.getAttribute('gs-y'));\n        n.w = Utils.toNumber(el.getAttribute('gs-w'));\n        n.h = Utils.toNumber(el.getAttribute('gs-h'));\n        n.autoPosition = Utils.toBool(el.getAttribute('gs-auto-position'));\n        n.noResize = Utils.toBool(el.getAttribute('gs-no-resize'));\n        n.noMove = Utils.toBool(el.getAttribute('gs-no-move'));\n        n.locked = Utils.toBool(el.getAttribute('gs-locked'));\n        n.id = el.getAttribute('gs-id');\n        // read but never written out\n        n.maxW = Utils.toNumber(el.getAttribute('gs-max-w'));\n        n.minW = Utils.toNumber(el.getAttribute('gs-min-w'));\n        n.maxH = Utils.toNumber(el.getAttribute('gs-max-h'));\n        n.minH = Utils.toNumber(el.getAttribute('gs-min-h'));\n        // v8.x optimization to reduce un-needed attr that don't render or are default CSS\n        if (clearDefaultAttr) {\n            if (n.w === 1)\n                el.removeAttribute('gs-w');\n            if (n.h === 1)\n                el.removeAttribute('gs-h');\n            if (n.maxW)\n                el.removeAttribute('gs-max-w');\n            if (n.minW)\n                el.removeAttribute('gs-min-w');\n            if (n.maxH)\n                el.removeAttribute('gs-max-h');\n            if (n.minH)\n                el.removeAttribute('gs-min-h');\n        }\n        // remove any key not found (null or false which is default)\n        for (const key in n) {\n            if (!n.hasOwnProperty(key))\n                return;\n            if (!n[key] && n[key] !== 0) { // 0 can be valid value (x,y only really)\n                delete n[key];\n            }\n        }\n        return n;\n    }\n    /** @internal */\n    _setStaticClass() {\n        let classes = ['grid-stack-static'];\n        if (this.opts.staticGrid) {\n            this.el.classList.add(...classes);\n            this.el.setAttribute('gs-static', 'true');\n        }\n        else {\n            this.el.classList.remove(...classes);\n            this.el.removeAttribute('gs-static');\n        }\n        return this;\n    }\n    /**\n     * called when we are being resized - check if the one Column Mode needs to be turned on/off\n     * and remember the prev columns we used, or get our count from parent, as well as check for cellHeight==='auto' (square)\n     * or `sizeToContent` gridItem options.\n     */\n    onResize() {\n        if (!this.el?.clientWidth)\n            return; // return if we're gone or no size yet (will get called again)\n        if (this.prevWidth === this.el.clientWidth)\n            return; // no-op\n        this.prevWidth = this.el.clientWidth;\n        // console.log('onResize ', this.el.clientWidth);\n        this.batchUpdate();\n        // see if we're nested and take our column count from our parent....\n        let columnChanged = false;\n        if (this._autoColumn && this.parentGridItem) {\n            if (this.opts.column !== this.parentGridItem.w) {\n                this.column(this.parentGridItem.w, 'none');\n                columnChanged = true;\n            }\n        }\n        else {\n            // else check for 1 column in/out behavior\n            let oneColumn = !this.opts.disableOneColumnMode && this.el.clientWidth <= this.opts.oneColumnSize ||\n                (this.opts.column === 1 && !this._prevColumn);\n            if ((this.opts.column === 1) !== oneColumn) {\n                // if (this.opts.animate) this.setAnimation(false); // 1 <-> 12 is too radical, turn off animation and we need it for sizeToContent\n                this.column(oneColumn ? 1 : this._prevColumn);\n                // if (this.opts.animate) setTimeout(() => this.setAnimation(true));\n                columnChanged = true;\n            }\n        }\n        // make the cells content square again\n        if (this._isAutoCellHeight)\n            this.cellHeight();\n        // update any nested grids, or items size\n        this.engine.nodes.forEach(n => {\n            if (n.subGrid)\n                n.subGrid.onResize();\n        });\n        if (!this._skipInitialResize)\n            this.doContentResize(columnChanged); // wait for anim of column changed (DOM reflow before we can size correctly)\n        delete this._skipInitialResize;\n        this.batchUpdate(false);\n        return this;\n    }\n    doContentResize(delay = true, useAttr = false, n = undefined) {\n        // update any gridItem height with sizeToContent, but wait for DOM $animation_speed to settle if we changed column count\n        // TODO: is there a way to know what the final (post animation) size of the content will be so we can animate the column width and height together rather than sequentially ?\n        setTimeout(() => {\n            if (!this.engine)\n                return; // we've been deleted in between!\n            if (n) {\n                if (Utils.shouldSizeToContent(n))\n                    this.resizeToContentCheck(n.el, useAttr);\n            }\n            else if (this.engine.nodes.some(n => Utils.shouldSizeToContent(n))) {\n                const nodes = [...this.engine.nodes]; // in case order changes while resizing one\n                this.batchUpdate();\n                nodes.forEach(n => {\n                    if (Utils.shouldSizeToContent(n))\n                        this.resizeToContentCheck(n.el, useAttr);\n                });\n                this.batchUpdate(false);\n            }\n            // call this regardless of shouldSizeToContent because widget might need to stretch to take available space after a resize\n            if (this._gsEventHandler['resizecontent'])\n                this._gsEventHandler['resizecontent'](null, n ? [n] : this.engine.nodes);\n        }, delay ? 300 + 10 : 0);\n    }\n    /** add or remove the grid element size event handler */\n    _updateResizeEvent(forceRemove = false) {\n        // only add event if we're not nested (parent will call us) and we're auto sizing cells or supporting oneColumn (i.e. doing work)\n        // or supporting new sizeToContent option.\n        const trackSize = !this.parentGridItem && (this._isAutoCellHeight || this.opts.sizeToContent || !this.opts.disableOneColumnMode\n            || this.engine.nodes.find(n => n.sizeToContent));\n        if (!forceRemove && trackSize && !this.resizeObserver) {\n            this._sizeThrottle = Utils.throttle(() => this.onResize(), this.opts.cellHeightThrottle);\n            this.resizeObserver = new ResizeObserver(() => this._sizeThrottle());\n            this.resizeObserver.observe(this.el);\n            this._skipInitialResize = true; // makeWidget will originally have called on startup\n        }\n        else if ((forceRemove || !trackSize) && this.resizeObserver) {\n            this.resizeObserver.disconnect();\n            delete this.resizeObserver;\n            delete this._sizeThrottle;\n        }\n        return this;\n    }\n    /** @internal convert a potential selector into actual element */\n    static getElement(els = '.grid-stack-item') { return Utils.getElement(els); }\n    /** @internal */\n    static getElements(els = '.grid-stack-item') { return Utils.getElements(els); }\n    /** @internal */\n    static getGridElement(els) { return GridStack.getElement(els); }\n    /** @internal */\n    static getGridElements(els) { return Utils.getElements(els); }\n    /** @internal initialize margin top/bottom/left/right and units */\n    _initMargin() {\n        let data;\n        let margin = 0;\n        // support passing multiple values like CSS (ex: '5px 10px 0 20px')\n        let margins = [];\n        if (typeof this.opts.margin === 'string') {\n            margins = this.opts.margin.split(' ');\n        }\n        if (margins.length === 2) { // top/bot, left/right like CSS\n            this.opts.marginTop = this.opts.marginBottom = margins[0];\n            this.opts.marginLeft = this.opts.marginRight = margins[1];\n        }\n        else if (margins.length === 4) { // Clockwise like CSS\n            this.opts.marginTop = margins[0];\n            this.opts.marginRight = margins[1];\n            this.opts.marginBottom = margins[2];\n            this.opts.marginLeft = margins[3];\n        }\n        else {\n            data = Utils.parseHeight(this.opts.margin);\n            this.opts.marginUnit = data.unit;\n            margin = this.opts.margin = data.h;\n        }\n        // see if top/bottom/left/right need to be set as well\n        if (this.opts.marginTop === undefined) {\n            this.opts.marginTop = margin;\n        }\n        else {\n            data = Utils.parseHeight(this.opts.marginTop);\n            this.opts.marginTop = data.h;\n            delete this.opts.margin;\n        }\n        if (this.opts.marginBottom === undefined) {\n            this.opts.marginBottom = margin;\n        }\n        else {\n            data = Utils.parseHeight(this.opts.marginBottom);\n            this.opts.marginBottom = data.h;\n            delete this.opts.margin;\n        }\n        if (this.opts.marginRight === undefined) {\n            this.opts.marginRight = margin;\n        }\n        else {\n            data = Utils.parseHeight(this.opts.marginRight);\n            this.opts.marginRight = data.h;\n            delete this.opts.margin;\n        }\n        if (this.opts.marginLeft === undefined) {\n            this.opts.marginLeft = margin;\n        }\n        else {\n            data = Utils.parseHeight(this.opts.marginLeft);\n            this.opts.marginLeft = data.h;\n            delete this.opts.margin;\n        }\n        this.opts.marginUnit = data.unit; // in case side were spelled out, use those units instead...\n        if (this.opts.marginTop === this.opts.marginBottom && this.opts.marginLeft === this.opts.marginRight && this.opts.marginTop === this.opts.marginRight) {\n            this.opts.margin = this.opts.marginTop; // makes it easier to check for no-ops in setMargin()\n        }\n        return this;\n    }\n    /* ===========================================================================================\n     * drag&drop methods that used to be stubbed out and implemented in dd-gridstack.ts\n     * but caused loading issues in prod - see https://github.com/gridstack/gridstack.js/issues/2039\n     * ===========================================================================================\n     */\n    /** get the global (but static to this code) DD implementation */\n    static getDD() {\n        return dd;\n    }\n    /**\n     * call to setup dragging in from the outside (say toolbar), by specifying the class selection and options.\n     * Called during GridStack.init() as options, but can also be called directly (last param are used) in case the toolbar\n     * is dynamically create and needs to be set later.\n     * @param dragIn string selector (ex: '.sidebar .grid-stack-item') or list of dom elements\n     * @param dragInOptions options - see DDDragInOpt. (default: {handle: '.grid-stack-item-content', appendTo: 'body'}\n     * @param root optional root which defaults to document (for shadow dom pas the parent HTMLDocument)\n     */\n    static setupDragIn(dragIn, dragInOptions, root = document) {\n        if (dragInOptions?.pause !== undefined) {\n            DDManager.pauseDrag = dragInOptions.pause;\n        }\n        dragInOptions = { ...dragInDefaultOptions, ...(dragInOptions || {}) };\n        let els = (typeof dragIn === 'string') ? Utils.getElements(dragIn, root) : dragIn;\n        if (els.length)\n            els?.forEach(el => {\n                if (!dd.isDraggable(el))\n                    dd.dragIn(el, dragInOptions);\n            });\n    }\n    /**\n     * Enables/Disables dragging by the user of specific grid element. If you want all items, and have it affect future items, use enableMove() instead. No-op for static grids.\n     * IF you are looking to prevent an item from moving (due to being pushed around by another during collision) use locked property instead.\n     * @param els widget or selector to modify.\n     * @param val if true widget will be draggable, assuming the parent grid isn't noMove or static.\n     */\n    movable(els, val) {\n        if (this.opts.staticGrid)\n            return this; // can't move a static grid!\n        GridStack.getElements(els).forEach(el => {\n            let n = el.gridstackNode;\n            if (!n)\n                return;\n            val ? delete n.noMove : n.noMove = true;\n            this._prepareDragDropByNode(n); // init DD if need be, and adjust\n        });\n        return this;\n    }\n    /**\n     * Enables/Disables user resizing of specific grid element. If you want all items, and have it affect future items, use enableResize() instead. No-op for static grids.\n     * @param els  widget or selector to modify\n     * @param val  if true widget will be resizable, assuming the parent grid isn't noResize or static.\n     */\n    resizable(els, val) {\n        if (this.opts.staticGrid)\n            return this; // can't resize a static grid!\n        GridStack.getElements(els).forEach(el => {\n            let n = el.gridstackNode;\n            if (!n)\n                return;\n            val ? delete n.noResize : n.noResize = true;\n            this._prepareDragDropByNode(n); // init DD if need be, and adjust\n        });\n        return this;\n    }\n    /**\n     * Temporarily disables widgets moving/resizing.\n     * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.\n     * Note: no-op for static grid\n     * This is a shortcut for:\n     * @example\n     *  grid.enableMove(false);\n     *  grid.enableResize(false);\n     * @param recurse true (default) if sub-grids also get updated\n     */\n    disable(recurse = true) {\n        if (this.opts.staticGrid)\n            return;\n        this.enableMove(false, recurse);\n        this.enableResize(false, recurse);\n        this._triggerEvent('disable');\n        return this;\n    }\n    /**\n     * Re-enables widgets moving/resizing - see disable().\n     * Note: no-op for static grid.\n     * This is a shortcut for:\n     * @example\n     *  grid.enableMove(true);\n     *  grid.enableResize(true);\n     * @param recurse true (default) if sub-grids also get updated\n     */\n    enable(recurse = true) {\n        if (this.opts.staticGrid)\n            return;\n        this.enableMove(true, recurse);\n        this.enableResize(true, recurse);\n        this._triggerEvent('enable');\n        return this;\n    }\n    /**\n     * Enables/disables widget moving. No-op for static grids, and locally defined items still overrule\n     * @param recurse true (default) if sub-grids also get updated\n     */\n    enableMove(doEnable, recurse = true) {\n        if (this.opts.staticGrid)\n            return this; // can't move a static grid!\n        doEnable ? delete this.opts.disableDrag : this.opts.disableDrag = true; // FIRST before we update children as grid overrides #1658\n        this.engine.nodes.forEach(n => {\n            this._prepareDragDropByNode(n);\n            if (n.subGrid && recurse)\n                n.subGrid.enableMove(doEnable, recurse);\n        });\n        return this;\n    }\n    /**\n     * Enables/disables widget resizing. No-op for static grids.\n     * @param recurse true (default) if sub-grids also get updated\n     */\n    enableResize(doEnable, recurse = true) {\n        if (this.opts.staticGrid)\n            return this; // can't size a static grid!\n        doEnable ? delete this.opts.disableResize : this.opts.disableResize = true; // FIRST before we update children as grid overrides #1658\n        this.engine.nodes.forEach(n => {\n            this._prepareDragDropByNode(n);\n            if (n.subGrid && recurse)\n                n.subGrid.enableResize(doEnable, recurse);\n        });\n        return this;\n    }\n    /** @internal removes any drag&drop present (called during destroy) */\n    _removeDD(el) {\n        dd.draggable(el, 'destroy').resizable(el, 'destroy');\n        if (el.gridstackNode) {\n            delete el.gridstackNode._initDD; // reset our DD init flag\n        }\n        delete el.ddElement;\n        return this;\n    }\n    /** @internal called to add drag over to support widgets being added externally */\n    _setupAcceptWidget() {\n        // check if we need to disable things\n        if (this.opts.staticGrid || (!this.opts.acceptWidgets && !this.opts.removable)) {\n            dd.droppable(this.el, 'destroy');\n            return this;\n        }\n        // vars shared across all methods\n        let cellHeight, cellWidth;\n        let onDrag = (event, el, helper) => {\n            let node = el.gridstackNode;\n            if (!node)\n                return;\n            helper = helper || el;\n            let parent = this.el.getBoundingClientRect();\n            let { top, left } = helper.getBoundingClientRect();\n            left -= parent.left;\n            top -= parent.top;\n            let ui = { position: { top, left } };\n            if (node._temporaryRemoved) {\n                node.x = Math.max(0, Math.round(left / cellWidth));\n                node.y = Math.max(0, Math.round(top / cellHeight));\n                delete node.autoPosition;\n                this.engine.nodeBoundFix(node);\n                // don't accept *initial* location if doesn't fit #1419 (locked drop region, or can't grow), but maybe try if it will go somewhere\n                if (!this.engine.willItFit(node)) {\n                    node.autoPosition = true; // ignore x,y and try for any slot...\n                    if (!this.engine.willItFit(node)) {\n                        dd.off(el, 'drag'); // stop calling us\n                        return; // full grid or can't grow\n                    }\n                    if (node._willFitPos) {\n                        // use the auto position instead #1687\n                        Utils.copyPos(node, node._willFitPos);\n                        delete node._willFitPos;\n                    }\n                }\n                // re-use the existing node dragging method\n                this._onStartMoving(helper, event, ui, node, cellWidth, cellHeight);\n            }\n            else {\n                // re-use the existing node dragging that does so much of the collision detection\n                this._dragOrResize(helper, event, ui, node, cellWidth, cellHeight);\n            }\n        };\n        dd.droppable(this.el, {\n            accept: (el) => {\n                let node = el.gridstackNode;\n                // set accept drop to true on ourself (which we ignore) so we don't get \"can't drop\" icon in HTML5 mode while moving\n                if (node?.grid === this)\n                    return true;\n                if (!this.opts.acceptWidgets)\n                    return false;\n                // check for accept method or class matching\n                let canAccept = true;\n                if (typeof this.opts.acceptWidgets === 'function') {\n                    canAccept = this.opts.acceptWidgets(el);\n                }\n                else {\n                    let selector = (this.opts.acceptWidgets === true ? '.grid-stack-item' : this.opts.acceptWidgets);\n                    canAccept = el.matches(selector);\n                }\n                // finally check to make sure we actually have space left #1571\n                if (canAccept && node && this.opts.maxRow) {\n                    let n = { w: node.w, h: node.h, minW: node.minW, minH: node.minH }; // only width/height matters and autoPosition\n                    canAccept = this.engine.willItFit(n);\n                }\n                return canAccept;\n            }\n        })\n            /**\n             * entering our grid area\n             */\n            .on(this.el, 'dropover', (event, el, helper) => {\n            // console.log(`over ${this.el.gridstack.opts.id} ${count++}`); // TEST\n            let node = el.gridstackNode;\n            // ignore drop enter on ourself (unless we temporarily removed) which happens on a simple drag of our item\n            if (node?.grid === this && !node._temporaryRemoved) {\n                // delete node._added; // reset this to track placeholder again in case we were over other grid #1484 (dropout doesn't always clear)\n                return false; // prevent parent from receiving msg (which may be a grid as well)\n            }\n            // fix #1578 when dragging fast, we may not get a leave on the previous grid so force one now\n            if (node?.grid && node.grid !== this && !node._temporaryRemoved) {\n                // console.log('dropover without leave'); // TEST\n                let otherGrid = node.grid;\n                otherGrid._leave(el, helper);\n            }\n            // cache cell dimensions (which don't change), position can animate if we removed an item in otherGrid that affects us...\n            cellWidth = this.cellWidth();\n            cellHeight = this.getCellHeight(true);\n            // load any element attributes if we don't have a node\n            if (!node) {\n                node = this._readAttr(el, false); // don't wipe external (e.g. drag toolbar) attr #2354\n            }\n            if (!node.grid) {\n                node._isExternal = true;\n                el.gridstackNode = node;\n            }\n            // calculate the grid size based on element outer size\n            helper = helper || el;\n            let w = node.w || Math.round(helper.offsetWidth / cellWidth) || 1;\n            let h = node.h || Math.round(helper.offsetHeight / cellHeight) || 1;\n            // if the item came from another grid, make a copy and save the original info in case we go back there\n            if (node.grid && node.grid !== this) {\n                // copy the node original values (min/max/id/etc...) but override width/height/other flags which are this grid specific\n                // console.log('dropover cloning node'); // TEST\n                if (!el._gridstackNodeOrig)\n                    el._gridstackNodeOrig = node; // shouldn't have multiple nested!\n                el.gridstackNode = node = { ...node, w, h, grid: this };\n                delete node.x;\n                delete node.y;\n                this.engine.cleanupNode(node)\n                    .nodeBoundFix(node);\n                // restore some internal fields we need after clearing them all\n                node._initDD =\n                    node._isExternal = // DOM needs to be re-parented on a drop\n                        node._temporaryRemoved = true; // so it can be inserted onDrag below\n            }\n            else {\n                node.w = w;\n                node.h = h;\n                node._temporaryRemoved = true; // so we can insert it\n            }\n            // clear any marked for complete removal (Note: don't check _isAboutToRemove as that is cleared above - just do it)\n            this._itemRemoving(node.el, false);\n            dd.on(el, 'drag', onDrag);\n            // make sure this is called at least once when going fast #1578\n            onDrag(event, el, helper);\n            return false; // prevent parent from receiving msg (which may be a grid as well)\n        })\n            /**\n             * Leaving our grid area...\n             */\n            .on(this.el, 'dropout', (event, el, helper) => {\n            // console.log(`out ${this.el.gridstack.opts.id} ${count++}`); // TEST\n            let node = el.gridstackNode;\n            if (!node)\n                return false;\n            // fix #1578 when dragging fast, we might get leave after other grid gets enter (which calls us to clean)\n            // so skip this one if we're not the active grid really..\n            if (!node.grid || node.grid === this) {\n                this._leave(el, helper);\n                // if we were created as temporary nested grid, go back to before state\n                if (this._isTemp) {\n                    this.removeAsSubGrid(node);\n                }\n            }\n            return false; // prevent parent from receiving msg (which may be grid as well)\n        })\n            /**\n             * end - releasing the mouse\n             */\n            .on(this.el, 'drop', (event, el, helper) => {\n            let node = el.gridstackNode;\n            // ignore drop on ourself from ourself that didn't come from the outside - dragend will handle the simple move instead\n            if (node?.grid === this && !node._isExternal)\n                return false;\n            let wasAdded = !!this.placeholder.parentElement; // skip items not actually added to us because of constrains, but do cleanup #1419\n            this.placeholder.remove();\n            // notify previous grid of removal\n            // console.log('drop delete _gridstackNodeOrig') // TEST\n            let origNode = el._gridstackNodeOrig;\n            delete el._gridstackNodeOrig;\n            if (wasAdded && origNode?.grid && origNode.grid !== this) {\n                let oGrid = origNode.grid;\n                oGrid.engine.removeNodeFromLayoutCache(origNode);\n                oGrid.engine.removedNodes.push(origNode);\n                oGrid._triggerRemoveEvent()._triggerChangeEvent();\n                // if it's an empty sub-grid that got auto-created, nuke it\n                if (oGrid.parentGridItem && !oGrid.engine.nodes.length && oGrid.opts.subGridDynamic) {\n                    oGrid.removeAsSubGrid();\n                }\n            }\n            if (!node)\n                return false;\n            // use existing placeholder node as it's already in our list with drop location\n            if (wasAdded) {\n                this.engine.cleanupNode(node); // removes all internal _xyz values\n                node.grid = this;\n            }\n            delete node.grid._isTemp;\n            dd.off(el, 'drag');\n            // if we made a copy ('helper' which is temp) of the original node then insert a copy, else we move the original node (#1102)\n            // as the helper will be nuked by jquery-ui otherwise. TODO: update old code path\n            if (helper !== el) {\n                helper.remove();\n                el.gridstackNode = origNode; // original item (left behind) is re-stored to pre dragging as the node now has drop info\n                if (wasAdded) {\n                    el = el.cloneNode(true);\n                }\n            }\n            else {\n                el.remove(); // reduce flicker as we change depth here, and size further down\n                this._removeDD(el);\n            }\n            if (!wasAdded)\n                return false;\n            el.gridstackNode = node;\n            node.el = el;\n            let subGrid = node.subGrid?.el?.gridstack; // set when actual sub-grid present\n            // @ts-ignore\n            Utils.copyPos(node, this._readAttr(this.placeholder)); // placeholder values as moving VERY fast can throw things off #1578\n            Utils.removePositioningStyles(el); // @ts-ignore\n            this._writeAttr(el, node);\n            el.classList.add(gridDefaults.itemClass, this.opts.itemClass);\n            this.el.appendChild(el); // @ts-ignore // TODO: now would be ideal time to _removeHelperStyle() overriding floating styles (native only)\n            if (subGrid) {\n                subGrid.parentGridItem = node;\n                if (!subGrid.opts.styleInHead)\n                    subGrid._updateStyles(true); // re-create sub-grid styles now that we've moved\n            }\n            this._prepareDragDropByNode(node);\n            this._updateContainerHeight();\n            this.engine.addedNodes.push(node); // @ts-ignore\n            this._triggerAddEvent(); // @ts-ignore\n            this._triggerChangeEvent();\n            this.engine.endUpdate();\n            if (this._gsEventHandler['dropped']) {\n                this._gsEventHandler['dropped']({ ...event, type: 'dropped' }, origNode && origNode.grid ? origNode : undefined, node);\n            }\n            return false; // prevent parent from receiving msg (which may be grid as well)\n        });\n        return this;\n    }\n    /** @internal mark item for removal */\n    _itemRemoving(el, remove) {\n        let node = el ? el.gridstackNode : undefined;\n        if (!node || !node.grid || el.classList.contains(this.opts.removableOptions.decline))\n            return;\n        remove ? node._isAboutToRemove = true : delete node._isAboutToRemove;\n        remove ? el.classList.add('grid-stack-item-removing') : el.classList.remove('grid-stack-item-removing');\n    }\n    /** @internal called to setup a trash drop zone if the user specifies it */\n    _setupRemoveDrop() {\n        if (!this.opts.staticGrid && typeof this.opts.removable === 'string') {\n            let trashEl = document.querySelector(this.opts.removable);\n            if (!trashEl)\n                return this;\n            // only register ONE drop-over/dropout callback for the 'trash', and it will\n            // update the passed in item and parent grid because the 'trash' is a shared resource anyway,\n            // and Native DD only has 1 event CB (having a list and technically a per grid removableOptions complicates things greatly)\n            if (!dd.isDroppable(trashEl)) {\n                dd.droppable(trashEl, this.opts.removableOptions)\n                    .on(trashEl, 'dropover', (event, el) => this._itemRemoving(el, true))\n                    .on(trashEl, 'dropout', (event, el) => this._itemRemoving(el, false));\n            }\n        }\n        return this;\n    }\n    /** @internal prepares the element for drag&drop */\n    _prepareDragDropByNode(node) {\n        let el = node.el;\n        const noMove = node.noMove || this.opts.disableDrag;\n        const noResize = node.noResize || this.opts.disableResize;\n        // check for disabled grid first\n        if (this.opts.staticGrid || (noMove && noResize)) {\n            if (node._initDD) {\n                this._removeDD(el); // nukes everything instead of just disable, will add some styles back next\n                delete node._initDD;\n            }\n            el.classList.add('ui-draggable-disabled', 'ui-resizable-disabled'); // add styles one might depend on #1435\n            return this;\n        }\n        if (!node._initDD) {\n            // variables used/cashed between the 3 start/move/end methods, in addition to node passed above\n            let cellWidth;\n            let cellHeight;\n            /** called when item starts moving/resizing */\n            let onStartMoving = (event, ui) => {\n                // trigger any 'dragstart' / 'resizestart' manually\n                if (this._gsEventHandler[event.type]) {\n                    this._gsEventHandler[event.type](event, event.target);\n                }\n                cellWidth = this.cellWidth();\n                cellHeight = this.getCellHeight(true); // force pixels for calculations\n                this._onStartMoving(el, event, ui, node, cellWidth, cellHeight);\n            };\n            /** called when item is being dragged/resized */\n            let dragOrResize = (event, ui) => {\n                this._dragOrResize(el, event, ui, node, cellWidth, cellHeight);\n            };\n            /** called when the item stops moving/resizing */\n            let onEndMoving = (event) => {\n                this.placeholder.remove();\n                delete node._moving;\n                delete node._event;\n                delete node._lastTried;\n                // if the item has moved to another grid, we're done here\n                let target = event.target;\n                if (!target.gridstackNode || target.gridstackNode.grid !== this)\n                    return;\n                node.el = target;\n                if (node._isAboutToRemove) {\n                    let grid = el.gridstackNode.grid;\n                    if (grid._gsEventHandler[event.type]) {\n                        grid._gsEventHandler[event.type](event, target);\n                    }\n                    grid.engine.nodes.push(node); // temp add it back so we can proper remove it next\n                    grid.removeWidget(el, true, true);\n                }\n                else {\n                    Utils.removePositioningStyles(target);\n                    if (node._temporaryRemoved) {\n                        // got removed - restore item back to before dragging position\n                        Utils.copyPos(node, node._orig); // @ts-ignore\n                        this._writePosAttr(target, node);\n                        this.engine.addNode(node);\n                    }\n                    else {\n                        // move to new placeholder location\n                        this._writePosAttr(target, node);\n                    }\n                    if (this._gsEventHandler[event.type]) {\n                        this._gsEventHandler[event.type](event, target);\n                    }\n                }\n                // @ts-ignore\n                this._extraDragRow = 0; // @ts-ignore\n                this._updateContainerHeight(); // @ts-ignore\n                this._triggerChangeEvent();\n                this.engine.endUpdate();\n                if (event.type === 'resizestop') {\n                    if (Number.isInteger(node.sizeToContent))\n                        node.sizeToContent = node.h; // new soft limit\n                    this.doContentResize(false, true, node); // no amin wait as will use the actual sized coordinate attr\n                }\n            };\n            dd.draggable(el, {\n                start: onStartMoving,\n                stop: onEndMoving,\n                drag: dragOrResize\n            }).resizable(el, {\n                start: onStartMoving,\n                stop: onEndMoving,\n                resize: dragOrResize\n            });\n            node._initDD = true; // we've set DD support now\n        }\n        // finally fine tune move vs resize by disabling any part...\n        dd.draggable(el, noMove ? 'disable' : 'enable')\n            .resizable(el, noResize ? 'disable' : 'enable');\n        return this;\n    }\n    /** @internal handles actual drag/resize start */\n    _onStartMoving(el, event, ui, node, cellWidth, cellHeight) {\n        this.engine.cleanNodes()\n            .beginUpdate(node);\n        // @ts-ignore\n        this._writePosAttr(this.placeholder, node);\n        this.el.appendChild(this.placeholder);\n        // console.log('_onStartMoving placeholder') // TEST\n        node.el = this.placeholder;\n        node._lastUiPosition = ui.position;\n        node._prevYPix = ui.position.top;\n        node._moving = (event.type === 'dragstart'); // 'dropover' are not initially moving so they can go exactly where they enter (will push stuff out of the way)\n        delete node._lastTried;\n        if (event.type === 'dropover' && node._temporaryRemoved) {\n            // console.log('engine.addNode x=' + node.x); // TEST\n            this.engine.addNode(node); // will add, fix collisions, update attr and clear _temporaryRemoved\n            node._moving = true; // AFTER, mark as moving object (wanted fix location before)\n        }\n        // set the min/max resize info\n        this.engine.cacheRects(cellWidth, cellHeight, this.opts.marginTop, this.opts.marginRight, this.opts.marginBottom, this.opts.marginLeft);\n        if (event.type === 'resizestart') {\n            dd.resizable(el, 'option', 'minWidth', cellWidth * (node.minW || 1))\n                .resizable(el, 'option', 'minHeight', cellHeight * (node.minH || 1));\n            if (node.maxW) {\n                dd.resizable(el, 'option', 'maxWidth', cellWidth * node.maxW);\n            }\n            if (node.maxH) {\n                dd.resizable(el, 'option', 'maxHeight', cellHeight * node.maxH);\n            }\n        }\n    }\n    /** @internal handles actual drag/resize */\n    _dragOrResize(el, event, ui, node, cellWidth, cellHeight) {\n        let p = { ...node._orig }; // could be undefined (_isExternal) which is ok (drag only set x,y and w,h will default to node value)\n        let resizing;\n        let mLeft = this.opts.marginLeft, mRight = this.opts.marginRight, mTop = this.opts.marginTop, mBottom = this.opts.marginBottom;\n        // if margins (which are used to pass mid point by) are large relative to cell height/width, reduce them down #1855\n        let mHeight = Math.round(cellHeight * 0.1), mWidth = Math.round(cellWidth * 0.1);\n        mLeft = Math.min(mLeft, mWidth);\n        mRight = Math.min(mRight, mWidth);\n        mTop = Math.min(mTop, mHeight);\n        mBottom = Math.min(mBottom, mHeight);\n        if (event.type === 'drag') {\n            if (node._temporaryRemoved)\n                return; // handled by dropover\n            let distance = ui.position.top - node._prevYPix;\n            node._prevYPix = ui.position.top;\n            if (this.opts.draggable.scroll !== false) {\n                Utils.updateScrollPosition(el, ui.position, distance);\n            }\n            // get new position taking into account the margin in the direction we are moving! (need to pass mid point by margin)\n            let left = ui.position.left + (ui.position.left > node._lastUiPosition.left ? -mRight : mLeft);\n            let top = ui.position.top + (ui.position.top > node._lastUiPosition.top ? -mBottom : mTop);\n            p.x = Math.round(left / cellWidth);\n            p.y = Math.round(top / cellHeight);\n            // @ts-ignore// if we're at the bottom hitting something else, grow the grid so cursor doesn't leave when trying to place below others\n            let prev = this._extraDragRow;\n            if (this.engine.collide(node, p)) {\n                let row = this.getRow();\n                let extra = Math.max(0, (p.y + node.h) - row);\n                if (this.opts.maxRow && row + extra > this.opts.maxRow) {\n                    extra = Math.max(0, this.opts.maxRow - row);\n                } // @ts-ignore\n                this._extraDragRow = extra; // @ts-ignore\n            }\n            else\n                this._extraDragRow = 0; // @ts-ignore\n            if (this._extraDragRow !== prev)\n                this._updateContainerHeight();\n            if (node.x === p.x && node.y === p.y)\n                return; // skip same\n            // DON'T skip one we tried as we might have failed because of coverage <50% before\n            // if (node._lastTried && node._lastTried.x === x && node._lastTried.y === y) return;\n        }\n        else if (event.type === 'resize') {\n            if (p.x < 0)\n                return;\n            // Scrolling page if needed\n            Utils.updateScrollResize(event, el, cellHeight);\n            // get new size\n            p.w = Math.round((ui.size.width - mLeft) / cellWidth);\n            p.h = Math.round((ui.size.height - mTop) / cellHeight);\n            if (node.w === p.w && node.h === p.h)\n                return;\n            if (node._lastTried && node._lastTried.w === p.w && node._lastTried.h === p.h)\n                return; // skip one we tried (but failed)\n            // if we size on left/top side this might move us, so get possible new position as well\n            let left = ui.position.left + mLeft;\n            let top = ui.position.top + mTop;\n            p.x = Math.round(left / cellWidth);\n            p.y = Math.round(top / cellHeight);\n            resizing = true;\n        }\n        node._event = event;\n        node._lastTried = p; // set as last tried (will nuke if we go there)\n        let rect = {\n            x: ui.position.left + mLeft,\n            y: ui.position.top + mTop,\n            w: (ui.size ? ui.size.width : node.w * cellWidth) - mLeft - mRight,\n            h: (ui.size ? ui.size.height : node.h * cellHeight) - mTop - mBottom\n        };\n        if (this.engine.moveNodeCheck(node, { ...p, cellWidth, cellHeight, rect, resizing })) {\n            node._lastUiPosition = ui.position;\n            this.engine.cacheRects(cellWidth, cellHeight, mTop, mRight, mBottom, mLeft);\n            delete node._skipDown;\n            if (resizing && node.subGrid)\n                node.subGrid.onResize();\n            this._extraDragRow = 0; // @ts-ignore\n            this._updateContainerHeight();\n            let target = event.target; // @ts-ignore\n            this._writePosAttr(target, node);\n            if (this._gsEventHandler[event.type]) {\n                this._gsEventHandler[event.type](event, target);\n            }\n        }\n    }\n    /** @internal called when item leaving our area by either cursor dropout event\n     * or shape is outside our boundaries. remove it from us, and mark temporary if this was\n     * our item to start with else restore prev node values from prev grid it came from.\n     */\n    _leave(el, helper) {\n        let node = el.gridstackNode;\n        if (!node)\n            return;\n        dd.off(el, 'drag'); // no need to track while being outside\n        // this gets called when cursor leaves and shape is outside, so only do this once\n        if (node._temporaryRemoved)\n            return;\n        node._temporaryRemoved = true;\n        this.engine.removeNode(node); // remove placeholder as well, otherwise it's a sign node is not in our list, which is a bigger issue\n        node.el = node._isExternal && helper ? helper : el; // point back to real item being dragged\n        if (this.opts.removable === true) { // boolean vs a class string\n            // item leaving us and we are supposed to remove on leave (no need to drag onto trash) mark it so\n            this._itemRemoving(el, true);\n        }\n        // finally if item originally came from another grid, but left us, restore things back to prev info\n        if (el._gridstackNodeOrig) {\n            // console.log('leave delete _gridstackNodeOrig') // TEST\n            el.gridstackNode = el._gridstackNodeOrig;\n            delete el._gridstackNodeOrig;\n        }\n        else if (node._isExternal) {\n            // item came from outside (like a toolbar) so nuke any node info\n            delete node.el;\n            delete el.gridstackNode;\n            // and restore all nodes back to original\n            this.engine.restoreInitial();\n        }\n    }\n    // legacy method removed\n    commit() { obsolete(this, this.batchUpdate(false), 'commit', 'batchUpdate', '5.2'); return this; }\n}\n/** parent class for sizing content. defaults to '.grid-stack-item-content' */\nGridStack.resizeToContentParent = '.grid-stack-item-content';\n/** scoping so users can call GridStack.Utils.sort() for example */\nGridStack.Utils = Utils;\n/** scoping so users can call new GridStack.Engine(12) for example */\nGridStack.Engine = GridStackEngine;\nGridStack.GDRev = '9.5.1';\nexport { GridStack };\n//# sourceMappingURL=gridstack.js.map","/**\n * dd-gridstack.ts 9.5.1\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\nimport { Utils } from './utils';\nimport { DDManager } from './dd-manager';\nimport { DDElement } from './dd-element';\n// let count = 0; // TEST\n/**\n * HTML Native Mouse and Touch Events Drag and Drop functionality.\n */\nexport class DDGridStack {\n    resizable(el, opts, key, value) {\n        this._getDDElements(el).forEach(dEl => {\n            if (opts === 'disable' || opts === 'enable') {\n                dEl.ddResizable && dEl.ddResizable[opts](); // can't create DD as it requires options for setupResizable()\n            }\n            else if (opts === 'destroy') {\n                dEl.ddResizable && dEl.cleanResizable();\n            }\n            else if (opts === 'option') {\n                dEl.setupResizable({ [key]: value });\n            }\n            else {\n                const grid = dEl.el.gridstackNode.grid;\n                let handles = dEl.el.getAttribute('gs-resize-handles') ? dEl.el.getAttribute('gs-resize-handles') : grid.opts.resizable.handles;\n                let autoHide = !grid.opts.alwaysShowResizeHandle;\n                dEl.setupResizable({\n                    ...grid.opts.resizable,\n                    ...{ handles, autoHide },\n                    ...{\n                        start: opts.start,\n                        stop: opts.stop,\n                        resize: opts.resize\n                    }\n                });\n            }\n        });\n        return this;\n    }\n    draggable(el, opts, key, value) {\n        this._getDDElements(el).forEach(dEl => {\n            if (opts === 'disable' || opts === 'enable') {\n                dEl.ddDraggable && dEl.ddDraggable[opts](); // can't create DD as it requires options for setupDraggable()\n            }\n            else if (opts === 'destroy') {\n                dEl.ddDraggable && dEl.cleanDraggable();\n            }\n            else if (opts === 'option') {\n                dEl.setupDraggable({ [key]: value });\n            }\n            else {\n                const grid = dEl.el.gridstackNode.grid;\n                dEl.setupDraggable({\n                    ...grid.opts.draggable,\n                    ...{\n                        // containment: (grid.parentGridItem && !grid.opts.dragOut) ? grid.el.parentElement : (grid.opts.draggable.containment || null),\n                        start: opts.start,\n                        stop: opts.stop,\n                        drag: opts.drag\n                    }\n                });\n            }\n        });\n        return this;\n    }\n    dragIn(el, opts) {\n        this._getDDElements(el).forEach(dEl => dEl.setupDraggable(opts));\n        return this;\n    }\n    droppable(el, opts, key, value) {\n        if (typeof opts.accept === 'function' && !opts._accept) {\n            opts._accept = opts.accept;\n            opts.accept = (el) => opts._accept(el);\n        }\n        this._getDDElements(el).forEach(dEl => {\n            if (opts === 'disable' || opts === 'enable') {\n                dEl.ddDroppable && dEl.ddDroppable[opts]();\n            }\n            else if (opts === 'destroy') {\n                if (dEl.ddDroppable) { // error to call destroy if not there\n                    dEl.cleanDroppable();\n                }\n            }\n            else if (opts === 'option') {\n                dEl.setupDroppable({ [key]: value });\n            }\n            else {\n                dEl.setupDroppable(opts);\n            }\n        });\n        return this;\n    }\n    /** true if element is droppable */\n    isDroppable(el) {\n        return !!(el && el.ddElement && el.ddElement.ddDroppable && !el.ddElement.ddDroppable.disabled);\n    }\n    /** true if element is draggable */\n    isDraggable(el) {\n        return !!(el && el.ddElement && el.ddElement.ddDraggable && !el.ddElement.ddDraggable.disabled);\n    }\n    /** true if element is draggable */\n    isResizable(el) {\n        return !!(el && el.ddElement && el.ddElement.ddResizable && !el.ddElement.ddResizable.disabled);\n    }\n    on(el, name, callback) {\n        this._getDDElements(el).forEach(dEl => dEl.on(name, (event) => {\n            callback(event, DDManager.dragElement ? DDManager.dragElement.el : event.target, DDManager.dragElement ? DDManager.dragElement.helper : null);\n        }));\n        return this;\n    }\n    off(el, name) {\n        this._getDDElements(el).forEach(dEl => dEl.off(name));\n        return this;\n    }\n    /** @internal returns a list of DD elements, creating them on the fly by default */\n    _getDDElements(els, create = true) {\n        let hosts = Utils.getElements(els);\n        if (!hosts.length)\n            return [];\n        let list = hosts.map(e => e.ddElement || (create ? DDElement.init(e) : null));\n        if (!create) {\n            list.filter(d => d);\n        } // remove nulls\n        return list;\n    }\n}\n//# sourceMappingURL=dd-gridstack.js.map","import { GridItemHTMLElement, GridStack, GridStackElement, GridStackOptions } from \"gridstack\";\r\n\r\nfunction init(\r\n  options: GridStackOptions = {},\r\n  elOrString: GridStackElement = \".grid-stack\",\r\n  dotNet: DotNet.DotNetObject\r\n) {\r\n  console.log('options', options);\r\n  let grid = GridStack.init(options, elOrString);\r\n  grid[\"dotNet\"] = dotNet;\r\n  addEvents();\r\n\r\n  function addEvents() {\r\n    grid.on(\"resizestop\", function (event: Event, el: GridItemHTMLElement) {\r\n      dotNet.invokeMethodAsync(\"OnResize\", resize(event, el));\r\n    });\r\n  }\r\n\r\n  return {\r\n    setStatic: (value: boolean) => grid.setStatic(value),\r\n    reload: () => {\r\n      const opts = { ...grid.opts };\r\n      const el = grid.el;\r\n      grid.destroy(false);\r\n      grid = GridStack.init(opts, el);\r\n      grid[\"dotNet\"] = dotNet;\r\n      addEvents();\r\n      return grid;\r\n    },\r\n    save: () => {\r\n      const widgets = grid.save();\r\n      if (Array.isArray(widgets)) {\r\n        return widgets.map(({ content, ...rest }) => rest);\r\n      }\r\n      return [];\r\n    },\r\n  };\r\n}\r\n\r\nfunction resize(event: Event, el: GridItemHTMLElement) {\r\n  const id = el.getAttribute(\"gs-id\");\r\n  const { x, y, w, h } = el.gridstackNode;\r\n  const { w: width, h: height } = el.gridstackNode[\"_rect\"];\r\n  return { id, x, y, w, h, width, height };\r\n}\r\n\r\nexport { init };\r\n"],"names":["SuppressedError","Utils","getElements","els","root","document","doc","undefined","isNaN","el","getElementById","list","querySelectorAll","length","Array","from","getElement","substring","querySelector","shouldSizeToContent","n","grid","sizeToContent","opts","isIntercepted","a","b","y","h","x","w","isTouching","areaIntercept","x0","x1","y0","y1","area","sort","nodes","dir","column","reduce","col","Math","max","find","id","createStylesheet","parent","options","style","createElement","nonce","setAttribute","styleSheet","cssText","appendChild","createTextNode","insertBefore","firstChild","getElementsByTagName","sheet","removeStylesheet","parentNode","remove","addCSSRule","selector","rules","addRule","insertRule","toBool","v","toLowerCase","Boolean","toNumber","value","Number","parseHeight","val","unit","match","Error","parseFloat","defaults","target","sources","forEach","source","key","hasOwnProperty","this","same","Object","keys","copyPos","doMinMax","minW","minH","maxW","maxH","samePos","sanitizeMinMax","node","removeInternalAndSame","i","removeInternalForSave","removeEl","autoPosition","noResize","noMove","locked","throttle","func","delay","isWaiting","args","setTimeout","removePositioningStyles","position","removeProperty","left","top","width","height","getScrollElement","scrollingElement","documentElement","getComputedStyle","test","overflow","overflowY","parentElement","updateScrollPosition","distance","rect","getBoundingClientRect","innerHeightOrClientHeight","window","innerHeight","clientHeight","bottom","offsetDiffDown","offsetDiffUp","scrollEl","prevScroll","scrollTop","offsetHeight","abs","updateScrollResize","event","offsetTop","pointerPosY","clientY","scrollBy","behavior","clone","obj","cloneDeep","skipFields","ret","k","cloneNode","removeAttribute","appendTo","addElStyles","styles","s","isArray","initEvent","e","info","evt","type","button","which","buttons","bubbles","cancelable","dataTransfer","p","simulateMouseEvent","simulatedType","simulatedEvent","createEvent","initMouseEvent","screenX","screenY","clientX","ctrlKey","altKey","shiftKey","metaKey","dispatchEvent","GridStackEngine","constructor","addedNodes","removedNodes","maxRow","_float","float","onChange","batchUpdate","flag","doPack","batchMode","_prevFloat","cleanNodes","saveInitial","_packNodes","_notify","_useEntireRowArea","nn","_hasLocked","_moving","_skipDown","_fixCollisions","collide","opt","sortNodes","nested","swap","skip","didMove","newOpt","pack","moved","moveNode","skip2","skipId","_id","skip2Id","collideAll","filter","directionCollideCoverage","o","collides","_rect","r0","r","overMax","r2","yOver","MAX_VALUE","xOver","over","min","cacheRects","right","_doSwap","_dirty","touching","t","isAreaEmpty","compact","layout","doSort","wasBatch","wasColumnResize","_inColumnResize","copyNodes","index","after","addNode","_updating","_orig","newY","prepareNode","resizing","_idSeq","nodeBoundFix","before","findCacheLayout","copy","cacheOneLayout","getDirtyNodes","verify","dirtyNodes","concat","_lastTried","some","restoreInitial","findEmptyPosition","nodeList","found","floor","box","triggerAddEvent","skipCollision","dup","_temporaryRemoved","_removeDOM","push","removeNode","removeDOM","triggerEvent","_isAboutToRemove","removeAll","_layouts","moveNodeCheck","changedPosConstrain","clonedNode","map","canMove","getRow","gridstackNode","c","willItFit","_willFitPos","cleanupNode","content","wasUndefinedPack","forceCollide","prevPos","needToMove","activeDrag","subGridDynamic","_isTemp","a1","a2","makeSubGrid","row","beginUpdate","endUpdate","save","saveElement","saveCB","len","wl","l","layoutsNodesChange","ratio","round","columnChanged","prevColumn","doCompact","cacheLayout","newNodes","domOrder","cacheNodes","lastIndex","cacheNode","j","findIndex","splice","move","scale","clear","existing","n2","removeNodeFromLayoutCache","prop","gridDefaults","alwaysShowResizeHandle","animate","auto","cellHeight","cellHeightThrottle","cellHeightUnit","draggable","handle","scroll","itemClass","margin","marginUnit","minRow","oneColumnSize","placeholderClass","placeholderText","removableOptions","accept","decline","resizable","handles","rtl","dragInDefaultOptions","DDManager","isTouch","DocumentTouch","navigator","maxTouchPoints","msMaxTouchPoints","DDTouch","touches","preventDefault","touch","changedTouches","simulatePointerMouseEvent","touchstart","touchHandled","touchmove","touchend","pointerLeaveTimeout","clearTimeout","wasDragging","dragElement","pointerdown","pointerType","releasePointerCapture","pointerId","pointerenter","pointerleave","DDResizableHandle","host","direction","option","moving","_mouseDown","bind","_mouseMove","_mouseUp","_init","classList","add","prefix","zIndex","userSelect","addEventListener","destroy","mouseDownEvent","removeEventListener","removeChild","stopPropagation","_triggerEvent","name","DDBaseImplement","_eventRegister","disabled","_disabled","on","callback","off","enable","disable","eventName","DDResizable","super","rectScale","_ui","containmentRect","newRect","originalRect","scrolled","temporalRect","size","_mouseOver","_mouseOut","_setupAutoHide","autoHide","_setupHandlers","_removeHandlers","updateOption","updateHandles","updateAutoHide","overResizeElement","handlerDirection","handlers","split","trim","start","_resizeStart","stop","_resizeStop","_resizing","scrollY","startEvent","_setupHelper","_applyChange","ev","_getChange","resize","_cleanHelper","elOriginStyleVal","_originStyleProp","parentOriginStylePosition","testEl","opacity","testElPosition","oEvent","offsetX","offsetY","indexOf","constrain","_constrainSize","oWidth","oHeight","maxWidth","MAX_SAFE_INTEGER","minWidth","maxHeight","minHeight","containmentEl","scaleReciprocal","DDDraggable","dragScale","handleName","dragEl","contains","forDestroy","dragTimeout","helper","mouseHandled","closest","cancel","dragging","dropElement","activeElement","blur","_callDrag","drag","ui","_dragFollow","pauseDrag","pause","isInteger","ddElement","ddDroppable","_createHelper","_setupHelperContainmentStyle","dragOffset","_getDragOffset","helperContainment","_setupHelperStyle","_removeHelperStyle","drop","body","dragElementOriginStyle","originStyleProp","pointerEvents","willChange","transition","offset","offsetLeft","xformOffsetX","xformOffsetY","targetOffset","DDDroppable","_mouseEnter","_mouseLeave","_setupAccept","_canDrop","out","parentDrop","matches","DDElement","init","ddDraggable","ddResizable","setupDraggable","cleanDraggable","setupResizable","cleanResizable","setupDroppable","cleanDroppable","dd","_getDDElements","dEl","getAttribute","dragIn","droppable","_accept","isDroppable","isDraggable","isResizable","create","hosts","d","GridStack","elOrString","getGridElement","gridstack","console","error","initAll","grids","getGridElements","addGrid","children","load","addRemoveCB","implementation","createHTMLDocument","innerHTML","class","registerEngine","engineClass","placeholder","_placeholder","placeholderChild","className","_gsEventHandler","_extraDragRow","rowAttr","_alwaysShowResizeHandle","staticGrid","handleClass","_initMargin","disableOneColumnMode","_widthOrContainer","_prevColumn","getColumn","grandParent","parentGridItem","subGrid","_isAutoCellHeight","_styleSheetClass","_setStaticClass","engine","cbNodes","_writePosAttr","_updateStyles","getGridItems","_prepareElement","setAnimation","_setupRemoveDrop","_setupAcceptWidget","_updateResizeEvent","addWidget","arguments","domAttr","_readAttr","_writeAttr","_insertNotAppend","prepend","makeWidget","ops","nodeToAdd","saveContent","subGridTemplate","autoColumn","subGridOpts","newItem","newItemOpt","_removeDD","_prepareDragDropByNode","update","_autoColumn","_event","removeAsSubGrid","nodeThatRemoved","pGrid","removeWidget","saveGridOpt","sub","listOrOpt","marginBottom","marginTop","marginRight","marginLeft","origShow","items","addRemove","haveCoord","_ignoreLayoutsNodeChange","prevCB","removed","updateNodes","widthChanged","item","doContentResize","_updateContainerHeight","_triggerRemoveEvent","_triggerAddEvent","_triggerChangeEvent","getCellHeight","forcePixel","rows","parseInt","marginDiff","cellWidth","data","clientWidth","innerWidth","domNodes","oldColumn","oneColumnModeDomSort","offAll","setStatic","_removeStylesheet","getFloat","getCellFromPixel","useDocRelative","containerPos","relativeLeft","relativeTop","columnWidth","rowHeight","noData","detail","log","doAnimate","updateClass","recurse","warn","m","itemContent","styleInHead","changed","ddChanged","resizeToContent","useAttrSize","cell","resizeToContentParent","padding","itemH","wantedH","child","firstElementChild","ceil","softMax","resizeToContentCheck","useAttr","resizeToContentCB","getMargin","elements","CustomEvent","Event","_styles","forceUpdate","styleLocation","_max","getHeight","cssMinHeight","String","attrs","clearDefaultAttr","classes","onResize","prevWidth","oneColumn","_skipInitialResize","forceRemove","trackSize","resizeObserver","disconnect","_sizeThrottle","ResizeObserver","observe","margins","getDD","setupDragIn","dragInOptions","movable","enableMove","enableResize","doEnable","disableDrag","disableResize","_initDD","acceptWidgets","removable","onDrag","_onStartMoving","_dragOrResize","canAccept","_leave","_isExternal","offsetWidth","_gridstackNodeOrig","_itemRemoving","wasAdded","origNode","oGrid","trashEl","onStartMoving","dragOrResize","onEndMoving","_lastUiPosition","_prevYPix","mLeft","mRight","mTop","mBottom","mHeight","mWidth","prev","extra","commit","self","f","oldName","newName","rev","wrapper","apply","prototype","obsolete","dotNet","addEvents","invokeMethodAsync","reload","assign","widgets","_a","call","getOwnPropertySymbols","propertyIsEnumerable","__rest","Engine","GDRev"],"mappings":"AAwUkD,mBAApBA,iBAAiCA,gBC/RxD,MAAMC,EAET,kBAAOC,CAAYC,EAAKC,EAAOC,UAC3B,GAAmB,iBAARF,EAAkB,CACzB,MAAMG,EAAO,mBAAoBF,EAAQA,OAAOG,EAIhD,GAAID,IAAQE,OAAOL,EAAI,IAAK,CACxB,MAAMM,EAAKH,EAAII,eAAeP,GAC9B,OAAOM,EAAK,CAACA,GAAM,EACtB,CACD,IAAIE,EAAOP,EAAKQ,iBAAiBT,GAOjC,OANKQ,EAAKE,QAAqB,MAAXV,EAAI,IAAyB,MAAXA,EAAI,KACtCQ,EAAOP,EAAKQ,iBAAiB,IAAMT,GAC9BQ,EAAKE,SACNF,EAAOP,EAAKQ,iBAAiB,IAAMT,KAGpCW,MAAMC,KAAKJ,EACrB,CACD,MAAO,CAACR,EACX,CAED,iBAAOa,CAAWb,EAAKC,EAAOC,UAC1B,GAAmB,iBAARF,EAAkB,CACzB,MAAMG,EAAO,mBAAoBF,EAAQA,OAAOG,EAChD,IAAKJ,EAAIU,OACL,OAAO,KACX,GAAIP,GAAkB,MAAXH,EAAI,GACX,OAAOG,EAAII,eAAeP,EAAIc,UAAU,IAE5C,GAAe,MAAXd,EAAI,IAAyB,MAAXA,EAAI,IAAyB,MAAXA,EAAI,GACxC,OAAOC,EAAKc,cAAcf,GAG9B,GAAIG,IAAQE,OAAOL,EAAI,IACnB,OAAOG,EAAII,eAAeP,GAG9B,IAAIM,EAAKL,EAAKc,cAAcf,GAO5B,OANIG,IAAQG,IACRA,EAAKH,EAAII,eAAeP,IAEvBM,IACDA,EAAKL,EAAKc,cAAc,IAAMf,IAE3BM,CACV,CACD,OAAON,CACV,CAED,0BAAOgB,CAAoBC,GACvB,OAAOA,GAAGC,SAAWD,EAAEE,eAAkBF,EAAEC,KAAKE,KAAKD,gBAAqC,IAApBF,EAAEE,cAC3E,CAED,oBAAOE,CAAcC,EAAGC,GACpB,QAASD,EAAEE,GAAKD,EAAEC,EAAID,EAAEE,GAAKH,EAAEE,EAAIF,EAAEG,GAAKF,EAAEC,GAAKF,EAAEI,EAAIJ,EAAEK,GAAKJ,EAAEG,GAAKJ,EAAEI,GAAKH,EAAEG,EAAIH,EAAEI,EACvF,CAED,iBAAOC,CAAWN,EAAGC,GACjB,OAAOzB,EAAMuB,cAAcC,EAAG,CAAEI,EAAGH,EAAEG,EAAI,GAAKF,EAAGD,EAAEC,EAAI,GAAKG,EAAGJ,EAAEI,EAAI,EAAGF,EAAGF,EAAEE,EAAI,GACpF,CAED,oBAAOI,CAAcP,EAAGC,GACpB,IAAIO,EAAMR,EAAEI,EAAIH,EAAEG,EAAKJ,EAAEI,EAAIH,EAAEG,EAC3BK,EAAMT,EAAEI,EAAIJ,EAAEK,EAAIJ,EAAEG,EAAIH,EAAEI,EAAKL,EAAEI,EAAIJ,EAAEK,EAAIJ,EAAEG,EAAIH,EAAEI,EACvD,GAAII,GAAMD,EACN,OAAO,EACX,IAAIE,EAAMV,EAAEE,EAAID,EAAEC,EAAKF,EAAEE,EAAID,EAAEC,EAC3BS,EAAMX,EAAEE,EAAIF,EAAEG,EAAIF,EAAEC,EAAID,EAAEE,EAAKH,EAAEE,EAAIF,EAAEG,EAAIF,EAAEC,EAAID,EAAEE,EACvD,OAAIQ,GAAMD,EACC,GACHD,EAAKD,IAAOG,EAAKD,EAC5B,CAED,WAAOE,CAAKZ,GACR,OAAOA,EAAEK,EAAIL,EAAEG,CAClB,CAOD,WAAOU,CAAKC,EAAOC,EAAM,EAAGC,GAExB,OADAA,EAASA,GAAUF,EAAMG,QAAO,CAACC,EAAKvB,IAAMwB,KAAKC,IAAIzB,EAAES,EAAIT,EAAEU,EAAGa,IAAM,IAAM,IAC/D,IAATH,EACOD,EAAMD,MAAK,CAACb,EAAGC,KAAQA,EAAEG,GAAK,MAASH,EAAEC,GAAK,KAAQc,IAAYhB,EAAEI,GAAK,MAASJ,EAAEE,GAAK,KAAQc,KAEjGF,EAAMD,MAAK,CAACZ,EAAGD,KAAQC,EAAEG,GAAK,MAASH,EAAEC,GAAK,KAAQc,IAAYhB,EAAEI,GAAK,MAASJ,EAAEE,GAAK,KAAQc,IAC/G,CAED,WAAOK,CAAKP,EAAOQ,GACf,OAAOA,EAAKR,EAAMO,MAAK1B,GAAKA,EAAE2B,KAAOA,SAAMxC,CAC9C,CAOD,uBAAOyC,CAAiBD,EAAIE,EAAQC,GAChC,IAAIC,EAAQ9C,SAAS+C,cAAc,SACnC,MAAMC,EAAQH,GAASG,MAqBvB,OApBIA,IACAF,EAAME,MAAQA,GAClBF,EAAMG,aAAa,OAAQ,YAC3BH,EAAMG,aAAa,cAAeP,GAE9BI,EAAMI,WAENJ,EAAMI,WAAWC,QAAU,GAG3BL,EAAMM,YAAYpD,SAASqD,eAAe,KAEzCT,EAMDA,EAAOU,aAAaR,EAAOF,EAAOW,aAJlCX,EAAS5C,SAASwD,qBAAqB,QAAQ,IACxCJ,YAAYN,GAKhBA,EAAMW,KAChB,CAED,uBAAOC,CAAiBhB,GACpB,IAAItC,EAAKJ,SAASa,cAAc,qBAAuB6B,EAAK,KACxDtC,GAAMA,EAAGuD,YACTvD,EAAGwD,QACV,CAED,iBAAOC,CAAWJ,EAAOK,EAAUC,GACF,mBAAlBN,EAAMO,QACbP,EAAMO,QAAQF,EAAUC,GAES,mBAArBN,EAAMQ,YAClBR,EAAMQ,WAAW,GAAGH,KAAYC,KAEvC,CAED,aAAOG,CAAOC,GACV,MAAiB,kBAANA,EACAA,EAEM,iBAANA,IAEQ,MADfA,EAAIA,EAAEC,gBACqB,OAAND,GAAoB,UAANA,GAAuB,MAANA,GAEjDE,QAAQF,EAClB,CACD,eAAOG,CAASC,GACZ,OAAkB,OAAVA,GAAmC,IAAjBA,EAAM/D,YAAgBN,EAAYsE,OAAOD,EACtE,CACD,kBAAOE,CAAYC,GACf,IAAInD,EACAoD,EAAO,KACX,GAAmB,iBAARD,EACP,GAAY,SAARA,GAA0B,KAARA,EAClBnD,EAAI,MACH,CACD,IAAIqD,EAAQF,EAAIE,MAAM,yEACtB,IAAKA,EACD,MAAM,IAAIC,MAAM,wBAAwBH,KAE5CC,EAAOC,EAAM,IAAM,KACnBrD,EAAIuD,WAAWF,EAAM,GACxB,MAGDrD,EAAImD,EAER,MAAO,CAAEnD,IAAGoD,OACf,CAGD,eAAOI,CAASC,KAAWC,GAcvB,OAbAA,EAAQC,SAAQC,IACZ,IAAK,MAAMC,KAAOD,EAAQ,CACtB,IAAKA,EAAOE,eAAeD,GACvB,OACgB,OAAhBJ,EAAOI,SAAiClF,IAAhB8E,EAAOI,GAC/BJ,EAAOI,GAAOD,EAAOC,GAEO,iBAAhBD,EAAOC,IAA4C,iBAAhBJ,EAAOI,IAEtDE,KAAKP,SAASC,EAAOI,GAAMD,EAAOC,GAEzC,KAEEJ,CACV,CAED,WAAOO,CAAKnE,EAAGC,GACX,GAAiB,iBAAND,EACP,OAAOA,GAAKC,EAChB,UAAWD,UAAaC,EACpB,OAAO,EAEX,GAAImE,OAAOC,KAAKrE,GAAGZ,SAAWgF,OAAOC,KAAKpE,GAAGb,OACzC,OAAO,EACX,IAAK,MAAM4E,KAAOhE,EACd,GAAIA,EAAEgE,KAAS/D,EAAE+D,GACb,OAAO,EAEf,OAAO,CACV,CAED,cAAOM,CAAQtE,EAAGC,EAAGsE,GAAW,GAmB5B,YAlBYzF,IAARmB,EAAEG,IACFJ,EAAEI,EAAIH,EAAEG,QACAtB,IAARmB,EAAEC,IACFF,EAAEE,EAAID,EAAEC,QACApB,IAARmB,EAAEI,IACFL,EAAEK,EAAIJ,EAAEI,QACAvB,IAARmB,EAAEE,IACFH,EAAEG,EAAIF,EAAEE,GACRoE,IACItE,EAAEuE,OACFxE,EAAEwE,KAAOvE,EAAEuE,MACXvE,EAAEwE,OACFzE,EAAEyE,KAAOxE,EAAEwE,MACXxE,EAAEyE,OACF1E,EAAE0E,KAAOzE,EAAEyE,MACXzE,EAAE0E,OACF3E,EAAE2E,KAAO1E,EAAE0E,OAEZ3E,CACV,CAED,cAAO4E,CAAQ5E,EAAGC,GACd,OAAOD,GAAKC,GAAKD,EAAEI,IAAMH,EAAEG,GAAKJ,EAAEE,IAAMD,EAAEC,IAAMF,EAAEK,GAAK,MAAQJ,EAAEI,GAAK,KAAOL,EAAEG,GAAK,MAAQF,EAAEE,GAAK,EACtG,CAED,qBAAO0E,CAAeC,GAEbA,EAAKN,aACCM,EAAKN,KAEXM,EAAKL,aACCK,EAAKL,KAEXK,EAAKJ,aACCI,EAAKJ,KAEXI,EAAKH,aACCG,EAAKH,IAEnB,CAED,4BAAOI,CAAsB/E,EAAGC,GAC5B,GAAiB,iBAAND,GAA+B,iBAANC,EAEpC,IAAK,IAAI+D,KAAOhE,EAAG,CACf,IAAIsD,EAAMtD,EAAEgE,GACZ,GAAe,MAAXA,EAAI,IAAcV,IAAQrD,EAAE+D,UACrBhE,EAAEgE,QAER,GAAIV,GAAsB,iBAARA,QAA+BxE,IAAXmB,EAAE+D,GAAoB,CAC7D,IAAK,IAAIgB,KAAK1B,EACNA,EAAI0B,KAAO/E,EAAE+D,GAAKgB,IAAe,MAATA,EAAE,WACnB1B,EAAI0B,GAGdZ,OAAOC,KAAKf,GAAKlE,eACXY,EAAEgE,EAEhB,CACJ,CACJ,CAED,4BAAOiB,CAAsBtF,EAAGuF,GAAW,GACvC,IAAK,IAAIlB,KAAOrE,EACG,MAAXqE,EAAI,IAAyB,OAAXrE,EAAEqE,SAA4BlF,IAAXa,EAAEqE,WAChCrE,EAAEqE,UAEVrE,EAAEC,KACLsF,UACOvF,EAAEX,GAERW,EAAEwF,qBACIxF,EAAEwF,aACRxF,EAAEyF,iBACIzF,EAAEyF,SACRzF,EAAE0F,eACI1F,EAAE0F,OACR1F,EAAE2F,eACI3F,EAAE2F,OACD,IAAR3F,EAAEU,GAAWV,EAAEU,IAAMV,EAAE6E,aAChB7E,EAAEU,EACD,IAARV,EAAEQ,GAAWR,EAAEQ,IAAMR,EAAE8E,aAChB9E,EAAEQ,CAChB,CAUD,eAAOoF,CAASC,EAAMC,GAClB,IAAIC,GAAY,EAChB,MAAO,IAAIC,KACFD,IACDA,GAAY,EACZE,YAAW,KAAQJ,KAAQG,GAAOD,GAAY,CAAK,GAAKD,GAC3D,CAER,CACD,8BAAOI,CAAwB7G,GAC3B,IAAI0C,EAAQ1C,EAAG0C,MACXA,EAAMoE,UACNpE,EAAMqE,eAAe,YAErBrE,EAAMsE,MACNtE,EAAMqE,eAAe,QAErBrE,EAAMuE,KACNvE,EAAMqE,eAAe,OAErBrE,EAAMwE,OACNxE,EAAMqE,eAAe,SAErBrE,EAAMyE,QACNzE,EAAMqE,eAAe,SAE5B,CAED,uBAAOK,CAAiBpH,GACpB,IAAKA,EACD,OAAOJ,SAASyH,kBAAoBzH,SAAS0H,gBACjD,MAAM5E,EAAQ6E,iBAAiBvH,GAE/B,MADsB,gBACJwH,KAAK9E,EAAM+E,SAAW/E,EAAMgF,WACnC1H,EAGAkF,KAAKkC,iBAAiBpH,EAAG2H,cAEvC,CAED,2BAAOC,CAAqB5H,EAAI8G,EAAUe,GAEtC,IAAIC,EAAO9H,EAAG+H,wBACVC,EAA6BC,OAAOC,aAAetI,SAAS0H,gBAAgBa,aAChF,GAAIL,EAAKb,IAAM,GACXa,EAAKM,OAASJ,EAA2B,CAIzC,IAAIK,EAAiBP,EAAKM,OAASJ,EAC/BM,EAAeR,EAAKb,IACpBsB,EAAWrD,KAAKkC,iBAAiBpH,GACrC,GAAiB,OAAbuI,EAAmB,CACnB,IAAIC,EAAaD,EAASE,UACtBX,EAAKb,IAAM,GAAKY,EAAW,EAEvB7H,EAAG0I,aAAeV,EAClBO,EAASE,WAAaZ,EAGtBU,EAASE,WAAatG,KAAKwG,IAAIL,GAAgBnG,KAAKwG,IAAId,GAAYA,EAAWS,EAG9ET,EAAW,IAEZ7H,EAAG0I,aAAeV,EAClBO,EAASE,WAAaZ,EAGtBU,EAASE,WAAaJ,EAAiBR,EAAWA,EAAWQ,GAIrEvB,EAASG,KAAOsB,EAASE,UAAYD,CACxC,CACJ,CACJ,CAQD,yBAAOI,CAAmBC,EAAO7I,EAAI6H,GACjC,MAAMU,EAAWrD,KAAKkC,iBAAiBpH,GACjCmH,EAASoB,EAASJ,aAKlBW,EAAaP,IAAarD,KAAKkC,mBAAsB,EAAImB,EAASR,wBAAwBd,IAC1F8B,EAAcF,EAAMG,QAAUF,EAE9BV,EAASW,EAAc5B,EAASU,EAD1BkB,EAAclB,EAKtBU,EAASU,SAAS,CAAEC,SAAU,SAAUjC,IAAK8B,EAAclB,IAEtDO,GACLG,EAASU,SAAS,CAAEC,SAAU,SAAUjC,IAAKY,GAAYV,EAAS4B,IAEzE,CAED,YAAOI,CAAMC,GACT,OAAIA,SAAsD,iBAAT,EACtCA,EAGPA,aAAe/I,MAER,IAAI+I,GAER,IAAKA,EACf,CAKD,gBAAOC,CAAUD,GAEb,MAAME,EAAa,CAAC,aAAc,KAAM,OAAQ,UAAW,UAErDC,EAAM/J,EAAM2J,MAAMC,GACxB,IAAK,MAAMpE,KAAOuE,EAEVA,EAAItE,eAAeD,IAA8B,iBAAduE,EAAIvE,IAA8C,OAAxBA,EAAIxE,UAAU,EAAG,KAAgB8I,EAAWjH,MAAKmH,GAAKA,IAAMxE,MACzHuE,EAAIvE,GAAOxF,EAAM6J,UAAUD,EAAIpE,KAGvC,OAAOuE,CACV,CAED,gBAAOE,CAAUzJ,GACb,MAAM8F,EAAO9F,EAAGyJ,WAAU,GAE1B,OADA3D,EAAK4D,gBAAgB,MACd5D,CACV,CACD,eAAO6D,CAAS3J,EAAIwC,GAChB,IAAIe,EAEAA,EADkB,iBAAXf,EACMhD,EAAMe,WAAWiC,GAGjBA,EAEbe,GACAA,EAAWP,YAAYhD,EAE9B,CAMD,kBAAO4J,CAAY5J,EAAI6J,GACnB,GAAIA,aAAkBzE,OAClB,IAAK,MAAM0E,KAAKD,EACRA,EAAO5E,eAAe6E,KAClBzJ,MAAM0J,QAAQF,EAAOC,IAErBD,EAAOC,GAAGhF,SAAQR,IACdtE,EAAG0C,MAAMoH,GAAKxF,CAAG,IAIrBtE,EAAG0C,MAAMoH,GAAKD,EAAOC,GAKxC,CACD,gBAAOE,CAAUC,EAAGC,GAChB,MAAMC,EAAM,CAAEC,KAAMF,EAAKE,MACnBhB,EAAM,CACRiB,OAAQ,EACRC,MAAO,EACPC,QAAS,EACTC,SAAS,EACTC,YAAY,EACZ7F,OAAQsF,EAAKtF,OAASsF,EAAKtF,OAASqF,EAAErF,QAQ1C,OALIqF,EAAES,eACFP,EAAkB,aAAIF,EAAES,cAE5B,CAAC,SAAU,UAAW,UAAW,YAAY5F,SAAQ6F,GAAKR,EAAIQ,GAAKV,EAAEU,KACrE,CAAC,QAAS,QAAS,UAAW,UAAW,UAAW,WAAW7F,SAAQ6F,GAAKR,EAAIQ,GAAKV,EAAEU,KAChF,IAAKR,KAAQf,EACvB,CAED,yBAAOwB,CAAmBX,EAAGY,EAAejG,GACxC,MAAMkG,EAAiBlL,SAASmL,YAAY,eAC5CD,EAAeE,eAAeH,GAC9B,GACA,EACA5C,OACA,EACAgC,EAAEgB,QACFhB,EAAEiB,QACFjB,EAAEkB,QACFlB,EAAEjB,QACFiB,EAAEmB,QACFnB,EAAEoB,OACFpB,EAAEqB,SACFrB,EAAEsB,QACF,EACAtB,EAAErF,SAEDA,GAAUqF,EAAErF,QAAQ4G,cAAcV,EACtC,ECliBL,MAAMW,EACF,WAAAC,CAAY5K,EAAO,IACfoE,KAAKyG,WAAa,GAClBzG,KAAK0G,aAAe,GACpB1G,KAAKlD,OAASlB,EAAKkB,QAAU,GAC7BkD,KAAK2G,OAAS/K,EAAK+K,OACnB3G,KAAK4G,OAAShL,EAAKiL,MACnB7G,KAAKpD,MAAQhB,EAAKgB,OAAS,GAC3BoD,KAAK8G,SAAWlL,EAAKkL,QACxB,CACD,WAAAC,CAAYC,GAAO,EAAMC,GAAS,GAC9B,QAAMjH,KAAKkH,YAAcF,IAEzBhH,KAAKkH,UAAYF,EACbA,GACAhH,KAAKmH,WAAanH,KAAK4G,OACvB5G,KAAK4G,QAAS,EACd5G,KAAKoH,aACLpH,KAAKqH,gBAGLrH,KAAK4G,OAAS5G,KAAKmH,kBACZnH,KAAKmH,WACRF,GACAjH,KAAKsH,aACTtH,KAAKuH,YAbEvH,IAgBd,CAED,iBAAAwH,CAAkB5G,EAAM6G,GACpB,QAASzH,KAAK6G,OAAS7G,KAAKkH,YAAclH,KAAKmH,cAAgBnH,KAAK0H,cAAgB9G,EAAK+G,SAAW/G,EAAKgH,WAAaH,EAAGzL,GAAK4E,EAAK5E,EACtI,CAGD,cAAA6L,CAAejH,EAAM6G,EAAK7G,EAAMkH,EAASC,EAAM,IAG3C,GAFA/H,KAAKgI,WAAW,KAChBF,EAAUA,GAAW9H,KAAK8H,QAAQlH,EAAM6G,IAEpC,OAAO,EAEX,GAAI7G,EAAK+G,UAAYI,EAAIE,SAAWjI,KAAK6G,OACjC7G,KAAKkI,KAAKtH,EAAMkH,GAChB,OAAO,EAGf,IAAIpL,EAAO+K,EACPzH,KAAKwH,kBAAkB5G,EAAM6G,KAC7B/K,EAAO,CAAER,EAAG,EAAGC,EAAG6D,KAAKlD,OAAQd,EAAGyL,EAAGzL,EAAGC,EAAGwL,EAAGxL,GAC9C6L,EAAU9H,KAAK8H,QAAQlH,EAAMlE,EAAMqL,EAAII,OAE3C,IAAIC,GAAU,EACVC,EAAS,CAAEJ,QAAQ,EAAMK,MAAM,GACnC,KAAOR,EAAUA,GAAW9H,KAAK8H,QAAQlH,EAAMlE,EAAMqL,EAAII,OAAO,CAC5D,IAAII,EAuBJ,GApBIT,EAAQ1G,QAAUR,EAAK+G,UAAY/G,EAAKgH,WAAaH,EAAGzL,EAAI4E,EAAK5E,IAAMgE,KAAK6G,SAE1E7G,KAAK8H,QAAQA,EAAS,IAAKA,EAAS9L,EAAG4E,EAAK5E,GAAK4E,KAAUZ,KAAK8H,QAAQA,EAAS,IAAKA,EAAS9L,EAAGyL,EAAGzL,EAAI8L,EAAQ7L,GAAK2E,KACxHA,EAAKgH,UAAahH,EAAKgH,WAAaH,EAAGzL,EAAI4E,EAAK5E,EAChDuM,EAAQvI,KAAKwI,SAAS5H,EAAM,IAAK6G,EAAIzL,EAAG8L,EAAQ9L,EAAI8L,EAAQ7L,KAAMoM,IAC9DP,EAAQ1G,QAAUmH,EAClBjO,EAAM8F,QAAQqH,EAAI7G,IAEZkH,EAAQ1G,QAAUmH,GAASR,EAAIO,OAErCtI,KAAKsH,aACLG,EAAGzL,EAAI8L,EAAQ9L,EAAI8L,EAAQ7L,EAC3B3B,EAAM8F,QAAQQ,EAAM6G,IAExBW,EAAUA,GAAWG,GAIrBA,EAAQvI,KAAKwI,SAASV,EAAS,IAAKA,EAAS9L,EAAGyL,EAAGzL,EAAIyL,EAAGxL,EAAGkM,KAAMvH,KAASyH,KAE3EE,EACD,OAAOH,EAEXN,OAAUlN,CACb,CACD,OAAOwN,CACV,CAED,OAAAN,CAAQK,EAAMzL,EAAOyL,EAAMM,GACvB,MAAMC,EAASP,EAAKQ,IACdC,EAAUH,GAAOE,IACvB,OAAO3I,KAAKpD,MAAMO,MAAK1B,GAAKA,EAAEkN,MAAQD,GAAUjN,EAAEkN,MAAQC,GAAWtO,EAAMuB,cAAcJ,EAAGiB,IAC/F,CACD,UAAAmM,CAAWV,EAAMzL,EAAOyL,EAAMM,GAC1B,MAAMC,EAASP,EAAKQ,IACdC,EAAUH,GAAOE,IACvB,OAAO3I,KAAKpD,MAAMkM,QAAOrN,GAAKA,EAAEkN,MAAQD,GAAUjN,EAAEkN,MAAQC,GAAWtO,EAAMuB,cAAcJ,EAAGiB,IACjG,CAED,wBAAAqM,CAAyBnI,EAAMoI,EAAGC,GAC9B,IAAKD,EAAEpG,OAAShC,EAAKsI,MACjB,OACJ,IAiBIpB,EAjBAqB,EAAKvI,EAAKsI,MACVE,EAAI,IAAKJ,EAAEpG,MAEXwG,EAAEpN,EAAImN,EAAGnN,GACToN,EAAEnN,GAAKmN,EAAEpN,EAAImN,EAAGnN,EAChBoN,EAAEpN,EAAImN,EAAGnN,GAGToN,EAAEnN,GAAKkN,EAAGnN,EAAIoN,EAAEpN,EAEhBoN,EAAElN,EAAIiN,EAAGjN,GACTkN,EAAEjN,GAAKiN,EAAElN,EAAIiN,EAAGjN,EAChBkN,EAAElN,EAAIiN,EAAGjN,GAGTkN,EAAEjN,GAAKgN,EAAGjN,EAAIkN,EAAElN,EAGpB,IAAImN,EAAU,GA2Bd,OA1BAJ,EAASrJ,SAAQnE,IACb,GAAIA,EAAE2F,SAAW3F,EAAEyN,MACf,OACJ,IAAII,EAAK7N,EAAEyN,MACPK,EAAQrK,OAAOsK,UAAWC,EAAQvK,OAAOsK,UAGzCL,EAAGnN,EAAIsN,EAAGtN,EACVuN,GAAUH,EAAEpN,EAAIoN,EAAEnN,EAAKqN,EAAGtN,GAAKsN,EAAGrN,EAE7BkN,EAAGnN,EAAImN,EAAGlN,EAAIqN,EAAGtN,EAAIsN,EAAGrN,IAC7BsN,GAAUD,EAAGtN,EAAIsN,EAAGrN,EAAKmN,EAAEpN,GAAKsN,EAAGrN,GAEnCkN,EAAGjN,EAAIoN,EAAGpN,EACVuN,GAAUL,EAAElN,EAAIkN,EAAEjN,EAAKmN,EAAGpN,GAAKoN,EAAGnN,EAE7BgN,EAAGjN,EAAIiN,EAAGhN,EAAImN,EAAGpN,EAAIoN,EAAGnN,IAC7BsN,GAAUH,EAAGpN,EAAIoN,EAAGnN,EAAKiN,EAAElN,GAAKoN,EAAGnN,GAEvC,IAAIuN,EAAOzM,KAAK0M,IAAIF,EAAOF,GACvBG,EAAOL,IACPA,EAAUK,EACV5B,EAAUrM,EACb,IAELuN,EAAElB,QAAUA,EACLA,CACV,CAkBD,UAAA8B,CAAWzN,EAAGF,EAAG8F,EAAK8H,EAAO3G,EAAQpB,GAOjC,OANA9B,KAAKpD,MAAMgD,SAAQnE,GAAKA,EAAEyN,MAAQ,CAC9BlN,EAAGP,EAAEO,EAAIC,EAAI8F,EACb7F,EAAGT,EAAES,EAAIC,EAAI2F,EACb3F,EAAGV,EAAEU,EAAIA,EAAI2F,EAAO+H,EACpB5N,EAAGR,EAAEQ,EAAIA,EAAI8F,EAAMmB,KAEhBlD,IACV,CAED,IAAAkI,CAAKpM,EAAGC,GACJ,IAAKA,GAAKA,EAAEqF,SAAWtF,GAAKA,EAAEsF,OAC1B,OAAO,EACX,SAAS0I,IACL,IAAI5N,EAAIH,EAAEG,EAAGF,EAAID,EAAEC,EAgBnB,OAfAD,EAAEG,EAAIJ,EAAEI,EACRH,EAAEC,EAAIF,EAAEE,EACJF,EAAEG,GAAKF,EAAEE,GACTH,EAAEI,EAAIA,EACNJ,EAAEE,EAAID,EAAEC,EAAID,EAAEE,GAETH,EAAEK,GAAKJ,EAAEI,GACdL,EAAEI,EAAIH,EAAEG,EAAIH,EAAEI,EACdL,EAAEE,EAAIA,IAGNF,EAAEI,EAAIA,EACNJ,EAAEE,EAAIA,GAEVF,EAAEiO,OAAShO,EAAEgO,QAAS,GACf,CACV,CACD,IAAIC,EAEJ,GAAIlO,EAAEK,IAAMJ,EAAEI,GAAKL,EAAEG,IAAMF,EAAEE,IAAMH,EAAEI,IAAMH,EAAEG,GAAKJ,EAAEE,IAAMD,EAAEC,KAAOgO,EAAW1P,EAAM8B,WAAWN,EAAGC,IAC9F,OAAO+N,IACX,IAAiB,IAAbE,EAAJ,CAGA,GAAIlO,EAAEK,IAAMJ,EAAEI,GAAKL,EAAEI,IAAMH,EAAEG,IAAM8N,IAAaA,EAAW1P,EAAM8B,WAAWN,EAAGC,KAAM,CACjF,GAAIA,EAAEC,EAAIF,EAAEE,EAAG,CACX,IAAIiO,EAAInO,EACRA,EAAIC,EACJA,EAAIkO,CACP,CACD,OAAOH,GACV,CACD,IAAiB,IAAbE,EAAJ,CAGA,GAAIlO,EAAEG,IAAMF,EAAEE,GAAKH,EAAEE,IAAMD,EAAEC,IAAMgO,IAAaA,EAAW1P,EAAM8B,WAAWN,EAAGC,KAAM,CACjF,GAAIA,EAAEG,EAAIJ,EAAEI,EAAG,CACX,IAAI+N,EAAInO,EACRA,EAAIC,EACJA,EAAIkO,CACP,CACD,OAAOH,GACV,CACD,OAAO,CAVI,CAXA,CAsBd,CACD,WAAAI,CAAYhO,EAAGF,EAAGG,EAAGF,GACjB,IAAIwL,EAAK,CAAEvL,EAAGA,GAAK,EAAGF,EAAGA,GAAK,EAAGG,EAAGA,GAAK,EAAGF,EAAGA,GAAK,GACpD,OAAQ+D,KAAK8H,QAAQL,EACxB,CAED,OAAA0C,CAAQC,EAAS,UAAWC,GAAS,GACjC,GAA0B,IAAtBrK,KAAKpD,MAAM1B,OACX,OAAO8E,KACPqK,GACArK,KAAKgI,YACT,MAAMsC,EAAWtK,KAAKkH,UACjBoD,GACDtK,KAAK+G,cACT,MAAMwD,EAAkBvK,KAAKwK,gBACxBD,IACDvK,KAAKwK,iBAAkB,GAC3B,IAAIC,EAAYzK,KAAKpD,MAerB,OAdAoD,KAAKpD,MAAQ,GACb6N,EAAU7K,SAAQ,CAACnE,EAAGiP,EAAO1P,KACzB,IAAI2P,EACClP,EAAE2F,SACH3F,EAAEwF,cAAe,EACF,SAAXmJ,GAAqBM,IACrBC,EAAQ3P,EAAK0P,EAAQ,KAE7B1K,KAAK4K,QAAQnP,GAAG,EAAOkP,EAAM,IAE5BJ,UACMvK,KAAKwK,gBACXF,GACDtK,KAAK+G,aAAY,GACd/G,IACV,CAED,SAAI6G,CAAMzH,GACFY,KAAK4G,SAAWxH,IAEpBY,KAAK4G,OAASxH,IAAO,EAChBA,GACDY,KAAKsH,aAAaC,UAEzB,CAED,SAAIV,GAAU,OAAO7G,KAAK4G,SAAU,CAAQ,CAE5C,SAAAoB,CAAUnL,EAAM,EAAGC,EAASkD,KAAKlD,QAE7B,OADAkD,KAAKpD,MAAQtC,EAAMqC,KAAKqD,KAAKpD,MAAOC,EAAKC,GAClCkD,IACV,CAED,UAAAsH,GACI,OAAItH,KAAKkH,YAGTlH,KAAKgI,YACDhI,KAAK6G,MAEL7G,KAAKpD,MAAMgD,SAAQnE,IACf,GAAIA,EAAEoP,gBAAyBjQ,IAAZa,EAAEqP,OAAuBrP,EAAEO,IAAMP,EAAEqP,MAAM9O,EACxD,OACJ,IAAI+O,EAAOtP,EAAEO,EACb,KAAO+O,EAAOtP,EAAEqP,MAAM9O,GAAG,GACnB+O,EACY/K,KAAK8H,QAAQrM,EAAG,CAAES,EAAGT,EAAES,EAAGF,EAAG+O,EAAM5O,EAAGV,EAAEU,EAAGF,EAAGR,EAAEQ,MAE1DR,EAAEsO,QAAS,EACXtO,EAAEO,EAAI+O,EAEb,KAKL/K,KAAKpD,MAAMgD,SAAQ,CAACnE,EAAGqF,KACnB,IAAIrF,EAAE2F,OAEN,KAAO3F,EAAEO,EAAI,GAAG,CACZ,IAAI+O,EAAa,IAANjK,EAAU,EAAIrF,EAAEO,EAAI,EAE/B,KADuB,IAAN8E,IAAYd,KAAK8H,QAAQrM,EAAG,CAAES,EAAGT,EAAES,EAAGF,EAAG+O,EAAM5O,EAAGV,EAAEU,EAAGF,EAAGR,EAAEQ,KAEzE,MAIJR,EAAEsO,OAAUtO,EAAEO,IAAM+O,EACpBtP,EAAEO,EAAI+O,CACT,MAlCE/K,IAsCd,CAMD,WAAAgL,CAAYpK,EAAMqK,GACdrK,EAAK+H,IAAM/H,EAAK+H,KAAOpC,EAAgB2E,cAExBtQ,IAAXgG,EAAK1E,QAA8BtB,IAAXgG,EAAK5E,GAA8B,OAAX4E,EAAK1E,GAAyB,OAAX0E,EAAK5E,IACxE4E,EAAKK,cAAe,GAGxB,IAAIxB,EAAW,CAAEvD,EAAG,EAAGF,EAAG,EAAGG,EAAG,EAAGF,EAAG,GAwCtC,OAvCA3B,EAAMmF,SAASmB,EAAMnB,GAChBmB,EAAKK,qBACCL,EAAKK,aAEXL,EAAKM,iBACCN,EAAKM,SAEXN,EAAKO,eACCP,EAAKO,OAEhB7G,EAAMqG,eAAeC,GAEA,iBAAVA,EAAK1E,IACZ0E,EAAK1E,EAAIgD,OAAO0B,EAAK1E,IAEJ,iBAAV0E,EAAK5E,IACZ4E,EAAK5E,EAAIkD,OAAO0B,EAAK5E,IAEJ,iBAAV4E,EAAKzE,IACZyE,EAAKzE,EAAI+C,OAAO0B,EAAKzE,IAEJ,iBAAVyE,EAAK3E,IACZ2E,EAAK3E,EAAIiD,OAAO0B,EAAK3E,IAErBpB,MAAM+F,EAAK1E,KACX0E,EAAK1E,EAAIuD,EAASvD,EAClB0E,EAAKK,cAAe,GAEpBpG,MAAM+F,EAAK5E,KACX4E,EAAK5E,EAAIyD,EAASzD,EAClB4E,EAAKK,cAAe,GAEpBpG,MAAM+F,EAAKzE,KACXyE,EAAKzE,EAAIsD,EAAStD,GAElBtB,MAAM+F,EAAK3E,KACX2E,EAAK3E,EAAIwD,EAASxD,GAEtB+D,KAAKmL,aAAavK,EAAMqK,GACjBrK,CACV,CAED,YAAAuK,CAAavK,EAAMqK,GACf,IAAIG,EAASxK,EAAKkK,OAASxQ,EAAM8F,QAAQ,CAAA,EAAIQ,GACzCA,EAAKJ,OACLI,EAAKzE,EAAIc,KAAK0M,IAAI/I,EAAKzE,EAAGyE,EAAKJ,OAE/BI,EAAKH,OACLG,EAAK3E,EAAIgB,KAAK0M,IAAI/I,EAAK3E,EAAG2E,EAAKH,OAE/BG,EAAKN,MAAQM,EAAKN,MAAQN,KAAKlD,SAC/B8D,EAAKzE,EAAIc,KAAKC,IAAI0D,EAAKzE,EAAGyE,EAAKN,OAE/BM,EAAKL,OACLK,EAAK3E,EAAIgB,KAAKC,IAAI0D,EAAK3E,EAAG2E,EAAKL,OAMnC,IADkBK,EAAK1E,GAAK,IAAM0E,EAAKzE,GAAK,GAAK6D,KAAKlD,QACtCkD,KAAKlD,OAAS,KAAOkD,KAAKwK,iBAAmB5J,EAAK+H,MAA2C,IAApC3I,KAAKqL,gBAAgBzK,EAAM,IAAY,CAC5G,IAAI0K,EAAO,IAAK1K,GACZ0K,EAAKrK,mBAA2BrG,IAAX0Q,EAAKpP,UACnBoP,EAAKpP,SACLoP,EAAKtP,GAGZsP,EAAKpP,EAAIe,KAAK0M,IAAI,GAAI2B,EAAKpP,GAC/BoP,EAAKnP,EAAIc,KAAK0M,IAAI,GAAI2B,EAAKnP,GAAK,GAChC6D,KAAKuL,eAAeD,EAAM,GAC7B,CAsCD,OArCI1K,EAAKzE,EAAI6D,KAAKlD,OACd8D,EAAKzE,EAAI6D,KAAKlD,OAET8D,EAAKzE,EAAI,IACdyE,EAAKzE,EAAI,GAET6D,KAAK2G,QAAU/F,EAAK3E,EAAI+D,KAAK2G,OAC7B/F,EAAK3E,EAAI+D,KAAK2G,OAET/F,EAAK3E,EAAI,IACd2E,EAAK3E,EAAI,GAET2E,EAAK1E,EAAI,IACT0E,EAAK1E,EAAI,GAET0E,EAAK5E,EAAI,IACT4E,EAAK5E,EAAI,GAET4E,EAAK1E,EAAI0E,EAAKzE,EAAI6D,KAAKlD,SACnBmO,EACArK,EAAKzE,EAAI6D,KAAKlD,OAAS8D,EAAK1E,EAG5B0E,EAAK1E,EAAI8D,KAAKlD,OAAS8D,EAAKzE,GAGhC6D,KAAK2G,QAAU/F,EAAK5E,EAAI4E,EAAK3E,EAAI+D,KAAK2G,SAClCsE,EACArK,EAAK3E,EAAI+D,KAAK2G,OAAS/F,EAAK5E,EAG5B4E,EAAK5E,EAAIgE,KAAK2G,OAAS/F,EAAK3E,GAG/B3B,EAAMoG,QAAQE,EAAMwK,KACrBxK,EAAKmJ,QAAS,GAEX/J,IACV,CAED,aAAAwL,CAAcC,GAEV,OAAIA,EACOzL,KAAKpD,MAAMkM,QAAOrN,GAAKA,EAAEsO,SAAWzP,EAAMoG,QAAQjF,EAAGA,EAAEqP,SAE3D9K,KAAKpD,MAAMkM,QAAOrN,GAAKA,EAAEsO,QACnC,CAED,OAAAxC,CAAQb,GACJ,GAAI1G,KAAKkH,YAAclH,KAAK8G,SACxB,OAAO9G,KACX,IAAI0L,GAAchF,GAAgB,IAAIiF,OAAO3L,KAAKwL,iBAElD,OADAxL,KAAK8G,SAAS4E,GACP1L,IACV,CAED,UAAAoH,GACI,OAAIpH,KAAKkH,WAETlH,KAAKpD,MAAMgD,SAAQnE,WACRA,EAAEsO,cACFtO,EAAEmQ,UAAU,IAHZ5L,IAMd,CAID,WAAAqH,GAMI,OALArH,KAAKpD,MAAMgD,SAAQnE,IACfA,EAAEqP,MAAQxQ,EAAM8F,QAAQ,CAAE,EAAE3E,UACrBA,EAAEsO,MAAM,IAEnB/J,KAAK0H,WAAa1H,KAAKpD,MAAMiP,MAAKpQ,GAAKA,EAAE2F,SAClCpB,IACV,CAED,cAAA8L,GAQI,OAPA9L,KAAKpD,MAAMgD,SAAQnE,IACXnB,EAAMoG,QAAQjF,EAAGA,EAAEqP,SAEvBxQ,EAAM8F,QAAQ3E,EAAGA,EAAEqP,OACnBrP,EAAEsO,QAAS,EAAI,IAEnB/J,KAAKuH,UACEvH,IACV,CAKD,iBAAA+L,CAAkBnL,EAAMoL,EAAWhM,KAAKpD,MAAOE,EAASkD,KAAKlD,OAAQ6N,GACjE,IACIsB,GAAQ,EACZ,IAAK,IAAInL,EAFG6J,EAAQA,EAAM3O,EAAIc,GAAU6N,EAAMzO,EAAIyO,EAAMxO,GAAK,GAExC8P,IAASnL,EAAG,CAC7B,IAAI5E,EAAI4E,EAAIhE,EACRd,EAAIiB,KAAKiP,MAAMpL,EAAIhE,GACvB,GAAIZ,EAAI0E,EAAKzE,EAAIW,EACb,SAEJ,IAAIqP,EAAM,CAAEjQ,IAAGF,IAAGG,EAAGyE,EAAKzE,EAAGF,EAAG2E,EAAK3E,GAChC+P,EAAS7O,MAAK1B,GAAKnB,EAAMuB,cAAcsQ,EAAK1Q,OACzCmF,EAAK1E,IAAMA,GAAK0E,EAAK5E,IAAMA,IAC3B4E,EAAKmJ,QAAS,GAClBnJ,EAAK1E,EAAIA,EACT0E,EAAK5E,EAAIA,SACF4E,EAAKK,aACZgL,GAAQ,EAEf,CACD,OAAOA,CACV,CAED,OAAArB,CAAQhK,EAAMwL,GAAkB,EAAOzB,GACnC,IAOI0B,EAPAC,EAAMtM,KAAKpD,MAAMO,MAAK1B,GAAKA,EAAEkN,MAAQ/H,EAAK+H,MAC9C,OAAI2D,IAGJtM,KAAKwK,gBAAkBxK,KAAKmL,aAAavK,GAAQZ,KAAKgL,YAAYpK,UAC3DA,EAAK2L,yBACL3L,EAAK4L,WAER5L,EAAKK,cAAgBjB,KAAK+L,kBAAkBnL,EAAMZ,KAAKpD,MAAOoD,KAAKlD,OAAQ6N,YACpE/J,EAAKK,aACZoL,GAAgB,GAEpBrM,KAAKpD,MAAM6P,KAAK7L,GACZwL,GACApM,KAAKyG,WAAWgG,KAAK7L,GAEpByL,GACDrM,KAAK6H,eAAejH,GACnBZ,KAAKkH,WACNlH,KAAKsH,aAAaC,UAEf3G,EACV,CACD,UAAA8L,CAAW9L,EAAM+L,GAAY,EAAMC,GAAe,GAC9C,OAAK5M,KAAKpD,MAAMO,MAAK1B,GAAKA,EAAEkN,MAAQ/H,EAAK+H,OAIrCiE,GACA5M,KAAK0G,aAAa+F,KAAK7L,GAEvB+L,IACA/L,EAAK4L,YAAa,GAEtBxM,KAAKpD,MAAQoD,KAAKpD,MAAMkM,QAAOrN,GAAKA,EAAEkN,MAAQ/H,EAAK+H,MAC9C/H,EAAKiM,kBACN7M,KAAKsH,aACTtH,KAAKuH,QAAQ,CAAC3G,IACPZ,MAZIA,IAad,CACD,SAAA8M,CAAUH,GAAY,GAElB,cADO3M,KAAK+M,SACP/M,KAAKpD,MAAM1B,QAEhByR,GAAa3M,KAAKpD,MAAMgD,SAAQnE,GAAKA,EAAE+Q,YAAa,IACpDxM,KAAK0G,aAAe1G,KAAKpD,MACzBoD,KAAKpD,MAAQ,GACNoD,KAAKuH,QAAQvH,KAAK0G,eAJd1G,IAKd,CAID,aAAAgN,CAAcpM,EAAMoI,GAEhB,IAAKhJ,KAAKiN,oBAAoBrM,EAAMoI,GAChC,OAAO,EAGX,GAFAA,EAAEV,MAAO,GAEJtI,KAAK2G,OACN,OAAO3G,KAAKwI,SAAS5H,EAAMoI,GAG/B,IAAIkE,EACAjJ,EAAQ,IAAIsC,EAAgB,CAC5BzJ,OAAQkD,KAAKlD,OACb+J,MAAO7G,KAAK6G,MACZjK,MAAOoD,KAAKpD,MAAMuQ,KAAI1R,GACdA,EAAEkN,MAAQ/H,EAAK+H,KACfuE,EAAa,IAAKzR,GACXyR,GAEJ,IAAKzR,OAGpB,IAAKyR,EACD,OAAO,EAGX,IAAIE,EAAUnJ,EAAMuE,SAAS0E,EAAYlE,IAAM/E,EAAMoJ,UAAYpQ,KAAKC,IAAI8C,KAAKqN,SAAUrN,KAAK2G,QAE9F,IAAKyG,IAAYpE,EAAEiC,UAAYjC,EAAElB,QAAS,CACtC,IAAIA,EAAUkB,EAAElB,QAAQhN,GAAGwS,cAC3B,GAAItN,KAAKkI,KAAKtH,EAAMkH,GAEhB,OADA9H,KAAKuH,WACE,CAEd,CACD,QAAK6F,IAILnJ,EAAMrH,MAAMkM,QAAOrN,GAAKA,EAAEsO,SAAQnK,SAAQ2N,IACtC,IAAI9R,EAAIuE,KAAKpD,MAAMO,MAAKrB,GAAKA,EAAE6M,MAAQ4E,EAAE5E,MACpClN,IAELnB,EAAM8F,QAAQ3E,EAAG8R,GACjB9R,EAAEsO,QAAS,EAAI,IAEnB/J,KAAKuH,WACE,EACV,CAED,SAAAiG,CAAU5M,GAEN,UADOA,EAAK6M,aACPzN,KAAK2G,OACN,OAAO,EAEX,IAAI1C,EAAQ,IAAIsC,EAAgB,CAC5BzJ,OAAQkD,KAAKlD,OACb+J,MAAO7G,KAAK6G,MACZjK,MAAOoD,KAAKpD,MAAMuQ,KAAI1R,IAAc,IAAKA,QAEzCA,EAAI,IAAKmF,GAOb,OANAZ,KAAK0N,YAAYjS,UACVA,EAAEX,UACFW,EAAEkN,WACFlN,EAAEkS,eACFlS,EAAEC,KACTuI,EAAM2G,QAAQnP,GACVwI,EAAMoJ,UAAYrN,KAAK2G,SACvB/F,EAAK6M,YAAcnT,EAAM8F,QAAQ,CAAE,EAAE3E,IAC9B,EAGd,CAED,mBAAAwR,CAAoBrM,EAAM6E,GAItB,OAFAA,EAAEtJ,EAAIsJ,EAAEtJ,GAAKyE,EAAKzE,EAClBsJ,EAAExJ,EAAIwJ,EAAExJ,GAAK2E,EAAK3E,EACd2E,EAAK1E,IAAMuJ,EAAEvJ,GAAK0E,EAAK5E,IAAMyJ,EAAEzJ,IAG/B4E,EAAKJ,OACLiF,EAAEtJ,EAAIc,KAAK0M,IAAIlE,EAAEtJ,EAAGyE,EAAKJ,OAEzBI,EAAKH,OACLgF,EAAExJ,EAAIgB,KAAK0M,IAAIlE,EAAExJ,EAAG2E,EAAKH,OAEzBG,EAAKN,OACLmF,EAAEtJ,EAAIc,KAAKC,IAAIuI,EAAEtJ,EAAGyE,EAAKN,OAEzBM,EAAKL,OACLkF,EAAExJ,EAAIgB,KAAKC,IAAIuI,EAAExJ,EAAG2E,EAAKL,OAErBK,EAAKzE,IAAMsJ,EAAEtJ,GAAKyE,EAAK3E,IAAMwJ,EAAExJ,EAC1C,CAED,QAAAuM,CAAS5H,EAAMoI,GACX,IAAKpI,IAA4BoI,EAC7B,OAAO,EACX,IAAI4E,OACWhT,IAAXoO,EAAEV,MAAuBtI,KAAKkH,YAC9B0G,EAAmB5E,EAAEV,MAAO,GAGb,iBAARU,EAAE9M,IACT8M,EAAE9M,EAAI0E,EAAK1E,GAEI,iBAAR8M,EAAEhN,IACTgN,EAAEhN,EAAI4E,EAAK5E,GAEI,iBAARgN,EAAE7M,IACT6M,EAAE7M,EAAIyE,EAAKzE,GAEI,iBAAR6M,EAAE/M,IACT+M,EAAE/M,EAAI2E,EAAK3E,GAEf,IAAIgP,EAAYrK,EAAKzE,IAAM6M,EAAE7M,GAAKyE,EAAK3E,IAAM+M,EAAE/M,EAC3CwL,EAAKnN,EAAM8F,QAAQ,CAAA,EAAIQ,GAAM,GAIjC,GAHAtG,EAAM8F,QAAQqH,EAAIuB,GAClBhJ,KAAKmL,aAAa1D,EAAIwD,GACtB3Q,EAAM8F,QAAQ4I,EAAGvB,IACZuB,EAAE6E,cAAgBvT,EAAMoG,QAAQE,EAAMoI,GACvC,OAAO,EACX,IAAI8E,EAAUxT,EAAM8F,QAAQ,CAAE,EAAEQ,GAE5BqI,EAAWjJ,KAAK6I,WAAWjI,EAAM6G,EAAIuB,EAAEb,MACvC4F,GAAa,EACjB,GAAI9E,EAAS/N,OAAQ,CACjB,IAAI8S,EAAapN,EAAK+G,UAAYqB,EAAEf,OAEhCH,EAAUkG,EAAahO,KAAK+I,yBAAyBnI,EAAMoI,EAAGC,GAAYA,EAAS,GAEvF,GAAI+E,GAAclG,GAAWlH,EAAKlF,MAAME,MAAMqS,iBAAmBrN,EAAKlF,KAAKwS,QAAS,CAChF,IAAIxE,EAAOpP,EAAM+B,cAAc2M,EAAEpG,KAAMkF,EAAQoB,OAC3CiF,EAAK7T,EAAMoC,KAAKsM,EAAEpG,MAClBwL,EAAK9T,EAAMoC,KAAKoL,EAAQoB,OACjBQ,GAAQyE,EAAKC,EAAKD,EAAKC,GACvB,KACPtG,EAAQpM,KAAK2S,YAAYvG,EAAQhN,QAAIF,EAAWgG,GAChDkH,OAAUlN,EAEjB,CACGkN,EACAiG,GAAc/N,KAAK6H,eAAejH,EAAM6G,EAAIK,EAASkB,IAGrD+E,GAAa,EACTH,UACO5E,EAAEV,KAEpB,CAUD,OARIyF,IACAnN,EAAKmJ,QAAS,EACdzP,EAAM8F,QAAQQ,EAAM6G,IAEpBuB,EAAEV,MACFtI,KAAKsH,aACAC,WAEDjN,EAAMoG,QAAQE,EAAMkN,EAC/B,CACD,MAAAT,GACI,OAAOrN,KAAKpD,MAAMG,QAAO,CAACuR,EAAK7S,IAAMwB,KAAKC,IAAIoR,EAAK7S,EAAEO,EAAIP,EAAEQ,IAAI,EAClE,CACD,WAAAsS,CAAY3N,GAOR,OANKA,EAAKiK,YACNjK,EAAKiK,WAAY,SACVjK,EAAKgH,UACP5H,KAAKkH,WACNlH,KAAKqH,eAENrH,IACV,CACD,SAAAwO,GACI,IAAI/S,EAAIuE,KAAKpD,MAAMO,MAAK1B,GAAKA,EAAEoP,YAK/B,OAJIpP,WACOA,EAAEoP,iBACFpP,EAAEmM,WAEN5H,IACV,CAGD,IAAAyO,CAAKC,GAAc,EAAMC,GAErB,IAAIC,EAAM5O,KAAK+M,UAAU7R,OACrBkP,EAASwE,GAAO5O,KAAKlD,SAAY8R,EAAM,EAAK5O,KAAK+M,SAAS6B,EAAM,GAAK,KACrE5T,EAAO,GAWX,OAVAgF,KAAKgI,YACLhI,KAAKpD,MAAMgD,SAAQnE,IACf,IAAIoT,EAAKzE,GAAQjN,MAAK2R,GAAKA,EAAEnG,MAAQlN,EAAEkN,MAEnCxM,EAAI,IAAKV,KAAOoT,GAAM,CAAE,GAC5BvU,EAAMyG,sBAAsB5E,GAAIuS,GAC5BC,GACAA,EAAOlT,EAAGU,GACdnB,EAAKyR,KAAKtQ,EAAE,IAETnB,CACV,CAED,kBAAA+T,CAAmBnS,GACf,OAAKoD,KAAK+M,UAAY/M,KAAKwK,iBAG3BxK,KAAK+M,SAASnN,SAAQ,CAACwK,EAAQtN,KAC3B,IAAKsN,GAAUtN,IAAWkD,KAAKlD,OAC3B,OAAOkD,KACX,GAAIlD,EAASkD,KAAKlD,OACdkD,KAAK+M,SAASjQ,QAAUlC,MAEvB,CAGD,IAAIoU,EAAQlS,EAASkD,KAAKlD,OAC1BF,EAAMgD,SAAQgB,IACV,IAAKA,EAAKkK,MACN,OACJ,IAAIrP,EAAI2O,EAAOjN,MAAK2R,GAAKA,EAAEnG,MAAQ/H,EAAK+H,MACnClN,IAIDA,EAAEO,GAAK,GAAK4E,EAAK5E,IAAM4E,EAAKkK,MAAM9O,IAClCP,EAAEO,GAAM4E,EAAK5E,EAAI4E,EAAKkK,MAAM9O,GAG5B4E,EAAK1E,IAAM0E,EAAKkK,MAAM5O,IACtBT,EAAES,EAAIe,KAAKgS,MAAMrO,EAAK1E,EAAI8S,IAG1BpO,EAAKzE,IAAMyE,EAAKkK,MAAM3O,IACtBV,EAAEU,EAAIc,KAAKgS,MAAMrO,EAAKzE,EAAI6S,IAC7B,GAGR,KAjCMhP,IAoCd,CAYD,aAAAkP,CAAcC,EAAYrS,EAAQF,EAAOwN,EAAS,aAC9C,IAAKpK,KAAKpD,MAAM1B,SAAW4B,GAAUqS,IAAerS,EAChD,OAAOkD,KAEX,MAAMoP,EAAuB,YAAXhF,GAAmC,SAAXA,EACtCgF,GACApP,KAAKgI,UAAU,EAAGmH,GAGlBrS,EAASqS,GACTnP,KAAKqP,YAAYrP,KAAKpD,MAAOuS,GACjCnP,KAAK+G,cACL,IAAIuI,EAAW,GAEXC,GAAW,EACf,GAAe,IAAXzS,GAAgBF,GAAO1B,OAAQ,CAC/BqU,GAAW,EACX,IAAIxN,EAAM,EACVnF,EAAMgD,SAAQnE,IACVA,EAAES,EAAI,EACNT,EAAEU,EAAI,EACNV,EAAEO,EAAIiB,KAAKC,IAAIzB,EAAEO,EAAG+F,GACpBA,EAAMtG,EAAEO,EAAIP,EAAEQ,CAAC,IAEnBqT,EAAW1S,EACXA,EAAQ,EACX,MAEGA,EAAQwS,EAAYpP,KAAKpD,MAAQtC,EAAMqC,KAAKqD,KAAKpD,OAAQ,EAAGuS,GAIhE,GAAIrS,EAASqS,GAAcnP,KAAK+M,SAAU,CACtC,MAAMyC,EAAaxP,KAAK+M,SAASjQ,IAAW,GAG5C,IAAI2S,EAAYzP,KAAK+M,SAAS7R,OAAS,GAClCsU,EAAWtU,QAAUiU,IAAeM,GAAazP,KAAK+M,SAAS0C,IAAYvU,SAC5EiU,EAAaM,EACbzP,KAAK+M,SAAS0C,GAAW7P,SAAQ8P,IAC7B,IAAIjU,EAAImB,EAAMO,MAAK1B,GAAKA,EAAEkN,MAAQ+G,EAAU/G,MACxClN,IAEK2T,GAAcM,EAAUzO,eACzBxF,EAAES,EAAIwT,EAAUxT,GAAKT,EAAES,EACvBT,EAAEO,EAAI0T,EAAU1T,GAAKP,EAAEO,GAE3BP,EAAEU,EAAIuT,EAAUvT,GAAKV,EAAEU,EACJvB,MAAf8U,EAAUxT,QAAkCtB,IAAhB8U,EAAU1T,IACtCP,EAAEwF,cAAe,GACxB,KAITuO,EAAW5P,SAAQ8P,IACf,IAAIC,EAAI/S,EAAMgT,WAAUnU,GAAKA,EAAEkN,MAAQ+G,EAAU/G,MACjD,IAAW,IAAPgH,EAAU,CACV,MAAMlU,EAAImB,EAAM+S,GAEhB,GAAIP,EAEA,YADA3T,EAAEU,EAAIuT,EAAUvT,IAGhBuT,EAAUzO,cAAgBpG,MAAM6U,EAAUxT,IAAMrB,MAAM6U,EAAU1T,KAChEgE,KAAK+L,kBAAkB2D,EAAWJ,GAEjCI,EAAUzO,eACXxF,EAAES,EAAIwT,EAAUxT,GAAKT,EAAES,EACvBT,EAAEO,EAAI0T,EAAU1T,GAAKP,EAAEO,EACvBP,EAAEU,EAAIuT,EAAUvT,GAAKV,EAAEU,EACvBmT,EAAS7C,KAAKhR,IAElBmB,EAAMiT,OAAOF,EAAG,EACnB,IAER,CAED,GAAIP,EACApP,KAAKmK,QAAQC,GAAQ,OAEpB,CAED,GAAIxN,EAAM1B,OACN,GAAsB,mBAAXkP,EACPA,EAAOtN,EAAQqS,EAAYG,EAAU1S,QAEpC,IAAK2S,EAAU,CAChB,IAAIP,EAASI,GAAwB,SAAXhF,EAAqB,EAAItN,EAASqS,EACxDW,EAAmB,SAAX1F,GAAgC,cAAXA,EAC7B2F,EAAoB,UAAX3F,GAAiC,cAAXA,EACnCxN,EAAMgD,SAAQgB,IAEVA,EAAK1E,EAAgB,IAAXY,EAAe,EAAKgT,EAAO7S,KAAKgS,MAAMrO,EAAK1E,EAAI8S,GAAS/R,KAAK0M,IAAI/I,EAAK1E,EAAGY,EAAS,GAC5F8D,EAAKzE,EAAiB,IAAXW,GAA+B,IAAfqS,EAAoB,EAAIY,EAAS9S,KAAKgS,MAAMrO,EAAKzE,EAAI6S,IAAU,EAAM/R,KAAK0M,IAAI/I,EAAKzE,EAAGW,GACjHwS,EAAS7C,KAAK7L,EAAK,IAEvBhE,EAAQ,EACX,CAGA2S,IACDD,EAAWhV,EAAMqC,KAAK2S,GAAW,EAAGxS,IACxCkD,KAAKwK,iBAAkB,EACvBxK,KAAKpD,MAAQ,GACb0S,EAAS1P,SAAQgB,IACbZ,KAAK4K,QAAQhK,GAAM,UACZA,EAAKkK,KAAK,GAExB,CAID,OAHA9K,KAAKpD,MAAMgD,SAAQnE,UAAYA,EAAEqP,QACjC9K,KAAK+G,aAAY,GAAQqI,UAClBpP,KAAKwK,gBACLxK,IACV,CAOD,WAAAqP,CAAYzS,EAAOE,EAAQkT,GAAQ,GAC/B,IAAI1E,EAAO,GAWX,OAVA1O,EAAMgD,SAAQ,CAACnE,EAAGqF,KAEd,QAAclG,IAAVa,EAAEkN,IAAmB,CACrB,MAAMsH,EAAWxU,EAAE2B,GAAK4C,KAAKpD,MAAMO,MAAK+S,GAAMA,EAAG9S,KAAO3B,EAAE2B,UAAMxC,EAChEa,EAAEkN,IAAMsH,GAAUtH,KAAOpC,EAAgB2E,QAC5C,CACDI,EAAKxK,GAAK,CAAE5E,EAAGT,EAAES,EAAGF,EAAGP,EAAEO,EAAGG,EAAGV,EAAEU,EAAGwM,IAAKlN,EAAEkN,IAAK,IAEpD3I,KAAK+M,SAAWiD,EAAQ,GAAKhQ,KAAK+M,UAAY,GAC9C/M,KAAK+M,SAASjQ,GAAUwO,EACjBtL,IACV,CAMD,cAAAuL,CAAe9P,EAAGqB,GACdrB,EAAEkN,IAAMlN,EAAEkN,KAAOpC,EAAgB2E,SACjC,IAAI4D,EAAI,CAAE5S,EAAGT,EAAES,EAAGF,EAAGP,EAAEO,EAAGG,EAAGV,EAAEU,EAAGwM,IAAKlN,EAAEkN,MACrClN,EAAEwF,mBAAwBrG,IAARa,EAAES,YACb4S,EAAE5S,SACF4S,EAAE9S,EACLP,EAAEwF,eACF6N,EAAE7N,cAAe,IAEzBjB,KAAK+M,SAAW/M,KAAK+M,UAAY,GACjC/M,KAAK+M,SAASjQ,GAAUkD,KAAK+M,SAASjQ,IAAW,GACjD,IAAI4N,EAAQ1K,KAAKqL,gBAAgB5P,EAAGqB,GAKpC,OAJe,IAAX4N,EACA1K,KAAK+M,SAASjQ,GAAQ2P,KAAKqC,GAE3B9O,KAAK+M,SAASjQ,GAAQ4N,GAASoE,EAC5B9O,IACV,CACD,eAAAqL,CAAgB5P,EAAGqB,GACf,OAAOkD,KAAK+M,WAAWjQ,IAAS8S,WAAUd,GAAKA,EAAEnG,MAAQlN,EAAEkN,QAAS,CACvE,CACD,yBAAAwH,CAA0B1U,GACtB,GAAKuE,KAAK+M,SAGV,IAAK,IAAIjM,EAAI,EAAGA,EAAId,KAAK+M,SAAS7R,OAAQ4F,IAAK,CAC3C,IAAI4J,EAAQ1K,KAAKqL,gBAAgB5P,EAAGqF,IACrB,IAAX4J,GACA1K,KAAK+M,SAASjM,GAAG+O,OAAOnF,EAAO,EAEtC,CACJ,CAED,WAAAgD,CAAY9M,GACR,IAAK,IAAIwP,KAAQxP,EACG,MAAZwP,EAAK,IAAuB,QAATA,UACZxP,EAAKwP,GAEpB,OAAOpQ,IACV,EAGLuG,EAAgB2E,OAAS,EC3+BlB,MAAMmF,EAAe,CACxBC,uBAAwB,SACxBC,SAAS,EACTC,MAAM,EACNC,WAAY,OACZC,mBAAoB,IACpBC,eAAgB,KAChB7T,OAAQ,GACR8T,UAAW,CAAEC,OAAQ,2BAA4BpM,SAAU,OAAQqM,QAAQ,GAC3ED,OAAQ,2BACRE,UAAW,kBACXC,OAAQ,GACRC,WAAY,KACZtK,OAAQ,EACRuK,OAAQ,EACRC,cAAe,IACfC,iBAAkB,yBAClBC,gBAAiB,GACjBC,iBAAkB,CAAEC,OAAQ,kBAAmBC,QAAS,4BACxDC,UAAW,CAAEC,QAAS,MACtBC,IAAK,QAcIC,EAAuB,CAChCf,OAAQ,2BACRpM,SAAU,QClCP,MAAMoN,GCGN,MAAMC,EAA4B,oBAAX/O,QAA8C,oBAAbrI,WAC1D,iBAAkBA,UACZ,iBAAkBqI,QAGjBA,OAAOgP,eAAiBrX,oBAAoBqI,OAAOgP,eACpDC,UAAUC,eAAiB,GAE3BD,UAAUE,iBAAmB,GAExC,MAAMC,GAgBN,SAASzM,EAAmBX,EAAGY,GAE3B,GAAIZ,EAAEqN,QAAQlX,OAAS,EACnB,OAEA6J,EAAEQ,YACFR,EAAEsN,iBACN,MAAMC,EAAQvN,EAAEwN,eAAe,GAAI3M,EAAiBlL,SAASmL,YAAY,eAEzED,EAAeE,eAAeH,GAC9B,GACA,EACA5C,OACA,EACAuP,EAAMvM,QACNuM,EAAMtM,QACNsM,EAAMrM,QACNqM,EAAMxO,SACN,GACA,GACA,GACA,EACA,EACA,MAGAiB,EAAErF,OAAO4G,cAAcV,EAC3B,CAMA,SAAS4M,EAA0BzN,EAAGY,GAE9BZ,EAAEQ,YACFR,EAAEsN,iBACN,MAAMzM,EAAiBlL,SAASmL,YAAY,eAE5CD,EAAeE,eAAeH,GAC9B,GACA,EACA5C,OACA,EACAgC,EAAEgB,QACFhB,EAAEiB,QACFjB,EAAEkB,QACFlB,EAAEjB,SACF,GACA,GACA,GACA,EACA,EACA,MAGAiB,EAAErF,OAAO4G,cAAcV,EAC3B,CAKO,SAAS6M,EAAW1N,GAEnBoN,EAAQO,eAEZP,EAAQO,cAAe,EAIvBhN,EAAmBX,EAAG,aAC1B,CAKO,SAAS4N,EAAU5N,GAEjBoN,EAAQO,cAEbhN,EAAmBX,EAAG,YAC1B,CAKO,SAAS6N,EAAS7N,GAErB,IAAKoN,EAAQO,aACT,OAEAP,EAAQU,sBACR9P,OAAO+P,aAAaX,EAAQU,4BACrBV,EAAQU,qBAEnB,MAAME,IAAgBlB,EAAUmB,YAEhCtN,EAAmBX,EAAG,WAGjBgO,GACDrN,EAAmBX,EAAG,SAG1BoN,EAAQO,cAAe,CAC3B,CAMO,SAASO,EAAYlO,GAEF,UAAlBA,EAAEmO,aAENnO,EAAErF,OAAOyT,sBAAsBpO,EAAEqO,UACrC,CACO,SAASC,EAAatO,GAEpB8M,EAAUmB,aAKO,UAAlBjO,EAAEmO,aAENV,EAA0BzN,EAAG,aACjC,CACO,SAASuO,EAAavO,GAGpB8M,EAAUmB,aAIO,UAAlBjO,EAAEmO,cAENf,EAAQU,oBAAsB9P,OAAOrB,YAAW,YACrCyQ,EAAQU,oBAEfL,EAA0BzN,EAAG,aAAa,GAC3C,IACP,CC7KA,MAAMwO,EACF,WAAA/M,CAAYgN,EAAMC,EAAWC,GAEzB1T,KAAK2T,QAAS,EACd3T,KAAKwT,KAAOA,EACZxT,KAAKnD,IAAM4W,EACXzT,KAAK0T,OAASA,EAEd1T,KAAK4T,WAAa5T,KAAK4T,WAAWC,KAAK7T,MACvCA,KAAK8T,WAAa9T,KAAK8T,WAAWD,KAAK7T,MACvCA,KAAK+T,SAAW/T,KAAK+T,SAASF,KAAK7T,MACnCA,KAAKgU,OACR,CAED,KAAAA,GACI,MAAMlZ,EAAKJ,SAAS+C,cAAc,OAalC,OAZA3C,EAAGmZ,UAAUC,IAAI,uBACjBpZ,EAAGmZ,UAAUC,IAAI,GAAGX,EAAkBY,SAASnU,KAAKnD,OACpD/B,EAAG0C,MAAM4W,OAAS,MAClBtZ,EAAG0C,MAAM6W,WAAa,OACtBrU,KAAKlF,GAAKA,EACVkF,KAAKwT,KAAK1V,YAAYkC,KAAKlF,IAC3BkF,KAAKlF,GAAGwZ,iBAAiB,YAAatU,KAAK4T,YACvC9B,IACA9R,KAAKlF,GAAGwZ,iBAAiB,aAAc7B,GACvCzS,KAAKlF,GAAGwZ,iBAAiB,cAAerB,IAGrCjT,IACV,CAED,OAAAuU,GAWI,OAVIvU,KAAK2T,QACL3T,KAAK+T,SAAS/T,KAAKwU,gBACvBxU,KAAKlF,GAAG2Z,oBAAoB,YAAazU,KAAK4T,YAC1C9B,IACA9R,KAAKlF,GAAG2Z,oBAAoB,aAAchC,GAC1CzS,KAAKlF,GAAG2Z,oBAAoB,cAAexB,IAE/CjT,KAAKwT,KAAKkB,YAAY1U,KAAKlF,WACpBkF,KAAKlF,UACLkF,KAAKwT,KACLxT,IACV,CAED,UAAA4T,CAAW7O,GACP/E,KAAKwU,eAAiBzP,EACtBrK,SAAS4Z,iBAAiB,YAAatU,KAAK8T,YAAY,GACxDpZ,SAAS4Z,iBAAiB,UAAWtU,KAAK+T,UAAU,GAChDjC,IACA9R,KAAKlF,GAAGwZ,iBAAiB,YAAa3B,GACtC3S,KAAKlF,GAAGwZ,iBAAiB,WAAY1B,IAEzC7N,EAAE4P,kBACF5P,EAAEsN,gBACL,CAED,UAAAyB,CAAW/O,GACP,IAAIH,EAAI5E,KAAKwU,eACTxU,KAAK2T,OACL3T,KAAK4U,cAAc,OAAQ7P,GAEtB9H,KAAKwG,IAAIsB,EAAE7I,EAAI0I,EAAE1I,GAAKe,KAAKwG,IAAIsB,EAAE/I,EAAI4I,EAAE5I,GAAK,IAEjDgE,KAAK2T,QAAS,EACd3T,KAAK4U,cAAc,QAAS5U,KAAKwU,gBACjCxU,KAAK4U,cAAc,OAAQ7P,IAE/BA,EAAE4P,kBACF5P,EAAEsN,gBACL,CAED,QAAA0B,CAAShP,GACD/E,KAAK2T,QACL3T,KAAK4U,cAAc,OAAQ7P,GAE/BrK,SAAS+Z,oBAAoB,YAAazU,KAAK8T,YAAY,GAC3DpZ,SAAS+Z,oBAAoB,UAAWzU,KAAK+T,UAAU,GACnDjC,IACA9R,KAAKlF,GAAG2Z,oBAAoB,YAAa9B,GACzC3S,KAAKlF,GAAG2Z,oBAAoB,WAAY7B,WAErC5S,KAAK2T,cACL3T,KAAKwU,eACZzP,EAAE4P,kBACF5P,EAAEsN,gBACL,CAED,aAAAuC,CAAcC,EAAMlR,GAGhB,OAFI3D,KAAK0T,OAAOmB,IACZ7U,KAAK0T,OAAOmB,GAAMlR,GACf3D,IACV,EAGLuT,EAAkBY,OAAS,gBChGpB,MAAMW,EACT,WAAAtO,GAEIxG,KAAK+U,eAAiB,EACzB,CAED,YAAIC,GAAa,OAAOhV,KAAKiV,SAAY,CACzC,EAAAC,CAAGvR,EAAOwR,GACNnV,KAAK+U,eAAepR,GAASwR,CAChC,CACD,GAAAC,CAAIzR,UACO3D,KAAK+U,eAAepR,EAC9B,CACD,MAAA0R,GACIrV,KAAKiV,WAAY,CACpB,CACD,OAAAK,GACItV,KAAKiV,WAAY,CACpB,CACD,OAAAV,UACWvU,KAAK+U,cACf,CACD,YAAAnI,CAAa2I,EAAW5R,GACpB,IAAK3D,KAAKgV,UAAYhV,KAAK+U,gBAAkB/U,KAAK+U,eAAeQ,GAC7D,OAAOvV,KAAK+U,eAAeQ,GAAW5R,EAC7C,ECrBL,MAAM6R,UAAoBV,EACtB,WAAAtO,CAAY1L,EAAIc,EAAO,IACnB6Z,QAEAzV,KAAK0V,UAAY,CAAExZ,EAAG,EAAGF,EAAG,GAE5BgE,KAAK2V,IAAM,KACP,MACMC,EADgB5V,KAAKlF,GAAG2H,cACQI,wBAChCgT,EAAU,CACZ7T,MAAOhC,KAAK8V,aAAa9T,MACzBC,OAAQjC,KAAK8V,aAAa7T,OAASjC,KAAK+V,SACxCjU,KAAM9B,KAAK8V,aAAahU,KACxBC,IAAK/B,KAAK8V,aAAa/T,IAAM/B,KAAK+V,UAEhCnT,EAAO5C,KAAKgW,cAAgBH,EAClC,MAAO,CACHjU,SAAU,CACNE,MAAOc,EAAKd,KAAO8T,EAAgB9T,MAAQ9B,KAAK0V,UAAUxZ,EAC1D6F,KAAMa,EAAKb,IAAM6T,EAAgB7T,KAAO/B,KAAK0V,UAAU1Z,GAE3Dia,KAAM,CACFjU,MAAOY,EAAKZ,MAAQhC,KAAK0V,UAAUxZ,EACnC+F,OAAQW,EAAKX,OAASjC,KAAK0V,UAAU1Z,GAe5C,EAELgE,KAAKlF,GAAKA,EACVkF,KAAK0T,OAAS9X,EAEdoE,KAAKkW,WAAalW,KAAKkW,WAAWrC,KAAK7T,MACvCA,KAAKmW,UAAYnW,KAAKmW,UAAUtC,KAAK7T,MACrCA,KAAKqV,SACLrV,KAAKoW,eAAepW,KAAK0T,OAAO2C,UAChCrW,KAAKsW,gBACR,CACD,EAAApB,CAAGvR,EAAOwR,GACNM,MAAMP,GAAGvR,EAAOwR,EACnB,CACD,GAAAC,CAAIzR,GACA8R,MAAML,IAAIzR,EACb,CACD,MAAA0R,GACII,MAAMJ,SACNrV,KAAKlF,GAAGmZ,UAAU3V,OAAO,yBACzB0B,KAAKoW,eAAepW,KAAK0T,OAAO2C,SACnC,CACD,OAAAf,GACIG,MAAMH,UACNtV,KAAKlF,GAAGmZ,UAAUC,IAAI,yBACtBlU,KAAKoW,gBAAe,EACvB,CACD,OAAA7B,GACIvU,KAAKuW,kBACLvW,KAAKoW,gBAAe,UACbpW,KAAKlF,GACZ2a,MAAMlB,SACT,CACD,YAAAiC,CAAa5a,GACT,IAAI6a,EAAiB7a,EAAK8V,SAAW9V,EAAK8V,UAAY1R,KAAK0T,OAAOhC,QAC9DgF,EAAkB9a,EAAKya,UAAYza,EAAKya,WAAarW,KAAK0T,OAAO2C,SASrE,OARAnW,OAAOC,KAAKvE,GAAMgE,SAAQE,GAAOE,KAAK0T,OAAO5T,GAAOlE,EAAKkE,KACrD2W,IACAzW,KAAKuW,kBACLvW,KAAKsW,kBAELI,GACA1W,KAAKoW,eAAepW,KAAK0T,OAAO2C,UAE7BrW,IACV,CAED,cAAAoW,CAAe5F,GAeX,OAdIA,GACAxQ,KAAKlF,GAAGmZ,UAAUC,IAAI,yBAEtBlU,KAAKlF,GAAGwZ,iBAAiB,YAAatU,KAAKkW,YAC3ClW,KAAKlF,GAAGwZ,iBAAiB,WAAYtU,KAAKmW,aAG1CnW,KAAKlF,GAAGmZ,UAAU3V,OAAO,yBACzB0B,KAAKlF,GAAG2Z,oBAAoB,YAAazU,KAAKkW,YAC9ClW,KAAKlF,GAAG2Z,oBAAoB,WAAYzU,KAAKmW,WACzCtE,EAAU8E,oBAAsB3W,aACzB6R,EAAU8E,mBAGlB3W,IACV,CAGD,UAAAkW,CAAWnR,GAGH8M,EAAU8E,mBAAqB9E,EAAUmB,cAE7CnB,EAAU8E,kBAAoB3W,KAE9BA,KAAKlF,GAAGmZ,UAAU3V,OAAO,yBAC5B,CAGD,SAAA6X,CAAUpR,GAEF8M,EAAU8E,oBAAsB3W,cAE7B6R,EAAU8E,kBAEjB3W,KAAKlF,GAAGmZ,UAAUC,IAAI,yBACzB,CAED,cAAAoC,GACI,IAAIM,EAAmB5W,KAAK0T,OAAOhC,SAAW,SAiB9C,MAhByB,QAArBkF,IACAA,EAAmB,uBAEvB5W,KAAK6W,SAAWD,EAAiBE,MAAM,KAClC3J,KAAItQ,GAAOA,EAAIka,SACf5J,KAAItQ,GAAO,IAAI0W,EAAkBvT,KAAKlF,GAAI+B,EAAK,CAChDma,MAAQrT,IACJ3D,KAAKiX,aAAatT,EAAM,EAE5BuT,KAAOvT,IACH3D,KAAKmX,YAAYxT,EAAM,EAE3BmM,KAAOnM,IACH3D,KAAKoX,UAAUzT,EAAO9G,EAAI,MAG3BmD,IACV,CAED,YAAAiX,CAAatT,GACT3D,KAAK8V,aAAe9V,KAAKlF,GAAG+H,wBAC5B7C,KAAKqD,SAAW/I,EAAM4H,iBAAiBlC,KAAKlF,IAC5CkF,KAAKqX,QAAUrX,KAAKqD,SAASE,UAC7BvD,KAAK+V,SAAW,EAChB/V,KAAKsX,WAAa3T,EAClB3D,KAAKuX,eACLvX,KAAKwX,eACL,MAAMC,EAAKnd,EAAMwK,UAAUnB,EAAO,CAAEuB,KAAM,cAAexF,OAAQM,KAAKlF,KAMtE,OALIkF,KAAK0T,OAAOsD,OACZhX,KAAK0T,OAAOsD,MAAMS,EAAIzX,KAAK2V,OAE/B3V,KAAKlF,GAAGmZ,UAAUC,IAAI,yBACtBlU,KAAK4M,aAAa,cAAe6K,GAC1BzX,IACV,CAED,SAAAoX,CAAUzT,EAAO9G,GACbmD,KAAK+V,SAAW/V,KAAKqD,SAASE,UAAYvD,KAAKqX,QAC/CrX,KAAKgW,aAAehW,KAAK0X,WAAW/T,EAAO9G,GAC3CmD,KAAKwX,eACL,MAAMC,EAAKnd,EAAMwK,UAAUnB,EAAO,CAAEuB,KAAM,SAAUxF,OAAQM,KAAKlF,KAKjE,OAJIkF,KAAK0T,OAAOiE,QACZ3X,KAAK0T,OAAOiE,OAAOF,EAAIzX,KAAK2V,OAEhC3V,KAAK4M,aAAa,SAAU6K,GACrBzX,IACV,CAED,WAAAmX,CAAYxT,GACR,MAAM8T,EAAKnd,EAAMwK,UAAUnB,EAAO,CAAEuB,KAAM,aAAcxF,OAAQM,KAAKlF,KAYrE,OAXIkF,KAAK0T,OAAOwD,MACZlX,KAAK0T,OAAOwD,KAAKO,GAErBzX,KAAKlF,GAAGmZ,UAAU3V,OAAO,yBACzB0B,KAAK4M,aAAa,aAAc6K,GAChCzX,KAAK4X,sBACE5X,KAAKsX,kBACLtX,KAAK8V,oBACL9V,KAAKgW,oBACLhW,KAAKqX,eACLrX,KAAK+V,SACL/V,IACV,CAED,YAAAuX,GACIvX,KAAK6X,iBAAmBrC,EAAYsC,iBAAiB3K,KAAIiD,GAAQpQ,KAAKlF,GAAG0C,MAAM4S,KAC/EpQ,KAAK+X,0BAA4B/X,KAAKlF,GAAG2H,cAAcjF,MAAMoE,SAC7D,MAAMtE,EAAS0C,KAAKlF,GAAG2H,cACjBuV,EAAStd,SAAS+C,cAAc,OACtCnD,EAAMoK,YAAYsT,EAAQ,CACtBC,QAAS,IACTrW,SAAU,QACVG,IAAK,MACLD,KAAM,MACNE,MAAO,MACPC,OAAQ,MACRmS,OAAQ,YAEZ9W,EAAOQ,YAAYka,GACnB,MAAME,EAAiBF,EAAOnV,wBAW9B,OAVAvF,EAAOoX,YAAYsD,GACnBhY,KAAK0V,UAAY,CACbxZ,EAAG,EAAIgc,EAAelW,MACtBhG,EAAG,EAAIkc,EAAejW,QAEtBI,iBAAiBrC,KAAKlF,GAAG2H,eAAeb,SAAStC,MAAM,YACvDU,KAAKlF,GAAG2H,cAAcjF,MAAMoE,SAAW,YAE3C5B,KAAKlF,GAAG0C,MAAMoE,SAAW,WACzB5B,KAAKlF,GAAG0C,MAAMya,QAAU,MACjBjY,IACV,CAED,YAAA4X,GAKI,OAJApC,EAAYsC,iBAAiBlY,SAAQ,CAACwQ,EAAMtP,KACxCd,KAAKlF,GAAG0C,MAAM4S,GAAQpQ,KAAK6X,iBAAiB/W,IAAM,IAAI,IAE1Dd,KAAKlF,GAAG2H,cAAcjF,MAAMoE,SAAW5B,KAAK+X,2BAA6B,KAClE/X,IACV,CAED,UAAA0X,CAAW/T,EAAO9G,GACd,MAAMsb,EAASnY,KAAKsX,WACdzB,EAAU,CACZ7T,MAAOhC,KAAK8V,aAAa9T,MACzBC,OAAQjC,KAAK8V,aAAa7T,OAASjC,KAAK+V,SACxCjU,KAAM9B,KAAK8V,aAAahU,KACxBC,IAAK/B,KAAK8V,aAAa/T,IAAM/B,KAAK+V,UAEhCqC,EAAUzU,EAAMsC,QAAUkS,EAAOlS,QACjCoS,EAAU1U,EAAMG,QAAUqU,EAAOrU,QACnCjH,EAAIyb,QAAQ,MAAQ,EACpBzC,EAAQ7T,OAASoW,EAEZvb,EAAIyb,QAAQ,MAAQ,IACzBzC,EAAQ7T,OAASoW,EACjBvC,EAAQ/T,MAAQsW,GAEhBvb,EAAIyb,QAAQ,MAAQ,EACpBzC,EAAQ5T,QAAUoW,EAEbxb,EAAIyb,QAAQ,MAAQ,IACzBzC,EAAQ5T,QAAUoW,EAClBxC,EAAQ9T,KAAOsW,GAEnB,MAAME,EAAYvY,KAAKwY,eAAe3C,EAAQ7T,MAAO6T,EAAQ5T,QAa7D,OAZIhF,KAAKgS,MAAM4G,EAAQ7T,SAAW/E,KAAKgS,MAAMsJ,EAAUvW,SAC/CnF,EAAIyb,QAAQ,MAAQ,IACpBzC,EAAQ/T,MAAQ+T,EAAQ7T,MAAQuW,EAAUvW,OAE9C6T,EAAQ7T,MAAQuW,EAAUvW,OAE1B/E,KAAKgS,MAAM4G,EAAQ5T,UAAYhF,KAAKgS,MAAMsJ,EAAUtW,UAChDpF,EAAIyb,QAAQ,MAAQ,IACpBzC,EAAQ9T,KAAO8T,EAAQ5T,OAASsW,EAAUtW,QAE9C4T,EAAQ5T,OAASsW,EAAUtW,QAExB4T,CACV,CAED,cAAA2C,CAAeC,EAAQC,GACnB,MAAMC,EAAW3Y,KAAK0T,OAAOiF,UAAYzZ,OAAO0Z,iBAC1CC,EAAW7Y,KAAK0T,OAAOmF,SAAW7Y,KAAK0V,UAAUxZ,GAAKuc,EACtDK,EAAY9Y,KAAK0T,OAAOoF,WAAa5Z,OAAO0Z,iBAC5CG,EAAY/Y,KAAK0T,OAAOqF,UAAY/Y,KAAK0V,UAAU1Z,GAAK0c,EAG9D,MAAO,CAAE1W,MAFK/E,KAAK0M,IAAIgP,EAAU1b,KAAKC,IAAI2b,EAAUJ,IAEpCxW,OADDhF,KAAK0M,IAAImP,EAAW7b,KAAKC,IAAI6b,EAAWL,IAE1D,CAED,YAAAlB,GACI,IAAI5B,EAAkB,CAAE9T,KAAM,EAAGC,IAAK,EAAGC,MAAO,EAAGC,OAAQ,GAC3D,GAA+B,aAA3BjC,KAAKlF,GAAG0C,MAAMoE,SAAyB,CACvC,MAAMoX,EAAgBhZ,KAAKlF,GAAG2H,eACxBX,KAAEA,EAAIC,IAAEA,GAAQiX,EAAcnW,wBACpC+S,EAAkB,CAAE9T,OAAMC,MAAKC,MAAO,EAAGC,OAAQ,EACpD,CACD,OAAKjC,KAAKgW,cAEV9V,OAAOC,KAAKH,KAAKgW,cAAcpW,SAAQE,IACnC,MAAMb,EAAQe,KAAKgW,aAAalW,GAC1BmZ,EAA0B,UAARnZ,GAA2B,SAARA,EAAiBE,KAAK0V,UAAUxZ,EAAY,WAAR4D,GAA4B,QAARA,EAAgBE,KAAK0V,UAAU1Z,EAAI,EACtIgE,KAAKlF,GAAG0C,MAAMsC,IAAQb,EAAQ2W,EAAgB9V,IAAQmZ,EAAkB,IAAI,IAEzEjZ,MANIA,IAOd,CAED,eAAAuW,GAGI,OAFAvW,KAAK6W,SAASjX,SAAQiR,GAAUA,EAAO0D,mBAChCvU,KAAK6W,SACL7W,IACV,EAGLwV,EAAYsC,iBAAmB,CAAC,QAAS,SAAU,WAAY,OAAQ,MAAO,UAAW,UC1SzF,MAAMoB,UAAoBpE,EACtB,WAAAtO,CAAY1L,EAAI4Y,EAAS,IACrB+B,QAEAzV,KAAKmZ,UAAY,CAAEjd,EAAG,EAAGF,EAAG,GAC5BgE,KAAKlF,GAAKA,EACVkF,KAAK0T,OAASA,EAEd,IAAI0F,EAAa1F,EAAO7C,OAAOvV,UAAU,GACzC0E,KAAKqZ,OAASve,EAAGmZ,UAAUqF,SAASF,GAActe,EAAKA,EAAGS,cAAcmY,EAAO7C,SAAW/V,EAE1FkF,KAAK4T,WAAa5T,KAAK4T,WAAWC,KAAK7T,MACvCA,KAAK8T,WAAa9T,KAAK8T,WAAWD,KAAK7T,MACvCA,KAAK+T,SAAW/T,KAAK+T,SAASF,KAAK7T,MACnCA,KAAKqV,QACR,CACD,EAAAH,CAAGvR,EAAOwR,GACNM,MAAMP,GAAGvR,EAAOwR,EACnB,CACD,GAAAC,CAAIzR,GACA8R,MAAML,IAAIzR,EACb,CACD,MAAA0R,IAC0B,IAAlBrV,KAAKgV,WAETS,MAAMJ,SACNrV,KAAKqZ,OAAO/E,iBAAiB,YAAatU,KAAK4T,YAC3C9B,IACA9R,KAAKqZ,OAAO/E,iBAAiB,aAAc7B,GAC3CzS,KAAKqZ,OAAO/E,iBAAiB,cAAerB,IAGhDjT,KAAKlF,GAAGmZ,UAAU3V,OAAO,yBAC5B,CACD,OAAAgX,CAAQiE,GAAa,IACK,IAAlBvZ,KAAKgV,WAETS,MAAMH,UACNtV,KAAKqZ,OAAO5E,oBAAoB,YAAazU,KAAK4T,YAC9C9B,IACA9R,KAAKqZ,OAAO5E,oBAAoB,aAAchC,GAC9CzS,KAAKqZ,OAAO5E,oBAAoB,cAAexB,IAE9CsG,GACDvZ,KAAKlF,GAAGmZ,UAAUC,IAAI,yBAC7B,CACD,OAAAK,GACQvU,KAAKwZ,aACLzW,OAAO+P,aAAa9S,KAAKwZ,oBACtBxZ,KAAKwZ,YACRxZ,KAAKwU,gBACLxU,KAAK+T,SAAS/T,KAAKwU,gBACvBxU,KAAKsV,SAAQ,UACNtV,KAAKlF,UACLkF,KAAKyZ,cACLzZ,KAAK0T,OACZ+B,MAAMlB,SACT,CACD,YAAAiC,CAAa5a,GAET,OADAsE,OAAOC,KAAKvE,GAAMgE,SAAQE,GAAOE,KAAK0T,OAAO5T,GAAOlE,EAAKkE,KAClDE,IACV,CAED,UAAA4T,CAAW7O,GAEP,IAAI8M,EAAU6H,aAEd,OAAiB,IAAb3U,EAAEI,QAGFJ,EAAErF,OAAOia,QAxEC,sFA0EV3Z,KAAK0T,OAAOkG,QACR7U,EAAErF,OAAOia,QAAQ3Z,KAAK0T,OAAOkG,UAUrC5Z,KAAKwU,eAAiBzP,SACf/E,KAAK6Z,gBACLhI,EAAUmB,mBACVnB,EAAUiI,YAEjBpf,SAAS4Z,iBAAiB,YAAatU,KAAK8T,YAAY,GACxDpZ,SAAS4Z,iBAAiB,UAAWtU,KAAK+T,UAAU,GAChDjC,IACA9R,KAAKqZ,OAAO/E,iBAAiB,YAAa3B,GAC1C3S,KAAKqZ,OAAO/E,iBAAiB,WAAY1B,IAE7C7N,EAAEsN,iBAGE3X,SAASqf,eACTrf,SAASqf,cAAcC,OAC3BnI,EAAU6H,cAAe,IA/Bd,CAiCd,CAED,SAAAO,CAAUlV,GACN,IAAK/E,KAAK6Z,SACN,OACJ,MAAMpC,EAAKnd,EAAMwK,UAAUC,EAAG,CAAErF,OAAQM,KAAKlF,GAAIoK,KAAM,SACnDlF,KAAK0T,OAAOwG,MACZla,KAAK0T,OAAOwG,KAAKzC,EAAIzX,KAAKma,MAE9Bna,KAAK4M,aAAa,OAAQ6K,EAC7B,CAED,UAAA3D,CAAW/O,GAEP,IAAIH,EAAI5E,KAAKwU,eACb,GAAIxU,KAAK6Z,SAGL,GAFA7Z,KAAKoa,YAAYrV,GAEb8M,EAAUwI,UAAW,CACrB,MAAMC,EAAQpb,OAAOqb,UAAU1I,EAAUwI,WAAaxI,EAAUwI,UAAY,IACxEra,KAAKwZ,aACLzW,OAAO+P,aAAa9S,KAAKwZ,aAC7BxZ,KAAKwZ,YAAczW,OAAOrB,YAAW,IAAM1B,KAAKia,UAAUlV,IAAIuV,EACjE,MAEGta,KAAKia,UAAUlV,QAGlB,GAAI9H,KAAKwG,IAAIsB,EAAE7I,EAAI0I,EAAE1I,GAAKe,KAAKwG,IAAIsB,EAAE/I,EAAI4I,EAAE5I,GAAK,EAAG,CAIpDgE,KAAK6Z,UAAW,EAChBhI,EAAUmB,YAAchT,KAExB,IAAItE,EAAOsE,KAAKlF,GAAGwS,eAAe5R,KAC9BA,EACAmW,EAAUiI,YAAcpe,EAAKZ,GAAG0f,UAAUC,mBAGnC5I,EAAUiI,YAErB9Z,KAAKyZ,OAASzZ,KAAK0a,cAAc3V,GACjC/E,KAAK2a,+BACL3a,KAAK4a,WAAa5a,KAAK6a,eAAe9V,EAAG/E,KAAKlF,GAAIkF,KAAK8a,mBACvD,MAAMrD,EAAKnd,EAAMwK,UAAUC,EAAG,CAAErF,OAAQM,KAAKlF,GAAIoK,KAAM,cACvDlF,KAAK+a,kBAAkBhW,GACnB/E,KAAK0T,OAAOsD,OACZhX,KAAK0T,OAAOsD,MAAMS,EAAIzX,KAAKma,MAE/Bna,KAAK4M,aAAa,YAAa6K,EAClC,CAED,OADA1S,EAAEsN,kBACK,CACV,CAED,QAAA0B,CAAShP,GAOL,GANArK,SAAS+Z,oBAAoB,YAAazU,KAAK8T,YAAY,GAC3DpZ,SAAS+Z,oBAAoB,UAAWzU,KAAK+T,UAAU,GACnDjC,IACA9R,KAAKqZ,OAAO5E,oBAAoB,YAAa9B,GAAW,GACxD3S,KAAKqZ,OAAO5E,oBAAoB,WAAY7B,GAAU,IAEtD5S,KAAK6Z,SAAU,QACR7Z,KAAK6Z,SAERhI,EAAUiI,aAAahf,KAAOkF,KAAKlF,GAAG2H,sBAC/BoP,EAAUiI,YAErB9Z,KAAK8a,kBAAkBtd,MAAMoE,SAAW5B,KAAK+X,2BAA6B,KACtE/X,KAAKyZ,SAAWzZ,KAAKlF,GACrBkF,KAAKgb,qBAGLhb,KAAKyZ,OAAOnb,SAEhB,MAAMmZ,EAAKnd,EAAMwK,UAAUC,EAAG,CAAErF,OAAQM,KAAKlF,GAAIoK,KAAM,aACnDlF,KAAK0T,OAAOwD,MACZlX,KAAK0T,OAAOwD,KAAKO,GAErBzX,KAAK4M,aAAa,WAAY6K,GAE1B5F,EAAUiI,aACVjI,EAAUiI,YAAYmB,KAAKlW,EAElC,QACM/E,KAAKyZ,cACLzZ,KAAKwU,sBACL3C,EAAUmB,mBACVnB,EAAUiI,mBACVjI,EAAU6H,aACjB3U,EAAEsN,gBACL,CAED,aAAAqI,CAAc/W,GACV,IAAI8V,EAASzZ,KAAKlF,GAalB,MAZkC,mBAAvBkF,KAAK0T,OAAO+F,OACnBA,EAASzZ,KAAK0T,OAAO+F,OAAO9V,GAEA,UAAvB3D,KAAK0T,OAAO+F,SACjBA,EAASnf,EAAMiK,UAAUvE,KAAKlF,KAE7BJ,SAASwgB,KAAK5B,SAASG,IACxBnf,EAAMmK,SAASgV,EAAiC,WAAzBzZ,KAAK0T,OAAOjP,SAAwBzE,KAAKlF,GAAG2H,cAAgBzC,KAAK0T,OAAOjP,UAE/FgV,IAAWzZ,KAAKlF,KAChBkF,KAAKmb,uBAAyBjC,EAAYkC,gBAAgBjO,KAAIiD,GAAQpQ,KAAKlF,GAAG0C,MAAM4S,MAEjFqJ,CACV,CAED,iBAAAsB,CAAkBhW,GACd/E,KAAKyZ,OAAOxF,UAAUC,IAAI,yBAE1B,MAAM1W,EAAQwC,KAAKyZ,OAAOjc,MAc1B,OAbAA,EAAM6d,cAAgB,OAEtB7d,EAAMwE,MAAQhC,KAAK4a,WAAW5Y,MAAQ,KACtCxE,EAAMyE,OAASjC,KAAK4a,WAAW3Y,OAAS,KACxCzE,EAAM8d,WAAa,YACnB9d,EAAMoE,SAAW,QACjB5B,KAAKoa,YAAYrV,GACjBvH,EAAM+d,WAAa,OACnB7Z,YAAW,KACH1B,KAAKyZ,SACLjc,EAAM+d,WAAa,KACtB,GACF,GACIvb,IACV,CAED,kBAAAgb,GACIhb,KAAKyZ,OAAOxF,UAAU3V,OAAO,yBAC7B,IAAIsC,EAAOZ,KAAKyZ,QAAQnM,cAExB,IAAK1M,GAAMiM,kBAAoB7M,KAAKmb,uBAAwB,CACxD,IAAI1B,EAASzZ,KAAKyZ,OAMd8B,EAAavb,KAAKmb,uBAAmC,YAAK,KAC9D1B,EAAOjc,MAAM+d,WAAavb,KAAKmb,uBAAmC,WAAI,OACtEjC,EAAYkC,gBAAgBxb,SAAQwQ,GAAQqJ,EAAOjc,MAAM4S,GAAQpQ,KAAKmb,uBAAuB/K,IAAS,OACtG1O,YAAW,IAAM+X,EAAOjc,MAAM+d,WAAaA,GAAY,GAC1D,CAED,cADOvb,KAAKmb,uBACLnb,IACV,CAED,WAAAoa,CAAYrV,GACR,IAAI6Q,EAA0B,EAA1BA,EAAkC,EAKtC,MAAMpY,EAAQwC,KAAKyZ,OAAOjc,MACpBge,EAASxb,KAAK4a,WACpBpd,EAAMsE,MAAQiD,EAAEkB,QAAUuV,EAAOC,WAAa7F,GAAwB5V,KAAKmZ,UAAUjd,EAAI,KACzFsB,EAAMuE,KAAOgD,EAAEjB,QAAU0X,EAAO5X,UAAYgS,GAAuB5V,KAAKmZ,UAAUnd,EAAI,IACzF,CAED,4BAAA2e,GAQI,OAPA3a,KAAK8a,kBAAoB9a,KAAKyZ,OAAOhX,cACF,UAA/BzC,KAAKyZ,OAAOjc,MAAMoE,WAClB5B,KAAK+X,0BAA4B/X,KAAK8a,kBAAkBtd,MAAMoE,SAC1DS,iBAAiBrC,KAAK8a,mBAAmBlZ,SAAStC,MAAM,YACxDU,KAAK8a,kBAAkBtd,MAAMoE,SAAW,aAGzC5B,IACV,CAED,cAAA6a,CAAelX,EAAO7I,EAAIwC,GAEtB,IAAIoe,EAAe,EACfC,EAAe,EACnB,GAAIre,EAAQ,CACR,MAAM0a,EAAStd,SAAS+C,cAAc,OACtCnD,EAAMoK,YAAYsT,EAAQ,CACtBC,QAAS,IACTrW,SAAU,QACVG,IAAK,MACLD,KAAM,MACNE,MAAO,MACPC,OAAQ,MACRmS,OAAQ,YAEZ9W,EAAOQ,YAAYka,GACnB,MAAME,EAAiBF,EAAOnV,wBAC9BvF,EAAOoX,YAAYsD,GACnB0D,EAAexD,EAAepW,KAC9B6Z,EAAezD,EAAenW,IAC9B/B,KAAKmZ,UAAY,CACbjd,EAAG,EAAIgc,EAAelW,MACtBhG,EAAG,EAAIkc,EAAejW,OAE7B,CACD,MAAM2Z,EAAe9gB,EAAG+H,wBACxB,MAAO,CACHf,KAAM8Z,EAAa9Z,KACnBC,IAAK6Z,EAAa7Z,IAClB0Z,YAAa9X,EAAMsC,QAAU2V,EAAa9Z,KAAO4Z,EACjD9X,WAAYD,EAAMG,QAAU8X,EAAa7Z,IAAM4Z,EAC/C3Z,MAAO4Z,EAAa5Z,MAAQhC,KAAKmZ,UAAUjd,EAC3C+F,OAAQ2Z,EAAa3Z,OAASjC,KAAKmZ,UAAUnd,EAEpD,CAED,EAAAme,GACI,MACMvE,EADgB5V,KAAKlF,GAAG2H,cACQI,wBAChC2Y,EAASxb,KAAKyZ,OAAO5W,wBAC3B,MAAO,CACHjB,SAAU,CACNG,KAAMyZ,EAAOzZ,IAAM6T,EAAgB7T,KAAO/B,KAAKmZ,UAAUnd,EACzD8F,MAAO0Z,EAAO1Z,KAAO8T,EAAgB9T,MAAQ9B,KAAKmZ,UAAUjd,GAOvE,EAGLgd,EAAYkC,gBAAkB,CAAC,aAAc,gBAAiB,WAAY,OAAQ,MAAO,WAAY,cC1U9F,MAAMS,UAAoB/G,EAC7B,WAAAtO,CAAY1L,EAAIc,EAAO,IACnB6Z,QACAzV,KAAKlF,GAAKA,EACVkF,KAAK0T,OAAS9X,EAEdoE,KAAK8b,YAAc9b,KAAK8b,YAAYjI,KAAK7T,MACzCA,KAAK+b,YAAc/b,KAAK+b,YAAYlI,KAAK7T,MACzCA,KAAKqV,SACLrV,KAAKgc,cACR,CACD,EAAA9G,CAAGvR,EAAOwR,GACNM,MAAMP,GAAGvR,EAAOwR,EACnB,CACD,GAAAC,CAAIzR,GACA8R,MAAML,IAAIzR,EACb,CACD,MAAA0R,IAC0B,IAAlBrV,KAAKgV,WAETS,MAAMJ,SACNrV,KAAKlF,GAAGmZ,UAAUC,IAAI,gBACtBlU,KAAKlF,GAAGmZ,UAAU3V,OAAO,yBACzB0B,KAAKlF,GAAGwZ,iBAAiB,aAActU,KAAK8b,aAC5C9b,KAAKlF,GAAGwZ,iBAAiB,aAActU,KAAK+b,aACxCjK,IACA9R,KAAKlF,GAAGwZ,iBAAiB,eAAgBjB,GACzCrT,KAAKlF,GAAGwZ,iBAAiB,eAAgBhB,IAEhD,CACD,OAAAgC,CAAQiE,GAAa,IACK,IAAlBvZ,KAAKgV,WAETS,MAAMH,UACNtV,KAAKlF,GAAGmZ,UAAU3V,OAAO,gBACpBib,GACDvZ,KAAKlF,GAAGmZ,UAAUC,IAAI,yBAC1BlU,KAAKlF,GAAG2Z,oBAAoB,aAAczU,KAAK8b,aAC/C9b,KAAKlF,GAAG2Z,oBAAoB,aAAczU,KAAK+b,aAC3CjK,IACA9R,KAAKlF,GAAG2Z,oBAAoB,eAAgBpB,GAC5CrT,KAAKlF,GAAG2Z,oBAAoB,eAAgBnB,IAEnD,CACD,OAAAiB,GACIvU,KAAKsV,SAAQ,GACbtV,KAAKlF,GAAGmZ,UAAU3V,OAAO,gBACzB0B,KAAKlF,GAAGmZ,UAAU3V,OAAO,yBACzBmX,MAAMlB,SACT,CACD,YAAAiC,CAAa5a,GAGT,OAFAsE,OAAOC,KAAKvE,GAAMgE,SAAQE,GAAOE,KAAK0T,OAAO5T,GAAOlE,EAAKkE,KACzDE,KAAKgc,eACEhc,IACV,CAED,WAAA8b,CAAY/W,GAER,IAAK8M,EAAUmB,YACX,OACJ,IAAKhT,KAAKic,SAASpK,EAAUmB,YAAYlY,IACrC,OACJiK,EAAEsN,iBACFtN,EAAE4P,kBAEE9C,EAAUiI,aAAejI,EAAUiI,cAAgB9Z,MACnD6R,EAAUiI,YAAYiC,YAAYhX,GAEtC8M,EAAUiI,YAAc9Z,KACxB,MAAMyX,EAAKnd,EAAMwK,UAAUC,EAAG,CAAErF,OAAQM,KAAKlF,GAAIoK,KAAM,aACnDlF,KAAK0T,OAAOhK,MACZ1J,KAAK0T,OAAOhK,KAAK+N,EAAIzX,KAAK2V,IAAI9D,EAAUmB,cAE5ChT,KAAK4M,aAAa,WAAY6K,GAC9BzX,KAAKlF,GAAGmZ,UAAUC,IAAI,oBAEzB,CAED,WAAA6H,CAAYhX,GAER,IAAK8M,EAAUmB,aAAenB,EAAUiI,cAAgB9Z,KACpD,OACJ+E,EAAEsN,iBACFtN,EAAE4P,kBACF,MAAM8C,EAAKnd,EAAMwK,UAAUC,EAAG,CAAErF,OAAQM,KAAKlF,GAAIoK,KAAM,YAKvD,GAJIlF,KAAK0T,OAAOwI,KACZlc,KAAK0T,OAAOwI,IAAIzE,EAAIzX,KAAK2V,IAAI9D,EAAUmB,cAE3ChT,KAAK4M,aAAa,UAAW6K,GACzB5F,EAAUiI,cAAgB9Z,KAAM,CAIhC,IAAImc,SAHGtK,EAAUiI,YAIjB,IAAIxc,EAAS0C,KAAKlF,GAAG2H,cACrB,MAAQ0Z,GAAc7e,GAClB6e,EAAa7e,EAAOkd,WAAWC,YAC/Bnd,EAASA,EAAOmF,cAEhB0Z,GACAA,EAAWL,YAAY/W,EAE9B,CACJ,CAED,IAAAkW,CAAKlW,GACDA,EAAEsN,iBACF,MAAMoF,EAAKnd,EAAMwK,UAAUC,EAAG,CAAErF,OAAQM,KAAKlF,GAAIoK,KAAM,SACnDlF,KAAK0T,OAAOuH,MACZjb,KAAK0T,OAAOuH,KAAKxD,EAAIzX,KAAK2V,IAAI9D,EAAUmB,cAE5ChT,KAAK4M,aAAa,OAAQ6K,EAC7B,CAED,QAAAwE,CAASnhB,GACL,OAAOA,KAAQkF,KAAKuR,QAAUvR,KAAKuR,OAAOzW,GAC7C,CAED,YAAAkhB,GACI,OAAKhc,KAAK0T,OAAOnC,QAEiB,iBAAvBvR,KAAK0T,OAAOnC,OACnBvR,KAAKuR,OAAUzW,GAAOA,EAAGmZ,UAAUqF,SAAStZ,KAAK0T,OAAOnC,SAAWzW,EAAGshB,QAAQpc,KAAK0T,OAAOnC,QAG1FvR,KAAKuR,OAASvR,KAAK0T,OAAOnC,OAEvBvR,MAPIA,IAQd,CAED,GAAA2V,CAAIuE,GACA,MAAO,CACHtJ,UAAWsJ,EAAKpf,MACbof,EAAKC,KAEf,ECzIE,MAAMkC,EACT,WAAOC,CAAKxhB,GAIR,OAHKA,EAAG0f,YACJ1f,EAAG0f,UAAY,IAAI6B,EAAUvhB,IAE1BA,EAAG0f,SACb,CACD,WAAAhU,CAAY1L,GACRkF,KAAKlF,GAAKA,CACb,CACD,EAAAoa,CAAGK,EAAWJ,GAUV,OATInV,KAAKuc,aAAe,CAAC,OAAQ,YAAa,YAAYjE,QAAQ/C,IAAc,EAC5EvV,KAAKuc,YAAYrH,GAAGK,EAAWJ,GAE1BnV,KAAKya,aAAe,CAAC,OAAQ,WAAY,WAAWnC,QAAQ/C,IAAc,EAC/EvV,KAAKya,YAAYvF,GAAGK,EAAWJ,GAE1BnV,KAAKwc,aAAe,CAAC,cAAe,SAAU,cAAclE,QAAQ/C,IAAc,GACvFvV,KAAKwc,YAAYtH,GAAGK,EAAWJ,GAE5BnV,IACV,CACD,GAAAoV,CAAIG,GAUA,OATIvV,KAAKuc,aAAe,CAAC,OAAQ,YAAa,YAAYjE,QAAQ/C,IAAc,EAC5EvV,KAAKuc,YAAYnH,IAAIG,GAEhBvV,KAAKya,aAAe,CAAC,OAAQ,WAAY,WAAWnC,QAAQ/C,IAAc,EAC/EvV,KAAKya,YAAYrF,IAAIG,GAEhBvV,KAAKwc,aAAe,CAAC,cAAe,SAAU,cAAclE,QAAQ/C,IAAc,GACvFvV,KAAKwc,YAAYpH,IAAIG,GAElBvV,IACV,CACD,cAAAyc,CAAe7gB,GAOX,OANKoE,KAAKuc,YAINvc,KAAKuc,YAAY/F,aAAa5a,GAH9BoE,KAAKuc,YAAc,IAAIrD,EAAYlZ,KAAKlF,GAAIc,GAKzCoE,IACV,CACD,cAAA0c,GAKI,OAJI1c,KAAKuc,cACLvc,KAAKuc,YAAYhI,iBACVvU,KAAKuc,aAETvc,IACV,CACD,cAAA2c,CAAe/gB,GAOX,OANKoE,KAAKwc,YAINxc,KAAKwc,YAAYhG,aAAa5a,GAH9BoE,KAAKwc,YAAc,IAAIhH,EAAYxV,KAAKlF,GAAIc,GAKzCoE,IACV,CACD,cAAA4c,GAKI,OAJI5c,KAAKwc,cACLxc,KAAKwc,YAAYjI,iBACVvU,KAAKwc,aAETxc,IACV,CACD,cAAA6c,CAAejhB,GAOX,OANKoE,KAAKya,YAINza,KAAKya,YAAYjE,aAAa5a,GAH9BoE,KAAKya,YAAc,IAAIoB,EAAY7b,KAAKlF,GAAIc,GAKzCoE,IACV,CACD,cAAA8c,GAKI,OAJI9c,KAAKya,cACLza,KAAKya,YAAYlG,iBACVvU,KAAKya,aAETza,IACV;;;;;;;;ACpEL,MAAM+c,EAAK,ICTJ,MACH,SAAAtL,CAAU3W,EAAIc,EAAMkE,EAAKb,GA0BrB,OAzBAe,KAAKgd,eAAeliB,GAAI8E,SAAQqd,IAC5B,GAAa,YAATrhB,GAA+B,WAATA,EACtBqhB,EAAIT,aAAeS,EAAIT,YAAY5gB,UAElC,GAAa,YAATA,EACLqhB,EAAIT,aAAeS,EAAIL,sBAEtB,GAAa,WAAThhB,EACLqhB,EAAIN,eAAe,CAAE7c,CAACA,GAAMb,QAE3B,CACD,MAAMvD,EAAOuhB,EAAIniB,GAAGwS,cAAc5R,KAClC,IAAIgW,EAAUuL,EAAIniB,GAAGoiB,aAAa,qBAAuBD,EAAIniB,GAAGoiB,aAAa,qBAAuBxhB,EAAKE,KAAK6V,UAAUC,QACpH2E,GAAY3a,EAAKE,KAAK0U,uBAC1B2M,EAAIN,eAAe,IACZjhB,EAAKE,KAAK6V,UACRC,UAAS2E,WAEVW,MAAOpb,EAAKob,MACZE,KAAMtb,EAAKsb,KACXS,OAAQ/b,EAAK+b,QAGxB,KAEE3X,IACV,CACD,SAAA4Q,CAAU9V,EAAIc,EAAMkE,EAAKb,GAwBrB,OAvBAe,KAAKgd,eAAeliB,GAAI8E,SAAQqd,IAC5B,GAAa,YAATrhB,GAA+B,WAATA,EACtBqhB,EAAIV,aAAeU,EAAIV,YAAY3gB,UAElC,GAAa,YAATA,EACLqhB,EAAIV,aAAeU,EAAIP,sBAEtB,GAAa,WAAT9gB,EACLqhB,EAAIR,eAAe,CAAE3c,CAACA,GAAMb,QAE3B,CACD,MAAMvD,EAAOuhB,EAAIniB,GAAGwS,cAAc5R,KAClCuhB,EAAIR,eAAe,IACZ/gB,EAAKE,KAAKgV,UAGToG,MAAOpb,EAAKob,MACZE,KAAMtb,EAAKsb,KACXgD,KAAMte,EAAKse,MAGtB,KAEEla,IACV,CACD,MAAAmd,CAAOriB,EAAIc,GAEP,OADAoE,KAAKgd,eAAeliB,GAAI8E,SAAQqd,GAAOA,EAAIR,eAAe7gB,KACnDoE,IACV,CACD,SAAAod,CAAUtiB,EAAIc,EAAMkE,EAAKb,GAqBrB,MApB2B,mBAAhBrD,EAAK2V,QAA0B3V,EAAKyhB,UAC3CzhB,EAAKyhB,QAAUzhB,EAAK2V,OACpB3V,EAAK2V,OAAUzW,GAAOc,EAAKyhB,QAAQviB,IAEvCkF,KAAKgd,eAAeliB,GAAI8E,SAAQqd,IACf,YAATrhB,GAA+B,WAATA,EACtBqhB,EAAIxC,aAAewC,EAAIxC,YAAY7e,KAErB,YAATA,EACDqhB,EAAIxC,aACJwC,EAAIH,iBAGM,WAATlhB,EACLqhB,EAAIJ,eAAe,CAAE/c,CAACA,GAAMb,IAG5Bge,EAAIJ,eAAejhB,EACtB,IAEEoE,IACV,CAED,WAAAsd,CAAYxiB,GACR,UAAUA,GAAMA,EAAG0f,WAAa1f,EAAG0f,UAAUC,cAAgB3f,EAAG0f,UAAUC,YAAYzF,SACzF,CAED,WAAAuI,CAAYziB,GACR,UAAUA,GAAMA,EAAG0f,WAAa1f,EAAG0f,UAAU+B,cAAgBzhB,EAAG0f,UAAU+B,YAAYvH,SACzF,CAED,WAAAwI,CAAY1iB,GACR,UAAUA,GAAMA,EAAG0f,WAAa1f,EAAG0f,UAAUgC,cAAgB1hB,EAAG0f,UAAUgC,YAAYxH,SACzF,CACD,EAAAE,CAAGpa,EAAI+Z,EAAMM,GAIT,OAHAnV,KAAKgd,eAAeliB,GAAI8E,SAAQqd,GAAOA,EAAI/H,GAAGL,GAAOlR,IACjDwR,EAASxR,EAAOkO,EAAUmB,YAAcnB,EAAUmB,YAAYlY,GAAK6I,EAAMjE,OAAQmS,EAAUmB,YAAcnB,EAAUmB,YAAYyG,OAAS,KAAK,MAE1IzZ,IACV,CACD,GAAAoV,CAAIta,EAAI+Z,GAEJ,OADA7U,KAAKgd,eAAeliB,GAAI8E,SAAQqd,GAAOA,EAAI7H,IAAIP,KACxC7U,IACV,CAED,cAAAgd,CAAexiB,EAAKijB,GAAS,GACzB,IAAIC,EAAQpjB,EAAMC,YAAYC,GAC9B,IAAKkjB,EAAMxiB,OACP,MAAO,GACX,IAAIF,EAAO0iB,EAAMvQ,KAAIpI,GAAKA,EAAEyV,YAAciD,EAASpB,EAAUC,KAAKvX,GAAK,QAIvE,OAHK0Y,GACDziB,EAAK8N,QAAO6U,GAAKA,IAEd3iB,CACV,GDzFL,MAAM4iB,EAcF,WAAOtB,CAAK/e,EAAU,GAAIsgB,EAAa,eACnC,IAAI/iB,EAAK8iB,EAAUE,eAAeD,GAClC,OAAK/iB,GAUAA,EAAGijB,YACJjjB,EAAGijB,UAAY,IAAIH,EAAU9iB,EAAIR,EAAM6J,UAAU5G,KAE9CzC,EAAGijB,YAZoB,iBAAfF,EACPG,QAAQC,MAAM,wDAA0DJ,EAA1D,+IAIdG,QAAQC,MAAM,gDAEX,KAMd,CAUD,cAAOC,CAAQ3gB,EAAU,GAAIiB,EAAW,eACpC,IAAI2f,EAAQ,GAWZ,OAVAP,EAAUQ,gBAAgB5f,GAAUoB,SAAQ9E,IACnCA,EAAGijB,YACJjjB,EAAGijB,UAAY,IAAIH,EAAU9iB,EAAIR,EAAM6J,UAAU5G,KAErD4gB,EAAM1R,KAAK3R,EAAGijB,UAAU,IAEP,IAAjBI,EAAMjjB,QACN8iB,QAAQC,MAAM,wDAA0Dzf,EAA1D,+IAGX2f,CACV,CAQD,cAAOE,CAAQ/gB,EAAQyK,EAAM,IACzB,IAAKzK,EACD,OAAO,KACX,IAAIxC,EAAKwC,EACT,GAAIxC,EAAGijB,UAAW,CAEd,MAAMriB,EAAOZ,EAAGijB,UAKhB,OAJIhW,IACArM,EAAKE,KAAO,IAAKF,EAAKE,QAASmM,SACdnN,IAAjBmN,EAAIuW,UACJ5iB,EAAK6iB,KAAKxW,EAAIuW,UACX5iB,CACV,CAGD,IADqB4B,EAAO2W,UAAUqF,SAAS,eAC1BsE,EAAUY,YAC3B,GAAIZ,EAAUY,YACV1jB,EAAK8iB,EAAUY,YAAYlhB,EAAQyK,GAAK,GAAM,OAE7C,CACD,IAAIpN,EAAMD,SAAS+jB,eAAeC,mBAAmB,IACrD/jB,EAAIugB,KAAKyD,UAAY,0BAA0B5W,EAAI6W,OAAS,aAC5D9jB,EAAKH,EAAIugB,KAAKoD,SAAS,GACvBhhB,EAAOQ,YAAYhD,EACtB,CAIL,OADW8iB,EAAUtB,KAAKvU,EAAKjN,EAElC,CAKD,qBAAO+jB,CAAeC,GAClBlB,EAAUkB,YAAcA,CAC3B,CAED,eAAIC,GACA,IAAK/e,KAAKgf,aAAc,CACpB,IAAIC,EAAmBvkB,SAAS+C,cAAc,OAC9CwhB,EAAiBC,UAAY,sBACzBlf,KAAKpE,KAAKyV,kBACV4N,EAAiBN,UAAY3e,KAAKpE,KAAKyV,iBAE3CrR,KAAKgf,aAAetkB,SAAS+C,cAAc,OAC3CuC,KAAKgf,aAAa/K,UAAUC,IAAIlU,KAAKpE,KAAKwV,iBAAkBf,EAAaU,UAAW/Q,KAAKpE,KAAKmV,WAC9F/Q,KAAK+e,YAAYjhB,YAAYmhB,EAChC,CACD,OAAOjf,KAAKgf,YACf,CAMD,WAAAxY,CAAY1L,EAAIc,EAAO,IAEnBoE,KAAKmf,gBAAkB,GAEvBnf,KAAKof,cAAgB,EACrBpf,KAAKlF,GAAKA,EACVc,EAAOA,GAAQ,GACVd,EAAGmZ,UAAUqF,SAAS,eACvBtZ,KAAKlF,GAAGmZ,UAAUC,IAAI,cAGtBtY,EAAK0S,MACL1S,EAAKsV,OAAStV,EAAK+K,OAAS/K,EAAK0S,WAC1B1S,EAAK0S,KAEhB,IAAI+Q,EAAU/kB,EAAM0E,SAASlE,EAAGoiB,aAAa,WAEzB,SAAhBthB,EAAKkB,eACElB,EAAKkB,YAGoBlC,IAAhCgB,EAAK0U,yBACL1U,EAAK0jB,wBAA0B1jB,EAAK0U,wBAGxC,IAAI7Q,EAAW,IAAKnF,EAAM6J,UAAUkM,GAChCvT,OAAQxC,EAAM0E,SAASlE,EAAGoiB,aAAa,eAAiB7M,EAAavT,OACrEoU,OAAQmO,IAAoB/kB,EAAM0E,SAASlE,EAAGoiB,aAAa,gBAAkB7M,EAAaa,QAC1FvK,OAAQ0Y,IAAoB/kB,EAAM0E,SAASlE,EAAGoiB,aAAa,gBAAkB7M,EAAa1J,QAC1F4Y,WAAYjlB,EAAMsE,OAAO9D,EAAGoiB,aAAa,eAAiB7M,EAAakP,WACvE3O,UAAW,CACPC,QAASjV,EAAK4jB,YAAc,IAAM5jB,EAAK4jB,YAAe5jB,EAAKiV,OAASjV,EAAKiV,OAAS,KAAQR,EAAaO,UAAUC,QAErHS,iBAAkB,CACdC,OAAQ3V,EAAKmV,WAAaV,EAAaiB,iBAAiBC,OACxDC,QAASnB,EAAaiB,iBAAiBE,UAG3C1W,EAAGoiB,aAAa,gBAChBzd,EAAS8Q,QAAUjW,EAAMsE,OAAO9D,EAAGoiB,aAAa,gBAEpDld,KAAKpE,KAAOtB,EAAMmF,SAAS7D,EAAM6D,GACjC7D,EAAO,KACPoE,KAAKyf,cAEoB,IAArBzf,KAAKpE,KAAKkB,SAAiBkD,KAAKpE,KAAK8jB,sBAAwB1f,KAAK2f,qBAAuB3f,KAAKpE,KAAKuV,gBACnGnR,KAAK4f,YAAc5f,KAAK6f,YACxB7f,KAAKpE,KAAKkB,OAAS,GAED,SAAlBkD,KAAKpE,KAAK+V,MACV3R,KAAKpE,KAAK+V,IAA8B,QAAvB7W,EAAG0C,MAAMiW,WAE1BzT,KAAKpE,KAAK+V,KACV3R,KAAKlF,GAAGmZ,UAAUC,IAAI,kBAG1B,MAAM4L,EAAc9f,KAAKlF,GAAG2H,eAAeA,cAC3C,IAAIsd,EAAiBD,GAAa7L,UAAUqF,SAASjJ,EAAaU,WAAa+O,EAAYxS,mBAAgB1S,EACvGmlB,IACAA,EAAeC,QAAUhgB,KACzBA,KAAK+f,eAAiBA,EACtB/f,KAAKlF,GAAGmZ,UAAUC,IAAI,qBACtB6L,EAAejlB,GAAGmZ,UAAUC,IAAI,wBAEpClU,KAAKigB,kBAA8C,SAAzBjgB,KAAKpE,KAAK6U,WAChCzQ,KAAKigB,mBAA8C,YAAzBjgB,KAAKpE,KAAK6U,WAEpCzQ,KAAKyQ,gBAAW7V,GAAW,IAIQ,iBAAxBoF,KAAKpE,KAAK6U,YAA0BzQ,KAAKpE,KAAK+U,gBAAkB3Q,KAAKpE,KAAK+U,iBAAmBN,EAAaM,iBACjH3Q,KAAKpE,KAAK6U,WAAazQ,KAAKpE,KAAK6U,WAAazQ,KAAKpE,KAAK+U,sBACjD3Q,KAAKpE,KAAK+U,gBAErB3Q,KAAKyQ,WAAWzQ,KAAKpE,KAAK6U,YAAY,IAGD,WAArCzQ,KAAKpE,KAAK0U,yBACVtQ,KAAKpE,KAAK0U,uBAAyBwB,GAEvC9R,KAAKkgB,iBAAmB,SAAW3Z,EAAgB2E,SACnDlL,KAAKlF,GAAGmZ,UAAUC,IAAIlU,KAAKkgB,kBAC3BlgB,KAAKmgB,kBACL,IAAIrB,EAAc9e,KAAKpE,KAAKkjB,aAAelB,EAAUkB,aAAevY,EA8BpE,GA7BAvG,KAAKogB,OAAS,IAAItB,EAAY,CAC1BhiB,OAAQkD,KAAK6f,YACbhZ,MAAO7G,KAAKpE,KAAKiL,MACjBF,OAAQ3G,KAAKpE,KAAK+K,OAClBG,SAAWuZ,IACP,IAAI5f,EAAO,EACXT,KAAKogB,OAAOxjB,MAAMgD,SAAQnE,IAAOgF,EAAOxD,KAAKC,IAAIuD,EAAMhF,EAAEO,EAAIP,EAAEQ,EAAE,IACjEokB,EAAQzgB,SAAQnE,IACZ,IAAIX,EAAKW,EAAEX,GACNA,IAEDW,EAAE+Q,YACE1R,GACAA,EAAGwD,gBACA7C,EAAE+Q,YAGTxM,KAAKsgB,cAAcxlB,EAAIW,GAC1B,IAELuE,KAAKugB,eAAc,EAAO9f,EAAK,IAGnCT,KAAKpE,KAAK4U,OACVxQ,KAAK+G,cACL/G,KAAKwgB,eAAe5gB,SAAQ9E,GAAMkF,KAAKygB,gBAAgB3lB,KACvDkF,KAAK+G,aAAY,IAGjB/G,KAAKpE,KAAK0iB,SAAU,CACpB,IAAIA,EAAWte,KAAKpE,KAAK0iB,gBAClBte,KAAKpE,KAAK0iB,SACbA,EAASpjB,QACT8E,KAAKue,KAAKD,EACjB,CACDte,KAAK0gB,aAAa1gB,KAAKpE,KAAK2U,SAC5BvQ,KAAKugB,gBACLvgB,KAAKlF,GAAGmZ,UAAUC,IAAI,MAAQlU,KAAKpE,KAAKkB,QAEpCkD,KAAKpE,KAAKqS,iBAAmB4D,EAAUwI,YACvCxI,EAAUwI,WAAY,QACSzf,IAA/BoF,KAAKpE,KAAKgV,WAAW0J,QACrBzI,EAAUwI,UAAYra,KAAKpE,KAAKgV,UAAU0J,OAC9Cta,KAAK2gB,mBACL3gB,KAAK4gB,qBACL5gB,KAAK6gB,oBACR,CAgBD,SAAAC,CAAUtmB,EAAK+C,GAIX,IAAIzC,EACA8F,EACJ,GAAmB,iBAARpG,EAAkB,CACzB,IAAIG,EAAMD,SAAS+jB,eAAeC,mBAAmB,IACrD/jB,EAAIugB,KAAKyD,UAAYnkB,EACrBM,EAAKH,EAAIugB,KAAKoD,SAAS,EAC1B,MACI,GAAyB,IAArByC,UAAU7lB,QAAqC,IAArB6lB,UAAU7lB,cATzBN,KADOuB,EAUoD3B,GATlEM,SAA4BF,IAARuB,EAAED,QAA2BtB,IAARuB,EAAEH,QAA2BpB,IAARuB,EAAEA,QAA2BvB,IAARuB,EAAEF,QAAiCrB,IAAduB,EAAEwR,SAWnH,GADA/M,EAAOrD,EAAU/C,EACboG,GAAM9F,GACNA,EAAK8F,EAAK9F,QAET,GAAI8iB,EAAUY,YACf1jB,EAAK8iB,EAAUY,YAAYxe,KAAKlF,GAAIyC,GAAS,GAAM,OAElD,CACD,IAAIoQ,EAAUpQ,GAASoQ,SAAW,GAC9BhT,EAAMD,SAAS+jB,eAAeC,mBAAmB,IACrD/jB,EAAIugB,KAAKyD,UAAY,+BAA+B3e,KAAKpE,KAAKmV,WAAa,4CAA4CpD,gBACvH7S,EAAKH,EAAIugB,KAAKoD,SAAS,EAC1B,MAGDxjB,EAAKN,EA1BT,IAA2B2B,EA4B3B,IAAKrB,EACD,OAGJ,GADA8F,EAAO9F,EAAGwS,cACN1M,GAAQ9F,EAAG2H,gBAAkBzC,KAAKlF,IAAMkF,KAAKogB,OAAOxjB,MAAMO,MAAK1B,GAAKA,EAAEkN,MAAQ/H,EAAK+H,MACnF,OAAO7N,EAIX,IAAIkmB,EAAUhhB,KAAKihB,UAAUnmB,GAY7B,OAXAyC,EAAUjD,EAAM6J,UAAU5G,IAAY,CAAA,EACtCjD,EAAMmF,SAASlC,EAASyjB,GACxBpgB,EAAOZ,KAAKogB,OAAOpV,YAAYzN,GAC/ByC,KAAKkhB,WAAWpmB,EAAIyC,GAChByC,KAAKmhB,iBACLnhB,KAAKlF,GAAGsmB,QAAQtmB,GAGhBkF,KAAKlF,GAAGgD,YAAYhD,GAExBkF,KAAKqhB,WAAWvmB,EAAIyC,GACbzC,CACV,CASD,WAAAuT,CAAYvT,EAAIwmB,EAAKC,EAAWC,GAAc,GAC1C,IAOIC,EAPA7gB,EAAO9F,EAAGwS,cAId,GAHK1M,IACDA,EAAOZ,KAAKqhB,WAAWvmB,GAAIwS,eAE3B1M,EAAKof,SAASllB,GACd,OAAO8F,EAAKof,QAGhB,IASI0B,EATAhmB,EAAOsE,KACX,KAAOtE,IAAS+lB,GACZA,EAAkB/lB,EAAKE,MAAM+lB,YAC7BjmB,EAAOA,EAAKqkB,gBAAgBrkB,KAGhC4lB,EAAMhnB,EAAM6J,UAAU,IAAMsd,GAAmB,CAAA,EAAKnD,cAAU1jB,KAAe0mB,GAAO1gB,EAAK+gB,cACzF/gB,EAAK+gB,YAAcL,EAGA,SAAfA,EAAIxkB,SACJ4kB,GAAa,EACbJ,EAAIxkB,OAASG,KAAKC,IAAI0D,EAAKzE,GAAK,EAAGolB,GAAWplB,GAAK,GACnDmlB,EAAI5B,sBAAuB,GAG/B,IACIkC,EACAC,EAFAlU,EAAU/M,EAAK9F,GAAGS,cAAc,4BAGpC,GAAIimB,EAAa,CASb,GARAxhB,KAAK8hB,UAAUlhB,EAAK9F,IACpB+mB,EAAa,IAAKjhB,EAAM1E,EAAG,EAAGF,EAAG,GACjC1B,EAAMyG,sBAAsB8gB,UACrBA,EAAWF,YACd/gB,EAAK+M,UACLkU,EAAWlU,QAAU/M,EAAK+M,eACnB/M,EAAK+M,SAEZiQ,EAAUY,YACVoD,EAAUhE,EAAUY,YAAYxe,KAAKlF,GAAI+mB,GAAY,GAAM,OAE1D,CACD,IAAIlnB,EAAMD,SAAS+jB,eAAeC,mBAAmB,IACrD/jB,EAAIugB,KAAKyD,UAAY,sCACrBiD,EAAUjnB,EAAIugB,KAAKoD,SAAS,GAC5BsD,EAAQ9jB,YAAY6P,GACpBhT,EAAIugB,KAAKyD,UAAY,8CACrBhR,EAAUhT,EAAIugB,KAAKoD,SAAS,GAC5B1d,EAAK9F,GAAGgD,YAAY6P,EACvB,CACD3N,KAAK+hB,uBAAuBnhB,EAC/B,CAED,GAAI2gB,EAAW,CACX,IAAIplB,EAAIulB,EAAaJ,EAAIxkB,OAAS8D,EAAKzE,EACnCF,EAAI2E,EAAK3E,EAAIslB,EAAUtlB,EACvBuB,EAAQoD,EAAK9F,GAAG0C,MACpBA,EAAM+d,WAAa,OACnBvb,KAAKgiB,OAAOphB,EAAK9F,GAAI,CAAEqB,IAAGF,MAC1ByF,YAAW,IAAMlE,EAAM+d,WAAa,MACvC,CACD,IAAIyE,EAAUpf,EAAKof,QAAUpC,EAAUS,QAAQ1Q,EAAS2T,GAmBxD,OAlBIC,GAAW5Z,UACXqY,EAAQ9R,SAAU,GAClBwT,IACA1B,EAAQiC,aAAc,GAEtBT,GACAxB,EAAQc,UAAUc,EAASC,GAG3BN,IACIA,EAAU5Z,QAEV5E,OAAOrB,YAAW,IAAMpH,EAAMoL,mBAAmB6b,EAAUW,OAAQ,aAAclC,EAAQllB,KAAK,GAG9FklB,EAAQc,UAAUlgB,EAAK9F,GAAI8F,IAG5Bof,CACV,CAKD,eAAAmC,CAAgBC,GACZ,IAAIC,EAAQriB,KAAK+f,gBAAgBrkB,KAC5B2mB,IAELA,EAAMtb,cACNsb,EAAMC,aAAatiB,KAAK+f,eAAejlB,IAAI,GAAM,GACjDkF,KAAKogB,OAAOxjB,MAAMgD,SAAQnE,IAEtBA,EAAES,GAAK8D,KAAK+f,eAAe7jB,EAC3BT,EAAEO,GAAKgE,KAAK+f,eAAe/jB,EAC3BqmB,EAAMvB,UAAUrlB,EAAEX,GAAIW,EAAE,IAE5B4mB,EAAMtb,aAAY,GACd/G,KAAK+f,uBACE/f,KAAK+f,eAAeC,eACxBhgB,KAAK+f,eAERqC,GACArf,OAAOrB,YAAW,IAAMpH,EAAMoL,mBAAmB0c,EAAgBF,OAAQ,aAAcG,EAAMvnB,KAAK,GAEzG,CAUD,IAAA2T,CAAK+S,GAAc,EAAMe,GAAc,EAAO5T,EAASiP,EAAUjP,QAE7D,IAAI3T,EAAOgF,KAAKogB,OAAO3R,KAAK+S,EAAa7S,GAuBzC,GArBA3T,EAAK4E,SAAQnE,IACT,GAAI+lB,GAAe/lB,EAAEX,KAAOW,EAAEukB,UAAYrR,EAAQ,CAC9C,IAAI6T,EAAM/mB,EAAEX,GAAGS,cAAc,4BAC7BE,EAAEkS,QAAU6U,EAAMA,EAAI7D,eAAY/jB,EAC7Ba,EAAEkS,gBACIlS,EAAEkS,OAChB,MAMG,GAJK6T,GAAgB7S,UACVlT,EAAEkS,QAGTlS,EAAEukB,SAASllB,GAAI,CACf,MAAM2nB,EAAYhnB,EAAEukB,QAAQvR,KAAK+S,EAAae,EAAa5T,GAC3DlT,EAAEkmB,YAAeY,EAAcE,EAAY,CAAEnE,SAAUmE,UAChDhnB,EAAEukB,OACZ,QAEEvkB,EAAEX,EAAE,IAGXynB,EAAa,CACb,IAAIvZ,EAAI1O,EAAM6J,UAAUnE,KAAKpE,MAEzBoN,EAAE0Z,eAAiB1Z,EAAE2Z,WAAa3Z,EAAE4Z,cAAgB5Z,EAAE6Z,YAAc7Z,EAAE2Z,YAAc3Z,EAAE4Z,cACtF5Z,EAAEgI,OAAShI,EAAE2Z,iBACN3Z,EAAE2Z,iBACF3Z,EAAE4Z,mBACF5Z,EAAE0Z,oBACF1Z,EAAE6Z,YAET7Z,EAAE2I,OAAqC,QAA5B3R,KAAKlF,GAAG0C,MAAMiW,aACzBzK,EAAE2I,IAAM,QAER3R,KAAKigB,oBACLjX,EAAEyH,WAAa,QAEfzQ,KAAKiiB,cACLjZ,EAAElM,OAAS,cACJkM,EAAE0W,sBAEb,MAAMoD,EAAW9Z,EAAEsW,wBAUnB,cATOtW,EAAEsW,6BACQ1kB,IAAbkoB,EACA9Z,EAAEsH,uBAAyBwS,SAGpB9Z,EAAEsH,uBAEbhW,EAAMuG,sBAAsBmI,EAAGqH,GAC/BrH,EAAEsV,SAAWtjB,EACNgO,CACV,CACD,OAAOhO,CACV,CAWD,IAAAujB,CAAKwE,EAAOC,EAAYpF,EAAUY,cAAe,GAG7C,MAAMyE,GAFNF,EAAQzoB,EAAM6J,UAAU4e,IAEAlX,MAAK1P,QAAavB,IAARuB,EAAED,QAA2BtB,IAARuB,EAAEH,IACrDinB,IACAF,EAAQzoB,EAAMqC,KAAKomB,GAAQ,EAAG/iB,KAAK4f,aAAe5f,KAAK6f,cAC3D7f,KAAKmhB,iBAAmB8B,EAGxB,MAAMnmB,EAASkD,KAAKpE,KAAKkB,OACrBkD,KAAK4f,aAAe5f,KAAK4f,cAAgB9iB,GAAUimB,EAAMlX,MAAKpQ,IAAOA,EAAES,GAAK,GAAKT,EAAEU,EAAKW,MACxFkD,KAAKkjB,0BAA2B,EAChCljB,KAAKogB,OAAO/Q,YAAY0T,EAAO/iB,KAAK4f,aAAa,IAGrD,MAAMuD,EAASvF,EAAUY,YACE,mBAAvB,IACAZ,EAAUY,YAAcwE,GAC5B,IAAII,EAAU,GAGd,GAFApjB,KAAK+G,cAEDic,EAAW,CACK,IAAIhjB,KAAKogB,OAAOxjB,OACtBgD,SAAQnE,IACd,IAAKA,EAAE2B,GACH,OACO9C,EAAM6C,KAAK4lB,EAAOtnB,EAAE2B,MAEvBwgB,EAAUY,aACVZ,EAAUY,YAAYxe,KAAKlF,GAAIW,GAAG,GAAO,GAC7C2nB,EAAQ3W,KAAKhR,GACbuE,KAAKsiB,aAAa7mB,EAAEX,IAAI,GAAM,GACjC,GAER,CAGD,IAAIuoB,EAAc,GAClBrjB,KAAKogB,OAAOxjB,MAAQoD,KAAKogB,OAAOxjB,MAAMkM,QAAOrN,IACrCnB,EAAM6C,KAAK4lB,EAAOtnB,EAAE2B,MACpBimB,EAAY5W,KAAKhR,IACV,KAIf,IAAI6nB,GAAe,EAwCnB,OAvCAP,EAAMnjB,SAAQzD,IACV,IAAIonB,EAAOjpB,EAAM6C,KAAKkmB,EAAalnB,EAAEiB,IACrC,GAAImmB,GAkBA,GAhBIjpB,EAAMkB,oBAAoB+nB,KAC1BpnB,EAAEF,EAAIsnB,EAAKtnB,GAEf+D,KAAKogB,OAAOjV,aAAahP,IACrBA,EAAE8E,mBAAwBrG,IAARuB,EAAED,QAA2BtB,IAARuB,EAAEH,KACzCG,EAAEA,EAAIA,EAAEA,GAAKonB,EAAKpnB,EAClBA,EAAEF,EAAIE,EAAEF,GAAKsnB,EAAKtnB,EAClB+D,KAAKogB,OAAOrU,kBAAkB5P,IAElCmnB,EAAeA,QAAyB1oB,IAARuB,EAAEA,GAAmBA,EAAEA,IAAMonB,EAAKpnB,EAElE6D,KAAKogB,OAAOxjB,MAAM6P,KAAK8W,GACnBjpB,EAAMoG,QAAQ6iB,EAAMpnB,IACpB6D,KAAKwI,SAAS+a,EAAM,IAAKpnB,EAAG0R,cAAc,IAE9C7N,KAAKgiB,OAAOuB,EAAKzoB,GAAIqB,GACjBA,EAAEwlB,aAAarD,SAAU,CACzB,IAAIkE,EAAMe,EAAKzoB,GAAGS,cAAc,eAC5BinB,GAAOA,EAAIzE,YACXyE,EAAIzE,UAAUQ,KAAKpiB,EAAEwlB,YAAYrD,UACjCte,KAAKmhB,kBAAmB,EAE/B,OAEI6B,GACLhjB,KAAK8gB,UAAU3kB,EAClB,IAEL6D,KAAKogB,OAAO1Z,aAAe0c,EAC3BpjB,KAAKwjB,gBAAgBF,GAAc,GACnCtjB,KAAK+G,aAAY,UAEV/G,KAAKkjB,gCACLljB,KAAKmhB,iBACZgC,EAASvF,EAAUY,YAAc2E,SAAgBvF,EAAUY,YACpDxe,IACV,CAKD,WAAA+G,CAAYC,GAAO,GAQf,OAPAhH,KAAKogB,OAAOrZ,YAAYC,GACnBA,IACDhH,KAAKyjB,yBACLzjB,KAAK0jB,sBACL1jB,KAAK2jB,mBACL3jB,KAAK4jB,uBAEF5jB,IACV,CAID,aAAA6jB,CAAcC,GAAa,GACvB,GAAI9jB,KAAKpE,KAAK6U,YAAuC,SAAzBzQ,KAAKpE,KAAK6U,cAChCqT,IAAe9jB,KAAKpE,KAAK+U,gBAA+C,OAA7B3Q,KAAKpE,KAAK+U,gBACvD,OAAO3Q,KAAKpE,KAAK6U,WAGrB,IAAI3V,EAAKkF,KAAKlF,GAAGS,cAAc,IAAMyE,KAAKpE,KAAKmV,WAC/C,GAAIjW,EAAI,CACJ,IAAImH,EAAS3H,EAAM0E,SAASlE,EAAGoiB,aAAa,UAAY,EACxD,OAAOjgB,KAAKgS,MAAMnU,EAAG0I,aAAevB,EACvC,CAED,IAAI8hB,EAAOC,SAAShkB,KAAKlF,GAAGoiB,aAAa,mBACzC,OAAO6G,EAAO9mB,KAAKgS,MAAMjP,KAAKlF,GAAG+H,wBAAwBZ,OAAS8hB,GAAQ/jB,KAAKpE,KAAK6U,UACvF,CAeD,UAAAA,CAAWrR,EAAK4iB,GAAS,GAYrB,GAVIA,QAAkBpnB,IAARwE,GACNY,KAAKigB,qBAA+B,SAAR7gB,KAC5BY,KAAKigB,kBAA6B,SAAR7gB,EAC1BY,KAAK6gB,sBAGD,YAARzhB,GAA6B,SAARA,IACrBA,OAAMxE,QAGEA,IAARwE,EAAmB,CACnB,IAAI6kB,GAAcjkB,KAAKpE,KAAKgnB,YAAc5iB,KAAKpE,KAAKinB,WAC9C7iB,KAAKpE,KAAK+mB,UAAY3iB,KAAKpE,KAAK8mB,aACtCtjB,EAAMY,KAAKkkB,YAAcD,CAC5B,CACD,IAAIE,EAAO7pB,EAAM6E,YAAYC,GAC7B,OAAIY,KAAKpE,KAAK+U,iBAAmBwT,EAAK9kB,MAAQW,KAAKpE,KAAK6U,aAAe0T,EAAKloB,IAG5E+D,KAAKpE,KAAK+U,eAAiBwT,EAAK9kB,KAChCW,KAAKpE,KAAK6U,WAAa0T,EAAKloB,EAC5B+D,KAAKwjB,iBAAgB,GAAO,GACxBxB,GACAhiB,KAAKugB,eAAc,IANZvgB,IASd,CAED,SAAAkkB,GACI,OAAOlkB,KAAK2f,oBAAsB3f,KAAK6f,WAC1C,CAED,iBAAAF,GAGI,OAAQ3f,KAAKlF,GAAGspB,aAAepkB,KAAKlF,GAAG2H,cAAc2hB,aAAerhB,OAAOshB,UAC9E,CAQD,OAAAla,CAAQC,EAAS,UAAWC,GAAS,GAGjC,OAFArK,KAAKogB,OAAOjW,QAAQC,EAAQC,GAC5BrK,KAAK4jB,sBACE5jB,IACV,CAUD,MAAAlD,CAAOA,EAAQsN,EAAS,aACpB,IAAKtN,GAAUA,EAAS,GAAKkD,KAAKpE,KAAKkB,SAAWA,EAC9C,OAAOkD,KACX,IAaIskB,EAbAC,EAAYvkB,KAAK6f,YAiCrB,OA9Be,IAAX/iB,GAAiBkD,KAAKpE,KAAK8jB,4BAIpB1f,KAAK4f,YAHZ5f,KAAK4f,YAAc2E,EAKvBvkB,KAAKlF,GAAGmZ,UAAU3V,OAAO,MAAQimB,GACjCvkB,KAAKlF,GAAGmZ,UAAUC,IAAI,MAAQpX,GAC9BkD,KAAKpE,KAAKkB,OAASkD,KAAKogB,OAAOtjB,OAASA,EAGzB,IAAXA,GAAgBkD,KAAKpE,KAAK4oB,uBAC1BF,EAAW,GACXtkB,KAAKwgB,eAAe5gB,SAAQ9E,IACpBA,EAAGwS,eACHgX,EAAS7X,KAAK3R,EAAGwS,cACpB,IAEAgX,EAASppB,SACVopB,OAAW1pB,IAGnBoF,KAAKogB,OAAOlR,cAAcqV,EAAWznB,EAAQwnB,EAAUla,GACnDpK,KAAKigB,mBACLjgB,KAAKyQ,aACTzQ,KAAKwjB,kBAELxjB,KAAKkjB,0BAA2B,EAChCljB,KAAK4jB,6BACE5jB,KAAKkjB,yBACLljB,IACV,CAID,SAAA6f,GACI,OAAO7f,KAAKpE,KAAKkB,MACpB,CAED,YAAA0jB,GACI,OAAOrlB,MAAMC,KAAK4E,KAAKlF,GAAGwjB,UACrBxV,QAAQhO,GAAOA,EAAGshB,QAAQ,IAAMpc,KAAKpE,KAAKmV,aAAejW,EAAGshB,QAAQ,IAAMpc,KAAKpE,KAAKwV,mBAC5F,CAKD,OAAAmD,CAAQ5H,GAAY,GAChB,GAAK3M,KAAKlF,GAuBV,OArBAkF,KAAKykB,SACLzkB,KAAK6gB,oBAAmB,GACxB7gB,KAAK0kB,WAAU,GAAM,GACrB1kB,KAAK0gB,cAAa,GACb/T,EAMD3M,KAAKlF,GAAGuD,WAAWqW,YAAY1U,KAAKlF,KALpCkF,KAAK8M,UAAUH,GACf3M,KAAKlF,GAAGmZ,UAAU3V,OAAO0B,KAAKkgB,kBAC9BlgB,KAAKlF,GAAG0J,gBAAgB,mBAK5BxE,KAAK2kB,oBACD3kB,KAAK+f,uBACE/f,KAAK+f,eAAeC,eACxBhgB,KAAK+f,sBACL/f,KAAKpE,YACLoE,KAAKgf,oBACLhf,KAAKogB,cACLpgB,KAAKlF,GAAGijB,iBACR/d,KAAKlF,GACLkF,IACV,CAID,KAAA6G,CAAMzH,GAKF,OAJIY,KAAKpE,KAAKiL,QAAUzH,IACpBY,KAAKpE,KAAKiL,MAAQ7G,KAAKogB,OAAOvZ,MAAQzH,EACtCY,KAAK4jB,uBAEF5jB,IACV,CAID,QAAA4kB,GACI,OAAO5kB,KAAKogB,OAAOvZ,KACtB,CAUD,gBAAAge,CAAiBjjB,EAAUkjB,GAAiB,GACxC,IAEIC,EAFA5Y,EAAMnM,KAAKlF,GAAG+H,wBAIdkiB,EADAD,EACe,CAAE/iB,IAAKoK,EAAIpK,IAAMrH,SAAS0H,gBAAgBmB,UAAWzB,KAAMqK,EAAIrK,MAI/D,CAAEC,IAAK/B,KAAKlF,GAAG8I,UAAW9B,KAAM9B,KAAKlF,GAAG2gB,YAG3D,IAAIuJ,EAAepjB,EAASE,KAAOijB,EAAajjB,KAC5CmjB,EAAcrjB,EAASG,IAAMgjB,EAAahjB,IAC1CmjB,EAAe/Y,EAAInK,MAAQhC,KAAK6f,YAChCsF,EAAahZ,EAAIlK,OAAS+hB,SAAShkB,KAAKlF,GAAGoiB,aAAa,mBAC5D,MAAO,CAAEhhB,EAAGe,KAAKiP,MAAM8Y,EAAeE,GAAclpB,EAAGiB,KAAKiP,MAAM+Y,EAAcE,GACnF,CAED,MAAA9X,GACI,OAAOpQ,KAAKC,IAAI8C,KAAKogB,OAAO/S,SAAUrN,KAAKpE,KAAKsV,OACnD,CAQD,WAAAhH,CAAYhO,EAAGF,EAAGG,EAAGF,GACjB,OAAO+D,KAAKogB,OAAOlW,YAAYhO,EAAGF,EAAGG,EAAGF,EAC3C,CAeD,UAAAolB,CAAW7mB,EAAK+C,GACZ,IAAIzC,EAAK8iB,EAAUviB,WAAWb,GAC9BwF,KAAKygB,gBAAgB3lB,GAAI,EAAMyC,GAC/B,MAAMqD,EAAO9F,EAAGwS,cAehB,OAdAtN,KAAKyjB,yBACLzjB,KAAKwjB,iBAAgB,GAAO,EAAO5iB,GAE/BA,EAAK+gB,aACL3hB,KAAKqO,YAAYvT,EAAI8F,EAAK+gB,iBAAa/mB,GAAW,GAIlDoF,KAAK4f,aAAoC,IAArB5f,KAAKpE,KAAKkB,SAC9BkD,KAAKkjB,0BAA2B,GAEpCljB,KAAK2jB,mBACL3jB,KAAK4jB,6BACE5jB,KAAKkjB,yBACLpoB,CACV,CAiBD,EAAAoa,CAAGL,EAAMM,GAEL,IAA2B,IAAvBN,EAAKyD,QAAQ,KAAa,CAG1B,OAFYzD,EAAKiC,MAAM,KACjBlX,SAAQiV,GAAQ7U,KAAKkV,GAAGL,EAAMM,KAC7BnV,IACV,CACD,GAAa,WAAT6U,GAA8B,UAATA,GAA6B,YAATA,GAA+B,WAATA,GAA8B,YAATA,EAAoB,CAExG,IAAIuQ,EAAmB,WAATvQ,GAA8B,YAATA,EAE/B7U,KAAKmf,gBAAgBtK,GADrBuQ,EAC8BzhB,GAAUwR,EAASxR,GAGnBA,GAAUwR,EAASxR,EAAOA,EAAM0hB,QAElErlB,KAAKlF,GAAGwZ,iBAAiBO,EAAM7U,KAAKmf,gBAAgBtK,GACvD,KACiB,SAATA,GAA4B,cAATA,GAAiC,aAATA,GAAgC,gBAATA,GAAmC,WAATA,GACrF,eAATA,GAAkC,YAATA,GAA+B,kBAATA,EAGlD7U,KAAKmf,gBAAgBtK,GAAQM,EAG7B6I,QAAQsH,IAAI,gBAAkBzQ,EAAO,mHAEzC,OAAO7U,IACV,CAKD,GAAAoV,CAAIP,GAEA,IAA2B,IAAvBA,EAAKyD,QAAQ,KAAa,CAG1B,OAFYzD,EAAKiC,MAAM,KACjBlX,SAAQiV,GAAQ7U,KAAKoV,IAAIP,KACxB7U,IACV,CAQD,MAPa,WAAT6U,GAA8B,UAATA,GAA6B,YAATA,GAA+B,WAATA,GAA8B,YAATA,GAEhF7U,KAAKmf,gBAAgBtK,IACrB7U,KAAKlF,GAAG2Z,oBAAoBI,EAAM7U,KAAKmf,gBAAgBtK,WAGxD7U,KAAKmf,gBAAgBtK,GACrB7U,IACV,CAED,MAAAykB,GAEI,OADAvkB,OAAOC,KAAKH,KAAKmf,iBAAiBvf,SAAQE,GAAOE,KAAKoV,IAAItV,KACnDE,IACV,CAOD,YAAAsiB,CAAa9nB,EAAKmS,GAAY,EAAMC,GAAe,GA0B/C,OAzBAgR,EAAUrjB,YAAYC,GAAKoF,SAAQ9E,IAC/B,GAAIA,EAAG2H,eAAiB3H,EAAG2H,gBAAkBzC,KAAKlF,GAC9C,OACJ,IAAI8F,EAAO9F,EAAGwS,cAET1M,IACDA,EAAOZ,KAAKogB,OAAOxjB,MAAMO,MAAK1B,GAAKX,IAAOW,EAAEX,MAE3C8F,IAEDgd,EAAUY,aACVZ,EAAUY,YAAYxe,KAAKlF,GAAI8F,GAAM,GAAO,UAGzC9F,EAAGwS,cACVtN,KAAK8hB,UAAUhnB,GACfkF,KAAKogB,OAAO1T,WAAW9L,EAAM+L,EAAWC,GACpCD,GAAa7R,EAAG2H,eAChB3H,EAAGwD,SACN,IAEDsO,IACA5M,KAAK0jB,sBACL1jB,KAAK4jB,uBAEF5jB,IACV,CAKD,SAAA8M,CAAUH,GAAY,GAQlB,OANA3M,KAAKogB,OAAOxjB,MAAMgD,SAAQnE,WACfA,EAAEX,GAAGwS,cACZtN,KAAK8hB,UAAUrmB,EAAEX,GAAG,IAExBkF,KAAKogB,OAAOtT,UAAUH,GACtB3M,KAAK0jB,sBACE1jB,IACV,CAKD,YAAA0gB,CAAa6E,GAOT,OANIA,EACAvlB,KAAKlF,GAAGmZ,UAAUC,IAAI,sBAGtBlU,KAAKlF,GAAGmZ,UAAU3V,OAAO,sBAEtB0B,IACV,CAQD,SAAA0kB,CAAUtlB,EAAKomB,GAAc,EAAMC,GAAU,GACzC,QAAMzlB,KAAKpE,KAAK2jB,aAAengB,IAE/BA,EAAMY,KAAKpE,KAAK2jB,YAAa,SAAcvf,KAAKpE,KAAK2jB,WACrDvf,KAAK2gB,mBACL3gB,KAAK4gB,qBACL5gB,KAAKogB,OAAOxjB,MAAMgD,SAAQnE,IACtBuE,KAAK+hB,uBAAuBtmB,GACxBA,EAAEukB,SAAWyF,GACbhqB,EAAEukB,QAAQ0E,UAAUtlB,EAAKomB,EAAaC,EAAQ,IAElDD,GACAxlB,KAAKmgB,mBAVEngB,IAad,CAMD,MAAAgiB,CAAOxnB,EAAKuN,GAER,GAAIgZ,UAAU7lB,OAAS,EAAG,CACtB8iB,QAAQ0H,KAAK,yHAEb,IAAI5pB,EAAIilB,UAAWjgB,EAAI,EAEvB,OADAiH,EAAM,CAAE7L,EAAGJ,EAAEgF,KAAM9E,EAAGF,EAAEgF,KAAM3E,EAAGL,EAAEgF,KAAM7E,EAAGH,EAAEgF,MACvCd,KAAKgiB,OAAOxnB,EAAKuN,EAC3B,CA0DD,OAzDA6V,EAAUrjB,YAAYC,GAAKoF,SAAQ9E,IAC/B,IAAIW,EAAIX,GAAIwS,cACZ,IAAK7R,EACD,OACJ,IAAIU,EAAI7B,EAAM6J,UAAU4D,GACxB/H,KAAKogB,OAAOjV,aAAahP,UAClBA,EAAE8E,oBACF9E,EAAEiB,GAET,IACIuoB,EADAxlB,EAAO,CAAC,IAAK,IAAK,IAAK,KAc3B,GAZIA,EAAK0L,MAAKvH,QAAc1J,IAATuB,EAAEmI,IAAoBnI,EAAEmI,KAAO7I,EAAE6I,OAChDqhB,EAAI,CAAA,EACJxlB,EAAKP,SAAQ0E,IACTqhB,EAAErhB,QAAe1J,IAATuB,EAAEmI,GAAoBnI,EAAEmI,GAAK7I,EAAE6I,UAChCnI,EAAEmI,EAAE,MAIdqhB,IAAMxpB,EAAEmE,MAAQnE,EAAEoE,MAAQpE,EAAEqE,MAAQrE,EAAEsE,QACvCklB,EAAI,CAAA,QAGU/qB,IAAduB,EAAEwR,QAAuB,CACzB,MAAMiY,EAAc9qB,EAAGS,cAAc,4BACjCqqB,GAAeA,EAAYjH,YAAcxiB,EAAEwR,UAC3CiY,EAAYjH,UAAYxiB,EAAEwR,QAEtBlS,EAAEukB,SAASllB,KACX8qB,EAAY9nB,YAAYrC,EAAEukB,QAAQllB,IAC7BW,EAAEukB,QAAQpkB,KAAKiqB,aAChBpqB,EAAEukB,QAAQO,eAAc,YAG7BpkB,EAAEwR,OACZ,CAED,IAAImY,GAAU,EACVC,GAAY,EAChB,IAAK,MAAMjmB,KAAO3D,EACC,MAAX2D,EAAI,IAAcrE,EAAEqE,KAAS3D,EAAE2D,KAC/BrE,EAAEqE,GAAO3D,EAAE2D,GACXgmB,GAAU,EACVC,EAAYA,IAAe/lB,KAAKpE,KAAK2jB,aAAuB,aAARzf,GAA8B,WAARA,GAA4B,WAARA,IAGtGxF,EAAMqG,eAAelF,GAEjBkqB,GACA3lB,KAAKwI,SAAS/M,EAAGkqB,IACjBA,GAAKG,IACL9lB,KAAKkhB,WAAWpmB,EAAIW,GAEpBsqB,GACA/lB,KAAK+hB,uBAAuBtmB,EAC/B,IAEEuE,IACV,CACD,QAAAwI,CAAS/M,EAAGkqB,GACR3lB,KAAKogB,OAAOhZ,aACPmH,YAAY9S,GACZ+M,SAAS/M,EAAGkqB,GACjB3lB,KAAKyjB,yBACLzjB,KAAK4jB,sBACL5jB,KAAKogB,OAAO5R,WACf,CAMD,eAAAwX,CAAgBlrB,EAAImrB,GAAc,GAC9B,IAAKnrB,EACD,OAEJ,GADAA,EAAGmZ,UAAU3V,OAAO,wBACfxD,EAAGmI,aACJ,OACJ,IAAIxH,EAAIX,EAAGwS,cACX,IAAK7R,EACD,OACJ,MAAMC,EAAOD,EAAEC,KACf,IAAKA,EACD,OACJ,GAAIZ,EAAG2H,gBAAkB/G,EAAKZ,GAC1B,OACJ,MAAMorB,EAAOxqB,EAAKmoB,gBAClB,IAAKqC,EACD,OACJ,IACI3C,EADAthB,EAASgkB,GAAexqB,EAAEQ,EAAIR,EAAEQ,EAAIiqB,EAAOprB,EAAGmI,aAMlD,GAJIxH,EAAE0qB,wBACF5C,EAAOzoB,EAAGS,cAAcE,EAAE0qB,wBACzB5C,IACDA,EAAOzoB,EAAGS,cAAcqiB,EAAUuI,yBACjC5C,EACD,OACJ,MAAM6C,EAAUtrB,EAAGmI,aAAesgB,EAAKtgB,aACjCojB,EAAQJ,GAAexqB,EAAEQ,EAAIR,EAAEQ,EAAIiqB,EAAOE,EAAU7C,EAAKtgB,aAC/D,IAAIqjB,EACJ,GAAI7qB,EAAEukB,QAEFsG,EAAU7qB,EAAEukB,QAAQ3S,SAAW5R,EAAEukB,QAAQ6D,oBAExC,CAED,MAAM0C,EAAQhD,EAAKiD,kBACnB,IAAKD,EAED,YADAvI,QAAQsH,IAAI,6BAA6B1H,EAAUuI,8GAGvDG,EAAUC,EAAM1jB,wBAAwBZ,QAAUokB,CACrD,CACD,GAAIA,IAAUC,EACV,OACJrkB,GAAUqkB,EAAUD,EACpB,IAAIpqB,EAAIgB,KAAKwpB,KAAKxkB,EAASikB,GAE3B,MAAMQ,EAAUxnB,OAAOqb,UAAU9e,EAAEE,eAAiBF,EAAEE,cAAgB,EAClE+qB,GAAWzqB,EAAIyqB,IACfzqB,EAAIyqB,EACJ5rB,EAAGmZ,UAAUC,IAAI,wBAEjBzY,EAAE8E,MAAQtE,EAAIR,EAAE8E,KAChBtE,EAAIR,EAAE8E,KACD9E,EAAEgF,MAAQxE,EAAIR,EAAEgF,OACrBxE,EAAIR,EAAEgF,MACNxE,IAAMR,EAAEQ,IACRP,EAAKwnB,0BAA2B,EAChCxnB,EAAK8M,SAAS/M,EAAG,CAAEQ,aACZP,EAAKwnB,yBAEnB,CAED,oBAAAyD,CAAqB7rB,EAAI8rB,GAAU,GAC3BhJ,EAAUiJ,kBACVjJ,EAAUiJ,kBAAkB/rB,EAAI8rB,GAEhC5mB,KAAKgmB,gBAAgBlrB,EAAI8rB,EAChC,CAKD,MAAA5V,CAAO/R,GAGH,KAFqC,iBAAVA,GAAsBA,EAAM6X,MAAM,KAAK5b,OAAS,GAExD,CACf,IAAIipB,EAAO7pB,EAAM6E,YAAYF,GAC7B,GAAIe,KAAKpE,KAAKqV,aAAekT,EAAK9kB,MAAQW,KAAKpE,KAAKoV,SAAWmT,EAAKloB,EAChE,MACP,CAMD,OAJA+D,KAAKpE,KAAKoV,OAAS/R,EACnBe,KAAKpE,KAAK+mB,UAAY3iB,KAAKpE,KAAK8mB,aAAe1iB,KAAKpE,KAAKinB,WAAa7iB,KAAKpE,KAAKgnB,iBAAchoB,EAC9FoF,KAAKyf,cACLzf,KAAKugB,eAAc,GACZvgB,IACV,CAED,SAAA8mB,GAAc,OAAO9mB,KAAKpE,KAAKoV,MAAS,CAaxC,SAAAxD,CAAU5M,GAEN,GAAImgB,UAAU7lB,OAAS,EAAG,CACtB8iB,QAAQ0H,KAAK,uHAEb,IAAI5pB,EAAIilB,UAAWjgB,EAAI,EAAG3E,EAAI,CAAED,EAAGJ,EAAEgF,KAAM9E,EAAGF,EAAEgF,KAAM3E,EAAGL,EAAEgF,KAAM7E,EAAGH,EAAEgF,KAAMG,aAAcnF,EAAEgF,MAC5F,OAAOd,KAAKwN,UAAUrR,EACzB,CACD,OAAO6D,KAAKogB,OAAO5S,UAAU5M,EAChC,CAED,mBAAAgjB,GACI,GAAI5jB,KAAKogB,OAAOlZ,UACZ,OAAOlH,KACX,IAAI+mB,EAAW/mB,KAAKogB,OAAO5U,eAAc,GAQzC,OAPIub,GAAYA,EAAS7rB,SAChB8E,KAAKkjB,0BACNljB,KAAKogB,OAAOrR,mBAAmBgY,GAEnC/mB,KAAK4U,cAAc,SAAUmS,IAEjC/mB,KAAKogB,OAAO/Y,cACLrH,IACV,CAED,gBAAA2jB,GACI,OAAI3jB,KAAKogB,OAAOlZ,WAEZlH,KAAKogB,OAAO3Z,YAAYvL,SACnB8E,KAAKkjB,0BACNljB,KAAKogB,OAAOrR,mBAAmB/O,KAAKogB,OAAO3Z,YAG/CzG,KAAKogB,OAAO3Z,WAAW7G,SAAQnE,WAAcA,EAAEsO,MAAM,IACrD/J,KAAK4U,cAAc,QAAS5U,KAAKogB,OAAO3Z,YACxCzG,KAAKogB,OAAO3Z,WAAa,IARlBzG,IAWd,CAED,mBAAA0jB,GACI,OAAI1jB,KAAKogB,OAAOlZ,WAEZlH,KAAKogB,OAAO1Z,cAAcxL,SAC1B8E,KAAK4U,cAAc,UAAW5U,KAAKogB,OAAO1Z,cAC1C1G,KAAKogB,OAAO1Z,aAAe,IAHpB1G,IAMd,CAED,aAAA4U,CAAc1P,EAAMif,GAChB,IAAIxgB,EAAQwgB,EAAO,IAAI6C,YAAY9hB,EAAM,CAAEI,SAAS,EAAO+f,OAAQlB,IAAU,IAAI8C,MAAM/hB,GAEvF,OADAlF,KAAKlF,GAAGwL,cAAc3C,GACf3D,IACV,CAED,iBAAA2kB,GAKI,OAJI3kB,KAAKknB,UACL5sB,EAAM8D,iBAAiB4B,KAAKkgB,yBACrBlgB,KAAKknB,SAETlnB,IACV,CAED,aAAAugB,CAAc4G,GAAc,EAAO1mB,GAS/B,GAPI0mB,GACAnnB,KAAK2kB,oBAEJlkB,IACDA,EAAOT,KAAKqN,UAChBrN,KAAKyjB,yBAEwB,IAAzBzjB,KAAKpE,KAAK6U,WACV,OAAOzQ,KAEX,IAAIyQ,EAAazQ,KAAKpE,KAAK6U,WACvBE,EAAiB3Q,KAAKpE,KAAK+U,eAC3BwD,EAAS,IAAInU,KAAKkgB,uBAAuBlgB,KAAKpE,KAAKmV,YAEvD,IAAK/Q,KAAKknB,QAAS,CAEf,IAAIE,EAAgBpnB,KAAKpE,KAAKiqB,iBAAcjrB,EAAYoF,KAAKlF,GAAGuD,WAIhE,GAHA2B,KAAKknB,QAAU5sB,EAAM+C,iBAAiB2C,KAAKkgB,iBAAkBkH,EAAe,CACxE1pB,MAAOsC,KAAKpE,KAAK8B,SAEhBsC,KAAKknB,QACN,OAAOlnB,KACXA,KAAKknB,QAAQG,KAAO,EAEpB/sB,EAAMiE,WAAWyB,KAAKknB,QAAS/S,EAAQ,WAAW1D,IAAaE,KAE/D,IAAI5O,EAAM/B,KAAKpE,KAAK+mB,UAAY3iB,KAAKpE,KAAKqV,WACtC/N,EAASlD,KAAKpE,KAAK8mB,aAAe1iB,KAAKpE,KAAKqV,WAC5CpH,EAAQ7J,KAAKpE,KAAKgnB,YAAc5iB,KAAKpE,KAAKqV,WAC1CnP,EAAO9B,KAAKpE,KAAKinB,WAAa7iB,KAAKpE,KAAKqV,WACxCtD,EAAU,GAAGwG,+BACb4K,EAAc,IAAI/e,KAAKkgB,oEAC3B5lB,EAAMiE,WAAWyB,KAAKknB,QAASvZ,EAAS,QAAQ5L,aAAe8H,cAAkB3G,YAAiBpB,MAClGxH,EAAMiE,WAAWyB,KAAKknB,QAASnI,EAAa,QAAQhd,aAAe8H,cAAkB3G,YAAiBpB,MAEtGxH,EAAMiE,WAAWyB,KAAKknB,QAAS,GAAG/S,uBAA6B,UAAUtK,KACzEvP,EAAMiE,WAAWyB,KAAKknB,QAAS,GAAG/S,sBAA4B,UAAUtK,KACxEvP,EAAMiE,WAAWyB,KAAKknB,QAAS,GAAG/S,uBAA6B,UAAUtK,cAAkB3G,KAC3F5I,EAAMiE,WAAWyB,KAAKknB,QAAS,GAAG/S,uBAA6B,SAASrS,KACxExH,EAAMiE,WAAWyB,KAAKknB,QAAS,GAAG/S,sBAA4B,SAASrS,KACvExH,EAAMiE,WAAWyB,KAAKknB,QAAS,GAAG/S,uBAA6B,SAASrS,cAAiBoB,IAC5F,CAGD,IADAzC,EAAOA,GAAQT,KAAKknB,QAAQG,MACjBrnB,KAAKknB,QAAQG,KAAM,CAC1B,IAAIC,EAAavD,GAAUtT,EAAasT,EAAQpT,EAChD,IAAK,IAAI7P,EAAId,KAAKknB,QAAQG,KAAO,EAAGvmB,GAAKL,EAAMK,IAC3CxG,EAAMiE,WAAWyB,KAAKknB,QAAS,GAAG/S,WAAgBrT,MAAO,QAAQwmB,EAAUxmB,MAC3ExG,EAAMiE,WAAWyB,KAAKknB,QAAS,GAAG/S,WAAgBrT,EAAI,MAAO,WAAWwmB,EAAUxmB,EAAI,MAE1Fd,KAAKknB,QAAQG,KAAO5mB,CACvB,CACD,OAAOT,IACV,CAED,sBAAAyjB,GACI,IAAKzjB,KAAKogB,QAAUpgB,KAAKogB,OAAOlZ,UAC5B,OAAOlH,KACX,MAAM1C,EAAS0C,KAAK+f,eACpB,IAAIzR,EAAMtO,KAAKqN,SAAWrN,KAAKof,cAC/B,MAAM3O,EAAazQ,KAAKpE,KAAK6U,WACvBpR,EAAOW,KAAKpE,KAAK+U,eACvB,IAAKF,EACD,OAAOzQ,KAEX,IAAK1C,EAAQ,CACT,MAAMiqB,EAAejtB,EAAM6E,YAAYkD,iBAAiBrC,KAAKlF,IAAe,WAC5E,GAAIysB,EAAatrB,EAAI,GAAKsrB,EAAaloB,OAASA,EAAM,CAClD,MAAM6R,EAASjU,KAAKiP,MAAMqb,EAAatrB,EAAIwU,GACvCnC,EAAM4C,IACN5C,EAAM4C,EAEb,CACJ,CAYD,OAXAlR,KAAKlF,GAAG6C,aAAa,iBAAkB6pB,OAAOlZ,IAC9CtO,KAAKlF,GAAG0C,MAAMqE,eAAe,cAC7B7B,KAAKlF,GAAG0C,MAAMqE,eAAe,UACzByM,IAEAtO,KAAKlF,GAAG0C,MAAMF,EAAS,YAAc,UAAYgR,EAAMmC,EAAapR,GAGpE/B,IAAWA,EAAO5B,KAAK0kB,OAAOlZ,WAAa5M,EAAMkB,oBAAoB8B,IACrEA,EAAO5B,KAAKirB,qBAAqBrpB,EAAOxC,IAErCkF,IACV,CAED,eAAAygB,CAAgB3lB,EAAIsR,GAAkB,EAAOxL,GACzC9F,EAAGmZ,UAAUC,IAAIlU,KAAKpE,KAAKmV,WAC3BnQ,EAAOA,GAAQZ,KAAKihB,UAAUnmB,GAC9BA,EAAGwS,cAAgB1M,EACnBA,EAAK9F,GAAKA,EACV8F,EAAKlF,KAAOsE,KACZ,IAAIsL,EAAO,IAAK1K,GAShB,OARAA,EAAOZ,KAAKogB,OAAOxV,QAAQhK,EAAMwL,GAE5B9R,EAAM2F,KAAKW,EAAM0K,IAClBtL,KAAKkhB,WAAWpmB,EAAI8F,GAEpBtG,EAAMkB,oBAAoBoF,IAC1B9F,EAAGmZ,UAAUC,IAAI,mBACrBlU,KAAK+hB,uBAAuBnhB,GACrBZ,IACV,CAED,aAAAsgB,CAAcxlB,EAAIW,GASd,YARYb,IAARa,EAAES,GAA2B,OAART,EAAES,GACvBpB,EAAG6C,aAAa,OAAQ6pB,OAAO/rB,EAAES,SAEzBtB,IAARa,EAAEO,GAA2B,OAARP,EAAEO,GACvBlB,EAAG6C,aAAa,OAAQ6pB,OAAO/rB,EAAEO,IAErCP,EAAEU,EAAI,EAAIrB,EAAG6C,aAAa,OAAQ6pB,OAAO/rB,EAAEU,IAAMrB,EAAG0J,gBAAgB,QACpE/I,EAAEQ,EAAI,EAAInB,EAAG6C,aAAa,OAAQ6pB,OAAO/rB,EAAEQ,IAAMnB,EAAG0J,gBAAgB,QAC7DxE,IACV,CAED,UAAAkhB,CAAWpmB,EAAI8F,GACX,IAAKA,EACD,OAAOZ,KACXA,KAAKsgB,cAAcxlB,EAAI8F,GACvB,IAAI6mB,EAA2C,CAC3CxmB,aAAc,mBACdC,SAAU,eACVC,OAAQ,aACRC,OAAQ,YACRhE,GAAI,SAER,IAAK,MAAM0C,KAAO2nB,EACV7mB,EAAKd,GACLhF,EAAG6C,aAAa8pB,EAAM3nB,GAAM0nB,OAAO5mB,EAAKd,KAGxChF,EAAG0J,gBAAgBijB,EAAM3nB,IAGjC,OAAOE,IACV,CAED,SAAAihB,CAAUnmB,EAAI4sB,GAAmB,GAC7B,IAAIjsB,EAAI,CAAA,EACRA,EAAES,EAAI5B,EAAM0E,SAASlE,EAAGoiB,aAAa,SACrCzhB,EAAEO,EAAI1B,EAAM0E,SAASlE,EAAGoiB,aAAa,SACrCzhB,EAAEU,EAAI7B,EAAM0E,SAASlE,EAAGoiB,aAAa,SACrCzhB,EAAEQ,EAAI3B,EAAM0E,SAASlE,EAAGoiB,aAAa,SACrCzhB,EAAEwF,aAAe3G,EAAMsE,OAAO9D,EAAGoiB,aAAa,qBAC9CzhB,EAAEyF,SAAW5G,EAAMsE,OAAO9D,EAAGoiB,aAAa,iBAC1CzhB,EAAE0F,OAAS7G,EAAMsE,OAAO9D,EAAGoiB,aAAa,eACxCzhB,EAAE2F,OAAS9G,EAAMsE,OAAO9D,EAAGoiB,aAAa,cACxCzhB,EAAE2B,GAAKtC,EAAGoiB,aAAa,SAEvBzhB,EAAE+E,KAAOlG,EAAM0E,SAASlE,EAAGoiB,aAAa,aACxCzhB,EAAE6E,KAAOhG,EAAM0E,SAASlE,EAAGoiB,aAAa,aACxCzhB,EAAEgF,KAAOnG,EAAM0E,SAASlE,EAAGoiB,aAAa,aACxCzhB,EAAE8E,KAAOjG,EAAM0E,SAASlE,EAAGoiB,aAAa,aAEpCwK,IACY,IAARjsB,EAAEU,GACFrB,EAAG0J,gBAAgB,QACX,IAAR/I,EAAEQ,GACFnB,EAAG0J,gBAAgB,QACnB/I,EAAE+E,MACF1F,EAAG0J,gBAAgB,YACnB/I,EAAE6E,MACFxF,EAAG0J,gBAAgB,YACnB/I,EAAEgF,MACF3F,EAAG0J,gBAAgB,YACnB/I,EAAE8E,MACFzF,EAAG0J,gBAAgB,aAG3B,IAAK,MAAM1E,KAAOrE,EAAG,CACjB,IAAKA,EAAEsE,eAAeD,GAClB,OACCrE,EAAEqE,IAAmB,IAAXrE,EAAEqE,WACNrE,EAAEqE,EAEhB,CACD,OAAOrE,CACV,CAED,eAAA0kB,GACI,IAAIwH,EAAU,CAAC,qBASf,OARI3nB,KAAKpE,KAAK2jB,YACVvf,KAAKlF,GAAGmZ,UAAUC,OAAOyT,GACzB3nB,KAAKlF,GAAG6C,aAAa,YAAa,UAGlCqC,KAAKlF,GAAGmZ,UAAU3V,UAAUqpB,GAC5B3nB,KAAKlF,GAAG0J,gBAAgB,cAErBxE,IACV,CAMD,QAAA4nB,GACI,IAAK5nB,KAAKlF,IAAIspB,YACV,OACJ,GAAIpkB,KAAK6nB,YAAc7nB,KAAKlF,GAAGspB,YAC3B,OACJpkB,KAAK6nB,UAAY7nB,KAAKlF,GAAGspB,YAEzBpkB,KAAK+G,cAEL,IAAImI,GAAgB,EACpB,GAAIlP,KAAKiiB,aAAejiB,KAAK+f,eACrB/f,KAAKpE,KAAKkB,SAAWkD,KAAK+f,eAAe5jB,IACzC6D,KAAKlD,OAAOkD,KAAK+f,eAAe5jB,EAAG,QACnC+S,GAAgB,OAGnB,CAED,IAAI4Y,GAAa9nB,KAAKpE,KAAK8jB,sBAAwB1f,KAAKlF,GAAGspB,aAAepkB,KAAKpE,KAAKuV,eAC1D,IAArBnR,KAAKpE,KAAKkB,SAAiBkD,KAAK4f,YACX,IAArB5f,KAAKpE,KAAKkB,SAAkBgrB,IAE7B9nB,KAAKlD,OAAOgrB,EAAY,EAAI9nB,KAAK4f,aAEjC1Q,GAAgB,EAEvB,CAaD,OAXIlP,KAAKigB,mBACLjgB,KAAKyQ,aAETzQ,KAAKogB,OAAOxjB,MAAMgD,SAAQnE,IAClBA,EAAEukB,SACFvkB,EAAEukB,QAAQ4H,UAAU,IAEvB5nB,KAAK+nB,oBACN/nB,KAAKwjB,gBAAgBtU,UAClBlP,KAAK+nB,mBACZ/nB,KAAK+G,aAAY,GACV/G,IACV,CACD,eAAAwjB,CAAgBjiB,GAAQ,EAAMqlB,GAAU,EAAOnrB,OAAIb,GAG/C8G,YAAW,KACP,GAAK1B,KAAKogB,OAAV,CAEA,GAAI3kB,EACInB,EAAMkB,oBAAoBC,IAC1BuE,KAAK2mB,qBAAqBlrB,EAAEX,GAAI8rB,QAEnC,GAAI5mB,KAAKogB,OAAOxjB,MAAMiP,MAAKpQ,GAAKnB,EAAMkB,oBAAoBC,KAAK,CAChE,MAAMmB,EAAQ,IAAIoD,KAAKogB,OAAOxjB,OAC9BoD,KAAK+G,cACLnK,EAAMgD,SAAQnE,IACNnB,EAAMkB,oBAAoBC,IAC1BuE,KAAK2mB,qBAAqBlrB,EAAEX,GAAI8rB,EAAQ,IAEhD5mB,KAAK+G,aAAY,EACpB,CAEG/G,KAAKmf,gBAA+B,eACpCnf,KAAKmf,gBAA+B,cAAE,KAAM1jB,EAAI,CAACA,GAAKuE,KAAKogB,OAAOxjB,MAhB3D,CAgBiE,GAC7E2E,EAAQ,IAAW,EACzB,CAED,kBAAAsf,CAAmBmH,GAAc,GAG7B,MAAMC,GAAajoB,KAAK+f,iBAAmB/f,KAAKigB,mBAAqBjgB,KAAKpE,KAAKD,gBAAkBqE,KAAKpE,KAAK8jB,sBACpG1f,KAAKogB,OAAOxjB,MAAMO,MAAK1B,GAAKA,EAAEE,iBAYrC,OAXKqsB,IAAeC,GAAcjoB,KAAKkoB,gBAM7BF,GAAgBC,IAAcjoB,KAAKkoB,iBACzCloB,KAAKkoB,eAAeC,oBACbnoB,KAAKkoB,sBACLloB,KAAKooB,gBARZpoB,KAAKooB,cAAgB9tB,EAAM+G,UAAS,IAAMrB,KAAK4nB,YAAY5nB,KAAKpE,KAAK8U,oBACrE1Q,KAAKkoB,eAAiB,IAAIG,gBAAe,IAAMroB,KAAKooB,kBACpDpoB,KAAKkoB,eAAeI,QAAQtoB,KAAKlF,IACjCkF,KAAK+nB,oBAAqB,GAOvB/nB,IACV,CAED,iBAAO3E,CAAWb,EAAM,oBAAsB,OAAOF,EAAMe,WAAWb,EAAO,CAE7E,kBAAOD,CAAYC,EAAM,oBAAsB,OAAOF,EAAMC,YAAYC,EAAO,CAE/E,qBAAOsjB,CAAetjB,GAAO,OAAOojB,EAAUviB,WAAWb,EAAO,CAEhE,sBAAO4jB,CAAgB5jB,GAAO,OAAOF,EAAMC,YAAYC,EAAO,CAE9D,WAAAilB,GACI,IAAI0E,EACAnT,EAAS,EAETuX,EAAU,GAwDd,MAvDgC,iBAArBvoB,KAAKpE,KAAKoV,SACjBuX,EAAUvoB,KAAKpE,KAAKoV,OAAO8F,MAAM,MAEd,IAAnByR,EAAQrtB,QACR8E,KAAKpE,KAAK+mB,UAAY3iB,KAAKpE,KAAK8mB,aAAe6F,EAAQ,GACvDvoB,KAAKpE,KAAKinB,WAAa7iB,KAAKpE,KAAKgnB,YAAc2F,EAAQ,IAE/B,IAAnBA,EAAQrtB,QACb8E,KAAKpE,KAAK+mB,UAAY4F,EAAQ,GAC9BvoB,KAAKpE,KAAKgnB,YAAc2F,EAAQ,GAChCvoB,KAAKpE,KAAK8mB,aAAe6F,EAAQ,GACjCvoB,KAAKpE,KAAKinB,WAAa0F,EAAQ,KAG/BpE,EAAO7pB,EAAM6E,YAAYa,KAAKpE,KAAKoV,QACnChR,KAAKpE,KAAKqV,WAAakT,EAAK9kB,KAC5B2R,EAAShR,KAAKpE,KAAKoV,OAASmT,EAAKloB,QAGTrB,IAAxBoF,KAAKpE,KAAK+mB,UACV3iB,KAAKpE,KAAK+mB,UAAY3R,GAGtBmT,EAAO7pB,EAAM6E,YAAYa,KAAKpE,KAAK+mB,WACnC3iB,KAAKpE,KAAK+mB,UAAYwB,EAAKloB,SACpB+D,KAAKpE,KAAKoV,aAEUpW,IAA3BoF,KAAKpE,KAAK8mB,aACV1iB,KAAKpE,KAAK8mB,aAAe1R,GAGzBmT,EAAO7pB,EAAM6E,YAAYa,KAAKpE,KAAK8mB,cACnC1iB,KAAKpE,KAAK8mB,aAAeyB,EAAKloB,SACvB+D,KAAKpE,KAAKoV,aAESpW,IAA1BoF,KAAKpE,KAAKgnB,YACV5iB,KAAKpE,KAAKgnB,YAAc5R,GAGxBmT,EAAO7pB,EAAM6E,YAAYa,KAAKpE,KAAKgnB,aACnC5iB,KAAKpE,KAAKgnB,YAAcuB,EAAKloB,SACtB+D,KAAKpE,KAAKoV,aAEQpW,IAAzBoF,KAAKpE,KAAKinB,WACV7iB,KAAKpE,KAAKinB,WAAa7R,GAGvBmT,EAAO7pB,EAAM6E,YAAYa,KAAKpE,KAAKinB,YACnC7iB,KAAKpE,KAAKinB,WAAasB,EAAKloB,SACrB+D,KAAKpE,KAAKoV,QAErBhR,KAAKpE,KAAKqV,WAAakT,EAAK9kB,KACxBW,KAAKpE,KAAK+mB,YAAc3iB,KAAKpE,KAAK8mB,cAAgB1iB,KAAKpE,KAAKinB,aAAe7iB,KAAKpE,KAAKgnB,aAAe5iB,KAAKpE,KAAK+mB,YAAc3iB,KAAKpE,KAAKgnB,cACtI5iB,KAAKpE,KAAKoV,OAAShR,KAAKpE,KAAK+mB,WAE1B3iB,IACV,CAOD,YAAOwoB,GACH,OAAOzL,CACV,CASD,kBAAO0L,CAAYtL,EAAQuL,EAAejuB,EAAOC,eAChBE,IAAzB8tB,GAAepO,QACfzI,EAAUwI,UAAYqO,EAAcpO,OAExCoO,EAAgB,IAAK9W,KAA0B8W,GAAiB,CAAA,GAChE,IAAIluB,EAAyB,iBAAX2iB,EAAuB7iB,EAAMC,YAAY4iB,EAAQ1iB,GAAQ0iB,EACvE3iB,EAAIU,QACJV,GAAKoF,SAAQ9E,IACJiiB,EAAGQ,YAAYziB,IAChBiiB,EAAGI,OAAOriB,EAAI4tB,EAAc,GAE3C,CAOD,OAAAC,CAAQnuB,EAAK4E,GACT,OAAIY,KAAKpE,KAAK2jB,YAEd3B,EAAUrjB,YAAYC,GAAKoF,SAAQ9E,IAC/B,IAAIW,EAAIX,EAAGwS,cACN7R,IAEL2D,SAAa3D,EAAE0F,OAAS1F,EAAE0F,QAAS,EACnCnB,KAAK+hB,uBAAuBtmB,GAAE,IANvBuE,IASd,CAMD,SAAAyR,CAAUjX,EAAK4E,GACX,OAAIY,KAAKpE,KAAK2jB,YAEd3B,EAAUrjB,YAAYC,GAAKoF,SAAQ9E,IAC/B,IAAIW,EAAIX,EAAGwS,cACN7R,IAEL2D,SAAa3D,EAAEyF,SAAWzF,EAAEyF,UAAW,EACvClB,KAAK+hB,uBAAuBtmB,GAAE,IANvBuE,IASd,CAWD,OAAAsV,CAAQmQ,GAAU,GACd,IAAIzlB,KAAKpE,KAAK2jB,WAKd,OAHAvf,KAAK4oB,YAAW,EAAOnD,GACvBzlB,KAAK6oB,cAAa,EAAOpD,GACzBzlB,KAAK4U,cAAc,WACZ5U,IACV,CAUD,MAAAqV,CAAOoQ,GAAU,GACb,IAAIzlB,KAAKpE,KAAK2jB,WAKd,OAHAvf,KAAK4oB,YAAW,EAAMnD,GACtBzlB,KAAK6oB,cAAa,EAAMpD,GACxBzlB,KAAK4U,cAAc,UACZ5U,IACV,CAKD,UAAA4oB,CAAWE,EAAUrD,GAAU,GAC3B,OAAIzlB,KAAKpE,KAAK2jB,aAEduJ,SAAkB9oB,KAAKpE,KAAKmtB,YAAc/oB,KAAKpE,KAAKmtB,aAAc,EAClE/oB,KAAKogB,OAAOxjB,MAAMgD,SAAQnE,IACtBuE,KAAK+hB,uBAAuBtmB,GACxBA,EAAEukB,SAAWyF,GACbhqB,EAAEukB,QAAQ4I,WAAWE,EAAUrD,EAAQ,KALpCzlB,IAQd,CAKD,YAAA6oB,CAAaC,EAAUrD,GAAU,GAC7B,OAAIzlB,KAAKpE,KAAK2jB,aAEduJ,SAAkB9oB,KAAKpE,KAAKotB,cAAgBhpB,KAAKpE,KAAKotB,eAAgB,EACtEhpB,KAAKogB,OAAOxjB,MAAMgD,SAAQnE,IACtBuE,KAAK+hB,uBAAuBtmB,GACxBA,EAAEukB,SAAWyF,GACbhqB,EAAEukB,QAAQ6I,aAAaC,EAAUrD,EAAQ,KALtCzlB,IAQd,CAED,SAAA8hB,CAAUhnB,GAMN,OALAiiB,EAAGnM,UAAU9V,EAAI,WAAW2W,UAAU3W,EAAI,WACtCA,EAAGwS,sBACIxS,EAAGwS,cAAc2b,eAErBnuB,EAAG0f,UACHxa,IACV,CAED,kBAAA4gB,GAEI,GAAI5gB,KAAKpE,KAAK2jB,aAAgBvf,KAAKpE,KAAKstB,gBAAkBlpB,KAAKpE,KAAKutB,UAEhE,OADApM,EAAGK,UAAUpd,KAAKlF,GAAI,WACfkF,KAGX,IAAIyQ,EAAYyT,EACZkF,EAAS,CAACzlB,EAAO7I,EAAI2e,KACrB,IAAI7Y,EAAO9F,EAAGwS,cACd,IAAK1M,EACD,OACJ6Y,EAASA,GAAU3e,EACnB,IAAIwC,EAAS0C,KAAKlF,GAAG+H,yBACjBd,IAAEA,EAAGD,KAAEA,GAAS2X,EAAO5W,wBAC3Bf,GAAQxE,EAAOwE,KACfC,GAAOzE,EAAOyE,IACd,IAAIoY,EAAK,CAAEvY,SAAU,CAAEG,MAAKD,SAC5B,GAAIlB,EAAK2L,kBAAmB,CAMxB,GALA3L,EAAK1E,EAAIe,KAAKC,IAAI,EAAGD,KAAKgS,MAAMnN,EAAOoiB,IACvCtjB,EAAK5E,EAAIiB,KAAKC,IAAI,EAAGD,KAAKgS,MAAMlN,EAAM0O,WAC/B7P,EAAKK,aACZjB,KAAKogB,OAAOjV,aAAavK,IAEpBZ,KAAKogB,OAAO5S,UAAU5M,GAAO,CAE9B,GADAA,EAAKK,cAAe,GACfjB,KAAKogB,OAAO5S,UAAU5M,GAEvB,YADAmc,EAAG3H,IAAIta,EAAI,QAGX8F,EAAK6M,cAELnT,EAAM8F,QAAQQ,EAAMA,EAAK6M,oBAClB7M,EAAK6M,YAEnB,CAEDzN,KAAKqpB,eAAe5P,EAAQ9V,EAAOwW,EAAIvZ,EAAMsjB,EAAWzT,EAC3D,MAGGzQ,KAAKspB,cAAc7P,EAAQ9V,EAAOwW,EAAIvZ,EAAMsjB,EAAWzT,EAC1D,EAmLL,OAjLAsM,EAAGK,UAAUpd,KAAKlF,GAAI,CAClByW,OAASzW,IACL,IAAI8F,EAAO9F,EAAGwS,cAEd,GAAI1M,GAAMlF,OAASsE,KACf,OAAO,EACX,IAAKA,KAAKpE,KAAKstB,cACX,OAAO,EAEX,IAAIK,GAAY,EAChB,GAAuC,mBAA5BvpB,KAAKpE,KAAKstB,cACjBK,EAAYvpB,KAAKpE,KAAKstB,cAAcpuB,OAEnC,CACD,IAAI0D,GAAwC,IAA5BwB,KAAKpE,KAAKstB,cAAyB,mBAAqBlpB,KAAKpE,KAAKstB,cAClFK,EAAYzuB,EAAGshB,QAAQ5d,EAC1B,CAED,GAAI+qB,GAAa3oB,GAAQZ,KAAKpE,KAAK+K,OAAQ,CACvC,IAAIlL,EAAI,CAAEU,EAAGyE,EAAKzE,EAAGF,EAAG2E,EAAK3E,EAAGqE,KAAMM,EAAKN,KAAMC,KAAMK,EAAKL,MAC5DgpB,EAAYvpB,KAAKogB,OAAO5S,UAAU/R,EACrC,CACD,OAAO8tB,CAAS,IAMnBrU,GAAGlV,KAAKlF,GAAI,YAAY,CAAC6I,EAAO7I,EAAI2e,KAErC,IAAI7Y,EAAO9F,EAAGwS,cAEd,GAAI1M,GAAMlF,OAASsE,OAASY,EAAK2L,kBAE7B,OAAO,EAGX,GAAI3L,GAAMlF,MAAQkF,EAAKlF,OAASsE,OAASY,EAAK2L,kBAAmB,CAE7C3L,EAAKlF,KACX8tB,OAAO1uB,EAAI2e,EACxB,CAEDyK,EAAYlkB,KAAKkkB,YACjBzT,EAAazQ,KAAK6jB,eAAc,GAE3BjjB,IACDA,EAAOZ,KAAKihB,UAAUnmB,GAAI,IAEzB8F,EAAKlF,OACNkF,EAAK6oB,aAAc,EACnB3uB,EAAGwS,cAAgB1M,GAGvB6Y,EAASA,GAAU3e,EACnB,IAAIqB,EAAIyE,EAAKzE,GAAKc,KAAKgS,MAAMwK,EAAOiQ,YAAcxF,IAAc,EAC5DjoB,EAAI2E,EAAK3E,GAAKgB,KAAKgS,MAAMwK,EAAOjW,aAAeiN,IAAe,EA2BlE,OAzBI7P,EAAKlF,MAAQkF,EAAKlF,OAASsE,MAGtBlF,EAAG6uB,qBACJ7uB,EAAG6uB,mBAAqB/oB,GAC5B9F,EAAGwS,cAAgB1M,EAAO,IAAKA,EAAMzE,IAAGF,IAAGP,KAAMsE,aAC1CY,EAAK1E,SACL0E,EAAK5E,EACZgE,KAAKogB,OAAO1S,YAAY9M,GACnBuK,aAAavK,GAElBA,EAAKqoB,QACDroB,EAAK6oB,YACD7oB,EAAK2L,mBAAoB,IAGjC3L,EAAKzE,EAAIA,EACTyE,EAAK3E,EAAIA,EACT2E,EAAK2L,mBAAoB,GAG7BvM,KAAK4pB,cAAchpB,EAAK9F,IAAI,GAC5BiiB,EAAG7H,GAAGpa,EAAI,OAAQsuB,GAElBA,EAAOzlB,EAAO7I,EAAI2e,IACX,CAAK,IAKXvE,GAAGlV,KAAKlF,GAAI,WAAW,CAAC6I,EAAO7I,EAAI2e,KAEpC,IAAI7Y,EAAO9F,EAAGwS,cACd,QAAK1M,IAIAA,EAAKlF,MAAQkF,EAAKlF,OAASsE,OAC5BA,KAAKwpB,OAAO1uB,EAAI2e,GAEZzZ,KAAKkO,SACLlO,KAAKmiB,gBAAgBvhB,KAGtB,EAAK,IAKXsU,GAAGlV,KAAKlF,GAAI,QAAQ,CAAC6I,EAAO7I,EAAI2e,KACjC,IAAI7Y,EAAO9F,EAAGwS,cAEd,GAAI1M,GAAMlF,OAASsE,OAASY,EAAK6oB,YAC7B,OAAO,EACX,IAAII,IAAa7pB,KAAK+e,YAAYtc,cAClCzC,KAAK+e,YAAYzgB,SAGjB,IAAIwrB,EAAWhvB,EAAG6uB,mBAElB,UADO7uB,EAAG6uB,mBACNE,GAAYC,GAAUpuB,MAAQouB,EAASpuB,OAASsE,KAAM,CACtD,IAAI+pB,EAAQD,EAASpuB,KACrBquB,EAAM3J,OAAOjQ,0BAA0B2Z,GACvCC,EAAM3J,OAAO1Z,aAAa+F,KAAKqd,GAC/BC,EAAMrG,sBAAsBE,sBAExBmG,EAAMhK,iBAAmBgK,EAAM3J,OAAOxjB,MAAM1B,QAAU6uB,EAAMnuB,KAAKqS,gBACjE8b,EAAM5H,iBAEb,CACD,IAAKvhB,EACD,OAAO,EAqBX,GAnBIipB,IACA7pB,KAAKogB,OAAO1S,YAAY9M,GACxBA,EAAKlF,KAAOsE,aAETY,EAAKlF,KAAKwS,QACjB6O,EAAG3H,IAAIta,EAAI,QAGP2e,IAAW3e,GACX2e,EAAOnb,SACPxD,EAAGwS,cAAgBwc,EACfD,IACA/uB,EAAKA,EAAGyJ,WAAU,MAItBzJ,EAAGwD,SACH0B,KAAK8hB,UAAUhnB,KAEd+uB,EACD,OAAO,EACX/uB,EAAGwS,cAAgB1M,EACnBA,EAAK9F,GAAKA,EACV,IAAIklB,EAAUpf,EAAKof,SAASllB,IAAIijB,UAqBhC,OAnBAzjB,EAAM8F,QAAQQ,EAAMZ,KAAKihB,UAAUjhB,KAAK+e,cACxCzkB,EAAMqH,wBAAwB7G,GAC9BkF,KAAKkhB,WAAWpmB,EAAI8F,GACpB9F,EAAGmZ,UAAUC,IAAI7D,EAAaU,UAAW/Q,KAAKpE,KAAKmV,WACnD/Q,KAAKlF,GAAGgD,YAAYhD,GAChBklB,IACAA,EAAQD,eAAiBnf,EACpBof,EAAQpkB,KAAKiqB,aACd7F,EAAQO,eAAc,IAE9BvgB,KAAK+hB,uBAAuBnhB,GAC5BZ,KAAKyjB,yBACLzjB,KAAKogB,OAAO3Z,WAAWgG,KAAK7L,GAC5BZ,KAAK2jB,mBACL3jB,KAAK4jB,sBACL5jB,KAAKogB,OAAO5R,YACRxO,KAAKmf,gBAAyB,SAC9Bnf,KAAKmf,gBAAyB,QAAE,IAAKxb,EAAOuB,KAAM,WAAa4kB,GAAYA,EAASpuB,KAAOouB,OAAWlvB,EAAWgG,IAE9G,CAAK,IAETZ,IACV,CAED,aAAA4pB,CAAc9uB,EAAIwD,GACd,IAAIsC,EAAO9F,EAAKA,EAAGwS,mBAAgB1S,EAC9BgG,GAASA,EAAKlF,OAAQZ,EAAGmZ,UAAUqF,SAAStZ,KAAKpE,KAAK0V,iBAAiBE,WAE5ElT,EAASsC,EAAKiM,kBAAmB,SAAcjM,EAAKiM,iBACpDvO,EAASxD,EAAGmZ,UAAUC,IAAI,4BAA8BpZ,EAAGmZ,UAAU3V,OAAO,4BAC/E,CAED,gBAAAqiB,GACI,IAAK3gB,KAAKpE,KAAK2jB,YAA6C,iBAAxBvf,KAAKpE,KAAKutB,UAAwB,CAClE,IAAIa,EAAUtvB,SAASa,cAAcyE,KAAKpE,KAAKutB,WAC/C,IAAKa,EACD,OAAOhqB,KAIN+c,EAAGO,YAAY0M,IAChBjN,EAAGK,UAAU4M,EAAShqB,KAAKpE,KAAK0V,kBAC3B4D,GAAG8U,EAAS,YAAY,CAACrmB,EAAO7I,IAAOkF,KAAK4pB,cAAc9uB,GAAI,KAC9Doa,GAAG8U,EAAS,WAAW,CAACrmB,EAAO7I,IAAOkF,KAAK4pB,cAAc9uB,GAAI,IAEzE,CACD,OAAOkF,IACV,CAED,sBAAA+hB,CAAuBnhB,GACnB,IAAI9F,EAAK8F,EAAK9F,GACd,MAAMqG,EAASP,EAAKO,QAAUnB,KAAKpE,KAAKmtB,YAClC7nB,EAAWN,EAAKM,UAAYlB,KAAKpE,KAAKotB,cAE5C,GAAIhpB,KAAKpE,KAAK2jB,YAAepe,GAAUD,EAMnC,OALIN,EAAKqoB,UACLjpB,KAAK8hB,UAAUhnB,UACR8F,EAAKqoB,SAEhBnuB,EAAGmZ,UAAUC,IAAI,wBAAyB,yBACnClU,KAEX,IAAKY,EAAKqoB,QAAS,CAEf,IAAI/E,EACAzT,EAEAwZ,EAAgB,CAACtmB,EAAOwW,KAEpBna,KAAKmf,gBAAgBxb,EAAMuB,OAC3BlF,KAAKmf,gBAAgBxb,EAAMuB,MAAMvB,EAAOA,EAAMjE,QAElDwkB,EAAYlkB,KAAKkkB,YACjBzT,EAAazQ,KAAK6jB,eAAc,GAChC7jB,KAAKqpB,eAAevuB,EAAI6I,EAAOwW,EAAIvZ,EAAMsjB,EAAWzT,EAAW,EAG/DyZ,EAAe,CAACvmB,EAAOwW,KACvBna,KAAKspB,cAAcxuB,EAAI6I,EAAOwW,EAAIvZ,EAAMsjB,EAAWzT,EAAW,EAG9D0Z,EAAexmB,IACf3D,KAAK+e,YAAYzgB,gBACVsC,EAAK+G,eACL/G,EAAKshB,cACLthB,EAAKgL,WAEZ,IAAIlM,EAASiE,EAAMjE,OACnB,GAAKA,EAAO4N,eAAiB5N,EAAO4N,cAAc5R,OAASsE,KAA3D,CAGA,GADAY,EAAK9F,GAAK4E,EACNkB,EAAKiM,iBAAkB,CACvB,IAAInR,EAAOZ,EAAGwS,cAAc5R,KACxBA,EAAKyjB,gBAAgBxb,EAAMuB,OAC3BxJ,EAAKyjB,gBAAgBxb,EAAMuB,MAAMvB,EAAOjE,GAE5ChE,EAAK0kB,OAAOxjB,MAAM6P,KAAK7L,GACvBlF,EAAK4mB,aAAaxnB,GAAI,GAAM,EAC/B,MAEGR,EAAMqH,wBAAwBjC,GAC1BkB,EAAK2L,mBAELjS,EAAM8F,QAAQQ,EAAMA,EAAKkK,OACzB9K,KAAKsgB,cAAc5gB,EAAQkB,GAC3BZ,KAAKogB,OAAOxV,QAAQhK,IAIpBZ,KAAKsgB,cAAc5gB,EAAQkB,GAE3BZ,KAAKmf,gBAAgBxb,EAAMuB,OAC3BlF,KAAKmf,gBAAgBxb,EAAMuB,MAAMvB,EAAOjE,GAIhDM,KAAKof,cAAgB,EACrBpf,KAAKyjB,yBACLzjB,KAAK4jB,sBACL5jB,KAAKogB,OAAO5R,YACO,eAAf7K,EAAMuB,OACFhG,OAAOqb,UAAU3Z,EAAKjF,iBACtBiF,EAAKjF,cAAgBiF,EAAK3E,GAC9B+D,KAAKwjB,iBAAgB,GAAO,EAAM5iB,GAlC3B,CAmCV,EAELmc,EAAGnM,UAAU9V,EAAI,CACbkc,MAAOiT,EACP/S,KAAMiT,EACNjQ,KAAMgQ,IACPzY,UAAU3W,EAAI,CACbkc,MAAOiT,EACP/S,KAAMiT,EACNxS,OAAQuS,IAEZtpB,EAAKqoB,SAAU,CAClB,CAID,OAFAlM,EAAGnM,UAAU9V,EAAIqG,EAAS,UAAY,UACjCsQ,UAAU3W,EAAIoG,EAAW,UAAY,UACnClB,IACV,CAED,cAAAqpB,CAAevuB,EAAI6I,EAAOwW,EAAIvZ,EAAMsjB,EAAWzT,GAC3CzQ,KAAKogB,OAAOhZ,aACPmH,YAAY3N,GAEjBZ,KAAKsgB,cAActgB,KAAK+e,YAAane,GACrCZ,KAAKlF,GAAGgD,YAAYkC,KAAK+e,aAEzBne,EAAK9F,GAAKkF,KAAK+e,YACfne,EAAKwpB,gBAAkBjQ,EAAGvY,SAC1BhB,EAAKypB,UAAYlQ,EAAGvY,SAASG,IAC7BnB,EAAK+G,QAA0B,cAAfhE,EAAMuB,YACftE,EAAKgL,WACO,aAAfjI,EAAMuB,MAAuBtE,EAAK2L,oBAElCvM,KAAKogB,OAAOxV,QAAQhK,GACpBA,EAAK+G,SAAU,GAGnB3H,KAAKogB,OAAOxW,WAAWsa,EAAWzT,EAAYzQ,KAAKpE,KAAK+mB,UAAW3iB,KAAKpE,KAAKgnB,YAAa5iB,KAAKpE,KAAK8mB,aAAc1iB,KAAKpE,KAAKinB,YACzG,gBAAflf,EAAMuB,OACN6X,EAAGtL,UAAU3W,EAAI,SAAU,WAAYopB,GAAatjB,EAAKN,MAAQ,IAC5DmR,UAAU3W,EAAI,SAAU,YAAa2V,GAAc7P,EAAKL,MAAQ,IACjEK,EAAKJ,MACLuc,EAAGtL,UAAU3W,EAAI,SAAU,WAAYopB,EAAYtjB,EAAKJ,MAExDI,EAAKH,MACLsc,EAAGtL,UAAU3W,EAAI,SAAU,YAAa2V,EAAa7P,EAAKH,MAGrE,CAED,aAAA6oB,CAAcxuB,EAAI6I,EAAOwW,EAAIvZ,EAAMsjB,EAAWzT,GAC1C,IACIxF,EADAxF,EAAI,IAAK7E,EAAKkK,OAEdwf,EAAQtqB,KAAKpE,KAAKinB,WAAY0H,EAASvqB,KAAKpE,KAAKgnB,YAAa4H,EAAOxqB,KAAKpE,KAAK+mB,UAAW8H,EAAUzqB,KAAKpE,KAAK8mB,aAE9GgI,EAAUztB,KAAKgS,MAAmB,GAAbwB,GAAmBka,EAAS1tB,KAAKgS,MAAkB,GAAZiV,GAKhE,GAJAoG,EAAQrtB,KAAK0M,IAAI2gB,EAAOK,GACxBJ,EAASttB,KAAK0M,IAAI4gB,EAAQI,GAC1BH,EAAOvtB,KAAK0M,IAAI6gB,EAAME,GACtBD,EAAUxtB,KAAK0M,IAAI8gB,EAASC,GACT,SAAf/mB,EAAMuB,KAAiB,CACvB,GAAItE,EAAK2L,kBACL,OACJ,IAAI5J,EAAWwX,EAAGvY,SAASG,IAAMnB,EAAKypB,UACtCzpB,EAAKypB,UAAYlQ,EAAGvY,SAASG,KACM,IAA/B/B,KAAKpE,KAAKgV,UAAUE,QACpBxW,EAAMoI,qBAAqB5H,EAAIqf,EAAGvY,SAAUe,GAGhD,IAAIb,EAAOqY,EAAGvY,SAASE,MAAQqY,EAAGvY,SAASE,KAAOlB,EAAKwpB,gBAAgBtoB,MAAQyoB,EAASD,GACpFvoB,EAAMoY,EAAGvY,SAASG,KAAOoY,EAAGvY,SAASG,IAAMnB,EAAKwpB,gBAAgBroB,KAAO0oB,EAAUD,GACrF/kB,EAAEvJ,EAAIe,KAAKgS,MAAMnN,EAAOoiB,GACxBze,EAAEzJ,EAAIiB,KAAKgS,MAAMlN,EAAM0O,GAEvB,IAAIma,EAAO5qB,KAAKof,cAChB,GAAIpf,KAAKogB,OAAOtY,QAAQlH,EAAM6E,GAAI,CAC9B,IAAI6I,EAAMtO,KAAKqN,SACXwd,EAAQ5tB,KAAKC,IAAI,EAAIuI,EAAEzJ,EAAI4E,EAAK3E,EAAKqS,GACrCtO,KAAKpE,KAAK+K,QAAU2H,EAAMuc,EAAQ7qB,KAAKpE,KAAK+K,SAC5CkkB,EAAQ5tB,KAAKC,IAAI,EAAG8C,KAAKpE,KAAK+K,OAAS2H,IAE3CtO,KAAKof,cAAgByL,CACxB,MAEG7qB,KAAKof,cAAgB,EAGzB,GAFIpf,KAAKof,gBAAkBwL,GACvB5qB,KAAKyjB,yBACL7iB,EAAK1E,IAAMuJ,EAAEvJ,GAAK0E,EAAK5E,IAAMyJ,EAAEzJ,EAC/B,MAGP,MACI,GAAmB,WAAf2H,EAAMuB,KAAmB,CAC9B,GAAIO,EAAEvJ,EAAI,EACN,OAMJ,GAJA5B,EAAMoJ,mBAAmBC,EAAO7I,EAAI2V,GAEpChL,EAAEtJ,EAAIc,KAAKgS,OAAOkL,EAAGlE,KAAKjU,MAAQsoB,GAASpG,GAC3Cze,EAAExJ,EAAIgB,KAAKgS,OAAOkL,EAAGlE,KAAKhU,OAASuoB,GAAQ/Z,GACvC7P,EAAKzE,IAAMsJ,EAAEtJ,GAAKyE,EAAK3E,IAAMwJ,EAAExJ,EAC/B,OACJ,GAAI2E,EAAKgL,YAAchL,EAAKgL,WAAWzP,IAAMsJ,EAAEtJ,GAAKyE,EAAKgL,WAAW3P,IAAMwJ,EAAExJ,EACxE,OAEJ,IAAI6F,EAAOqY,EAAGvY,SAASE,KAAOwoB,EAC1BvoB,EAAMoY,EAAGvY,SAASG,IAAMyoB,EAC5B/kB,EAAEvJ,EAAIe,KAAKgS,MAAMnN,EAAOoiB,GACxBze,EAAEzJ,EAAIiB,KAAKgS,MAAMlN,EAAM0O,GACvBxF,GAAW,CACd,CACDrK,EAAKshB,OAASve,EACd/C,EAAKgL,WAAanG,EAClB,IAAI7C,EAAO,CACP1G,EAAGie,EAAGvY,SAASE,KAAOwoB,EACtBtuB,EAAGme,EAAGvY,SAASG,IAAMyoB,EACrBruB,GAAIge,EAAGlE,KAAOkE,EAAGlE,KAAKjU,MAAQpB,EAAKzE,EAAI+nB,GAAaoG,EAAQC,EAC5DtuB,GAAIke,EAAGlE,KAAOkE,EAAGlE,KAAKhU,OAASrB,EAAK3E,EAAIwU,GAAc+Z,EAAOC,GAEjE,GAAIzqB,KAAKogB,OAAOpT,cAAcpM,EAAM,IAAK6E,EAAGye,YAAWzT,aAAY7N,OAAMqI,aAAa,CAClFrK,EAAKwpB,gBAAkBjQ,EAAGvY,SAC1B5B,KAAKogB,OAAOxW,WAAWsa,EAAWzT,EAAY+Z,EAAMD,EAAQE,EAASH,UAC9D1pB,EAAKgH,UACRqD,GAAYrK,EAAKof,SACjBpf,EAAKof,QAAQ4H,WACjB5nB,KAAKof,cAAgB,EACrBpf,KAAKyjB,yBACL,IAAI/jB,EAASiE,EAAMjE,OACnBM,KAAKsgB,cAAc5gB,EAAQkB,GACvBZ,KAAKmf,gBAAgBxb,EAAMuB,OAC3BlF,KAAKmf,gBAAgBxb,EAAMuB,MAAMvB,EAAOjE,EAE/C,CACJ,CAKD,MAAA8pB,CAAO1uB,EAAI2e,GACP,IAAI7Y,EAAO9F,EAAGwS,cACT1M,IAELmc,EAAG3H,IAAIta,EAAI,QAEP8F,EAAK2L,oBAET3L,EAAK2L,mBAAoB,EACzBvM,KAAKogB,OAAO1T,WAAW9L,GACvBA,EAAK9F,GAAK8F,EAAK6oB,aAAehQ,EAASA,EAAS3e,GACpB,IAAxBkF,KAAKpE,KAAKutB,WAEVnpB,KAAK4pB,cAAc9uB,GAAI,GAGvBA,EAAG6uB,oBAEH7uB,EAAGwS,cAAgBxS,EAAG6uB,0BACf7uB,EAAG6uB,oBAEL/oB,EAAK6oB,qBAEH7oB,EAAK9F,UACLA,EAAGwS,cAEVtN,KAAKogB,OAAOtU,mBAEnB,CAED,MAAAgf,GAAoF,OXrvEjF,SAAkBC,EAAMC,EAAGC,EAASC,EAASC,GAChD,IAAIC,EAAU,IAAI3pB,KACduc,QAAQ0H,KAAK,2BAA6BuF,EAAU,sBAAwBE,EAA/D,gCACED,EAAU,iDAClBF,EAAEK,MAAMN,EAAMtpB,IAEzB2pB,EAAQE,UAAYN,EAAEM,SAE1B,CW6uEeC,CAASvrB,KAAMA,KAAK+G,aAAY,GAAQ,SAAU,cAAe,OAAe/G,IAAO,EEzvEtG,SAASsc,EACP/e,EAA4B,CAAA,EAC5BsgB,EAA+B,cAC/B2N,GAEAxN,QAAQsH,IAAI,UAAW/nB,GACvB,IAAI7B,EAAOkiB,EAAUtB,KAAK/e,EAASsgB,GAInC,SAAS4N,IACP/vB,EAAKwZ,GAAG,cAAc,SAAUvR,EAAc7I,GAC5C0wB,EAAOE,kBAAkB,WAyB/B,SAAgB/nB,EAAc7I,GAC5B,MAAMsC,EAAKtC,EAAGoiB,aAAa,UACrBhhB,EAAEA,EAACF,EAAEA,EAACG,EAAEA,EAACF,EAAEA,GAAMnB,EAAGwS,eAClBnR,EAAG6F,EAAO/F,EAAGgG,GAAWnH,EAAGwS,cAAqB,MACxD,MAAO,CAAElQ,KAAIlB,IAAGF,IAAGG,IAAGF,IAAG+F,QAAOC,SAClC,CA9B2C0V,CAAOhU,EAAO7I,GACrD,GACD,CAED,OATAY,EAAa,OAAI8vB,EACjBC,IAQO,CACL/G,UAAYzlB,GAAmBvD,EAAKgpB,UAAUzlB,GAC9C0sB,OAAQ,KACN,MAAM/vB,EAAYsE,OAAA0rB,OAAA,CAAA,EAAAlwB,EAAKE,MACjBd,EAAKY,EAAKZ,GAKhB,OAJAY,EAAK6Y,SAAQ,GACb7Y,EAAOkiB,EAAUtB,KAAK1gB,EAAMd,GAC5BY,EAAa,OAAI8vB,EACjBC,IACO/vB,CAAI,EAEb+S,KAAM,KACJ,MAAMod,EAAUnwB,EAAK+S,OACrB,OAAItT,MAAM0J,QAAQgnB,GACTA,EAAQ1e,KAAK2e,GdUrB,SAAgBlnB,EAAGG,GACtB,IAAIkF,EAAI,CAAA,EACR,IAAK,IAAIxE,KAAKb,EAAO1E,OAAOorB,UAAUvrB,eAAegsB,KAAKnnB,EAAGa,IAAMV,EAAEuT,QAAQ7S,GAAK,IAC9EwE,EAAExE,GAAKb,EAAEa,IACb,GAAS,MAALb,GAAqD,mBAAjC1E,OAAO8rB,sBACtB,KAAIlrB,EAAI,EAAb,IAAgB2E,EAAIvF,OAAO8rB,sBAAsBpnB,GAAI9D,EAAI2E,EAAEvK,OAAQ4F,IAC3DiE,EAAEuT,QAAQ7S,EAAE3E,IAAM,GAAKZ,OAAOorB,UAAUW,qBAAqBF,KAAKnnB,EAAGa,EAAE3E,MACvEmJ,EAAExE,EAAE3E,IAAM8D,EAAEa,EAAE3E,IAF4B,CAItD,OAAOmJ,CACX,CcpB8CiiB,CAAAJ,EAAlB,eAEf,EAAE,EAGf,CFytEAlO,EAAUuI,sBAAwB,2BAElCvI,EAAUtjB,MAAQA,EAElBsjB,EAAUuO,OAAS5lB,EACnBqX,EAAUwO,MAAQ"}