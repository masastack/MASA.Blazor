@page "/"
@inject HttpClient HttpClient
@inject TryJSModule TryJSModule
@inject IPopupService PopupService
@inherits NextTickComponentBase

<MApp Class="default-app default-background">
    <MNavigationDrawer App
                       Class="px-2 py-6"
                       Color="white"
                       MiniVariant
                       Permanent
                       Floating
                       MiniVariantWidth="64">
        <MImage Src="https://blazor-pro.masastack.com/img/mainLayout/logo.svg"
                Width="42"
                Height="42"
                Style="margin-left: 3px">
        </MImage>

        <MDivider Class="my-6"></MDivider>

        <MTooltip Right>
            <ActivatorContent>
                <MButton Icon OnClick="RunCode" XLarge @attributes="@context.Attrs">
                    <MIcon>mdi-play</MIcon>
                </MButton>
            </ActivatorContent>
            <ChildContent>
                Ctrl + S
            </ChildContent>
        </MTooltip>

        <MTooltip Right>
            <ActivatorContent>
                <MButton Icon OnClick="()=>_settingModalOpened=true" XLarge @attributes="@context.Attrs">
                    <MIcon>mdi-cog</MIcon>
                </MButton>
            </ActivatorContent>
            <ChildContent>
                Settings
            </ChildContent>
        </MTooltip>

        @*Settings Modal*@
        <PModal @bind-Value="_settingModalOpened"
                Title="Settings"
                Width="500">
            <MCard Class="mx-auto"
                   MaxWidth="500">
                <MRow Class="ml-0">
                    <MCol Cols="1">
                        <MButton Icon Color="primary"
                            OnClick="()=>_addScriptModalOpened=true">
                            <MIcon>mdi-plus</MIcon>
                        </MButton>
                        </MCol>
                        <MCol Cols="1">
                        <MButton Icon Color="primary"
                            OnClick="ClearScriptsReferenceAsync">
                            <MIcon>mdi-cached</MIcon>
                        </MButton>
                        </MCol>
                        </MRow>

                        <MList TwoLine>
                    <MListItemGroup>
                        @foreach (var item in _customScriptNodes)
                        {
                            <MListItem Value="item.ScriptName" ActiveClass="deep-purple--text text--accent-4">
                                <ItemContent>
                                    <MListItemAvatar>
                                        @if (item.NodeType is ScriptNodeType.CSS)
                                        {
                                            <MIcon Color="blue darken-1">mdi-language-css3</MIcon>
                                        }
                                        else
                                        {
                                            <MIcon Color="orange lighten-1">mdi-language-javascript</MIcon>
                                        }
                                    </MListItemAvatar>

                                    <MListItemContent>
                                        <MListItemTitle>@item.ScriptName</MListItemTitle>
                                        <MListItemSubtitle>@item.Content</MListItemSubtitle>
                                    </MListItemContent>

                                    <MListItemAction>
                                        <MButton Small Icon
                                             OnClick="async()=>await RemoveScriptReferenceAsync(item)">
                                            <MIcon Color="blue-grey lighten-1">mdi-delete-circle</MIcon>
                                        </MButton>
                                    </MListItemAction>
                                </ItemContent>
                            </MListItem>
                        }
                    </MListItemGroup>
                </MList>
            </MCard>
        </PModal>

        @*Add Script Reference Modal*@
        <PModal @bind-Value="_addScriptModalOpened"
            OnSave="async()=>await AddScriptReferenceAsync()"
            OnCancel="async()=>{_addScriptModalOpened=false; ClearInputs();}"
            Title="Add Script Reference"
            Width="500">
            <MTextField Outlined 
                @bind-Value="_newScriptName"
                Label="Script Name"
                PrependInnerIcon="mdi-pen" />
            <MSelect Outlined
                Label="Script Node Types"
                PrependInnerIcon="@(_newScriptNodeType==ScriptNodeType.JS?"mdi-language-javascript":"mdi-language-css3")"
                Items="_scriptNodeTypes"
                ItemValue="i=>i"
                ItemText="i=>i.ToString()"
                TItem="ScriptNodeType"
                TItemValue="ScriptNodeType"
                TValue="ScriptNodeType"
                @bind-Value="_newScriptNodeType"/>
            <MTextField Outlined 
                @bind-Value="_newContent" 
                Label="Content"
                PrependInnerIcon="mdi-script-text-outline" />
        </PModal>

        <MButton Class="github" Href="@REPOSITORY_URL" Target="_blank" Icon XLarge>
            <MIcon>mdi-github</MIcon>
        </MButton>
    </MNavigationDrawer>

    <MMain>
        <div id="code">
            <MTabs @bind-Value="_tabStringNumber"
                   HideSlider
                   ActiveClass="active-tab">
                @foreach (var item in _tabMonacoList)
                {
                    <MTab Class="text-none">
                        <span>@item.Name</span>
                    </MTab>
                }
            </MTabs>
            <MTabsItems Class="editor-group default-background" Value="_tabStringNumber">
                @foreach (var item in _tabMonacoList)
                {
                    <MTabItem Style="height: 100%;">
                        <MMonacoEditor InitCompleteHandle="() => InitCompleteHandle(item)"
                                   Class="custom-editor"
                                   EditorOptions="@item.Options"
                                   @ref="item.MonacoEditor">
                        </MMonacoEditor>
                    </MTabItem>
                }
            </MTabsItems>
        </div>

        <div id="splitter"></div>

        <div id="render">
            @if (_componentType != null)
            {
                <DynamicComponent Type="@_componentType" />
            }
        </div>
    </MMain>

    <MOverlay Value="_load" ZIndex="7">
        <div class="white--text text-h3">
            Loading, just a moment...
        </div>
    </MOverlay>
</MApp>
