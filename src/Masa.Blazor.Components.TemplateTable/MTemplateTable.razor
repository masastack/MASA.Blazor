@using Force.DeepCloner
@using Masa.Blazor.Components.TemplateTable
@using Masa.Blazor.Components.TemplateTable.ColumnDialogs
@using Masa.Blazor.Components.TemplateTable.FilterDialogs
@using Masa.Blazor.Components.TemplateTable.Viewers
@using Microsoft.JSInterop
@using Masa.Blazor.Components.TemplateTable.Toolbars
@using Masa.Blazor.Components.TemplateTable.SortDialogs
@namespace Masa.Blazor
@inject IJSRuntime JSRuntime
@inject IPopupService PopupService

<MButton OnClick="SaveSheet">Save Sheet</MButton>

<Toolbar DefaultViewId="@_sheet.DefaultViewId"
         ActiveView="@_sheet.ActiveViewId"
         ActiveViewChanged="@HandleOnActiveViewChanged"
         ColumnOrder="@_columnOrder"
         ColumnOrderChanged="@HandleOnColumnOrderChanged"
         RowHeight="_rowHeight"
         RowHeightChanged="@HandleOnRowHeightChanged"
         Views="_sheet.Views"
         Columns="_sheet.Columns"
         HiddenColumnIds="@_sheet.ActiveViewHiddenColumnIds"
         OnViewAdd="@AddNewView"
         OnViewReset="@ResetView"
         OnViewRename="@RenameView"
         OnViewDelete="@DeleteView"
         OnColumnEditClick="@OpenColumnEditDialog"
         OnColumnToggle="@ToggleColumn"
         HasCustom="@HasCustomConfiguration"
         HasFilter="@(_sheet.ActiveView?.Filter?.Options.Count > 0)"
         HasSort="@(_sheet.ActiveView?.Sort?.Options.Count > 0)"
         OnFilterClick="@(() => _filterDialog?.Open())"
         OnSortClick="@(() => _sortDialog?.Open())"/>

<Viewer ViewColumns="@_viewColumns"
        HiddenColumnIds="@_sheet.ActiveViewHiddenColumnIds"
        ColumnOrder="@_columnOrder"
        ColumnOrderChanged="@HandleOnColumnOrderChanged"
        Loading="@_loading"
        RowHeight="@_rowHeight"
        Rows="@_items"
        Sort="@_sheet.ActiveView?.Sort"
        OnSortUpdate="@SortUpdate"
        Height="@Height"
        OnColumnToggle="@ToggleColumn"
        OnColumnEditClick="@OpenColumnEditDialog"
        OnColumnResize="@ResizeColumn"
        OnUpdate="@OnUpdate"
        OnDelete="@OnDelete"
        OnAction1="@OnAction1"
        OnAction2="@OnAction2"
        @ref="_viewer">
</Viewer>
@if (_sheet.ActiveView is not null)
{
    <div class="d-flex align-center">
        <div>
            @{
                var pageStart = (_sheet.ActiveView.PageIndex - 1) * _sheet.ActiveView.PageSize + 1;
                var pageStop = Math.Min(_sheet.ActiveView.PageIndex * _sheet.ActiveView.PageSize, _totalCount);
            }

            @pageStart - @pageStop of @_totalCount
        </div>

        <div>
            <MButton IconName="$prev" Disabled="@(!_hasPreviousPage)" OnClick="@HandleOnPreviousPage"></MButton>
            <MButton IconName="$next" Disabled="@(!_hasNextPage)" OnClick="@HandleOnNextPage"></MButton>
        </div>
    </div>
}

<ColumnDialog @ref="_columnEditDialog"
              OnSave="@UpdateColumn">
</ColumnDialog>

<FilterDialog @ref="_filterDialog"
              ActiveView="@_sheet.ActiveView"
              Columns="@_sheet.Columns"
              HiddenColumnIds="@_sheet.ActiveViewHiddenColumnIds"
              OnSave="@SaveFilter">
</FilterDialog>

<SortDialog @ref="_sortDialog"
            ActiveView="@_sheet.ActiveView"
            Columns="@_sheet.Columns"
            HiddenColumnIds="@_sheet.ActiveViewHiddenColumnIds"
            OnSave="@SortUpdate">
</SortDialog>

<p style="font-size: 12px;white-space: break-spaces">
    @(JsonSerializer.Serialize(_sheet.Views, new JsonSerializerOptions()
    {
        WriteIndented = true
    }))
</p>

@code {

    // private HashSet<string> _hiddenColumnIds = [];
    private List<string> _columnOrder = [];
    private RowHeight _rowHeight;
    private Viewer? _viewer;

    private ICollection<string>? _defaultColumnIds;

    private ColumnDialog? _columnEditDialog;
    private FilterDialog? _filterDialog;
    private SortDialog? _sortDialog;

    private bool HasCustomConfiguration
    {
        get
        {
            if (_sheet.ActiveView is null)
            {
                return false;
            }

            ICollection<string> columnIds = [];
            foreach (var column in _sheet.ActiveView.Columns)
            {
                if (column.Hidden)
                {
                    return true;
                }

                columnIds.Add(column.ColumnId);
            }

            _defaultColumnIds ??= _sheet.Columns.Select(u => u.Id).ToList();
            _defaultColumnIds.Remove(Preset.ActionsColumnId);
            columnIds.Remove(Preset.ActionsColumnId);

            return !_defaultColumnIds.SequenceEqual(columnIds);
        }
    }

    private void AddNewView()
    {
        var clonedView = _sheet.ActiveView.DeepClone();
        clonedView.Id = Guid.NewGuid();
        clonedView.Name = "Copy of " + clonedView.Name;

        _sheet.Views.Add(clonedView);
        _sheet.ActiveViewId = clonedView.Id;

        ResetSheet();
    }

    private async Task ResetView()
    {
        _sheet.ActiveView.Columns = _sheet.Columns.Where(u => u.Id != Preset.ActionsColumnId).Select(u => new ViewColumn(u.Id)).ToList();
        // _hiddenColumnIds = [];
        _columnOrder = [];
        _sheet.ActiveView.Filter = null;
        _sheet.ActiveView.Sort = null;
        _sheet.ActiveView.PageIndex = 1;
        await RefreshItemsAsync(GetItemsProviderRequest());
    }

    private void RenameView((Guid id, string Name) args)
    {
        var view = _sheet.Views.FirstOrDefault(u => u.Id == args.id);
        if (view is not null)
        {
            view.Name = args.Name;
        }
    }

    private async Task DeleteView(View view)
    {
        if (_sheet.Views.Count < 1)
        {
            return;
        }

        var confirmed =
            await PopupService.ConfirmAsync(
                "Delete view",
                $"Are you sure you want to delete this view ({view.Name})?",
                AlertTypes.Error);

        if (!confirmed) return;

        var viewInfo = _sheet.Views.FirstOrDefault(v => v.Id == view.Id);
        _sheet.Views.Remove(viewInfo);

        if (_sheet.ActiveViewId == view.Id)
        {
            _sheet.ActiveViewId = _sheet.Views.First().Id;
        }
    }

    private async Task HandleOnActiveViewChanged(Guid viewId)
    {
        _sheet.ActiveViewId = viewId;

        ResetSheet();

        if (_sheet.ActiveView?.Rows is null)
        {
            _sheet.ActiveView.PageIndex = 1;
            _sheet.ActiveView.PageSize = 5; // TODO:使用用户输入的值

            await RefreshItemsAsync(GetItemsProviderRequest());
        }
        else
        {
            _items = _sheet.ActiveView.Rows;
        }
    }

    private void ResetSheet()
    {
        // reset the width of the table
        _ = JSRuntime.InvokeVoidAsync(JsInteropConstants.SetStyle, _viewer?.GetTableSelector(), "width", null);

        UpdateStateOfActiveView();
    }


    private void HandleOnColumnOrderChanged(List<string> columnOrder)
    {
        _columnOrder = columnOrder;

        Console.Out.WriteLine("Column order changed to: " + string.Join(", ", columnOrder));

        _sheet.ActiveViewColumns.Sort((x, y) =>
        {
            var xIndex = _columnOrder.IndexOf(x.ColumnId);
            var yIndex = _columnOrder.IndexOf(y.ColumnId);
            return xIndex.CompareTo(yIndex);
        });
    }

    private void HandleOnRowHeightChanged(RowHeight rowHeight)
    {
        _rowHeight = rowHeight;
        _sheet.UpdateActiveViewRowHeight(rowHeight);
    }

    private void ToggleColumn(string columnId)
    {
        var viewColumn = _sheet.ActiveViewColumns.FirstOrDefault(u => u.ColumnId == columnId);
        if (viewColumn is null)
        {
            return;
        }

        viewColumn.Hidden = !viewColumn.Hidden;

        if (columnId == Preset.ActionsColumnId)
        {
            _sheet.ActiveView!.HasActions = !_sheet.ActiveView.HasActions;
        }
    }

    private void OpenColumnEditDialog(Column column)
    {
        _columnEditDialog?.Open(column);
    }

    private void UpdateColumn(ColumnInfo data)
    {
        var column = _sheet.Columns.FirstOrDefault(u => u.Id == data.Id);
        if (column is null)
        {
            return;
        }

        column.Name = data.Name;
        column.Type = data.Type;
        column.Config = data.Config;
        column.ConfigObject = data.ConfigObject;

        // var viewColumn = _viewColumns.FirstOrDefault(u => u.Column.Id == data.Id);
        // viewColumn.Column = column;
    }

    private async Task SaveFilter(Filter filter)
    {
        _sheet.ActiveView.Filter = filter;
        _sheet.ActiveView.PageIndex = 1;
        await RefreshItemsAsync(GetItemsProviderRequest());
    }

    private async Task SortUpdate(Sort sort)
    {
        _sheet.ActiveView.Sort = sort;
        _sheet.ActiveView.PageIndex = 1;
        await RefreshItemsAsync(GetItemsProviderRequest());
    }

    private void ResizeColumn((string ColumnId, double Width) args)
    {
        var viewColumn = _sheet.ActiveViewColumns.FirstOrDefault(u => u.ColumnId == args.ColumnId);
        if (viewColumn is null)
        {
            return;
        }

        viewColumn.Width = args.Width;
    }

    private async Task SaveSheet()
    {
        var sheet = new Sheet()
        {
            Columns = _sheet.Columns.Where(u => u.Id != Preset.ActionsColumnId).Select(Column (u) => u),
            Views = _sheet.Views.Select(View (u) => u),
            ActiveViewId = _sheet.ActiveViewId,
            DefaultViewId = _sheet.DefaultViewId,
        };
        await OnSave.InvokeAsync(sheet);
    }

}