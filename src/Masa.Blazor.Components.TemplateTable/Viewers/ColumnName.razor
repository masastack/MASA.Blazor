@inject IJSRuntime JSRuntime

<div @ref="_ref"
     class="masa-table-viewer__header-column-name @Class"
     @onclick="@HandleOnClick">
    @Templates.GenTypeIcon(Data.Type, true)
    <span class="text-truncate">
        @Data.Name
    </span>
    <MIcon Small Class="sort-icon">$sort</MIcon>
    @if (Index > 0)
    {
        <span class="m-data-table-header__sort-badge">@Index</span>
    }
</div>

@code {

    [Parameter] public Column Data { get; set; } = null!;

    [Parameter] public Sort Sort { get; set; } = null!;

    [Parameter] public EventCallback<Sort> OnClick { get; set; }

    private ElementReference _ref;

    private SortOption? SortOption => Sort.Options.FirstOrDefault(u => u.ColumnId == Data.Id);

    private int Index
    {
        get
        {
            if (SortOption is null)
            {
                return 0;
            }

            return Sort.Options.OrderBy(u => u.Index).ToList().IndexOf(SortOption) + 1;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _ = JSRuntime.InvokeVoidAsync(JsInteropConstants.AddStopPropagationEvent, _ref, "pointerdown");
        }
    }

    private string Class
    {
        get
        {
            if (SortOption is null)
            {
                return "";
            }

            return SortOption.Direction switch
            {
                SortDirection.Asc => "active asc",
                SortDirection.Desc => "active desc",
                _ => ""
            };
        }
    }

    private async Task HandleOnClick()
    {
        if (SortOption is null)
        {
            var sortOption = new SortOption
            {
                ColumnId = Data.Id,
                Direction = SortDirection.Asc,
                Index = Sort.Options.MaxBy(u => u.Index)?.Index + 1 ?? 0
            };

            Sort.Options.Add(sortOption);
        }
        else if (SortOption.Direction == SortDirection.Asc)
        {
            SortOption.Direction = SortDirection.Desc;
        }
        else
        {
            Sort.Options.Remove(SortOption);
        }

        await OnClick.InvokeAsync(Sort);
    }

}