@inject IPopupService PopupService

<PEnqueuedSnackbars @ref="_enqueuedSnackbars" Position="position" Duration="defaultDuration">
</PEnqueuedSnackbars>

<MButton OnClick="AddToast"> Add Toast </MButton>

@code {
    PEnqueuedSnackbars _enqueuedSnackbars;

    private int defaultDuration = 5000;

    ToastPosition position = ToastPosition.BottomRight;

    Random random = new Random();

    private Task HandleOnView()
    {
        return PopupService.ToastInfoAsync("View button click");
    }

    private async Task AddToast()
    {
        var now = DateTime.Now.ToString("HH:mm:ss.fff");
        var alertType = random.NextInt64(0, 5);
        var dark = random.NextInt64(0, 2);
        var duration = random.NextInt64(1000, 5000);
        var useParentDuration = random.NextInt64(0, 2);

        RenderFragment customViewAction = (builder) =>
        {
            builder.AddContent(0, @<MButton OnClick="HandleOnView" Text> View </MButton>);
        };

        var config = new ToastConfig()
        {
            Title = $"Auto close after {duration}ms",
            Content = $"create time: {now}",
            Dark = dark == 0,
            Type = (AlertTypes)alertType,
            Duration = useParentDuration == 0? null : (int)duration,
            ActionContent = customViewAction,
            OnClose = OnClose
        };

        await _enqueuedSnackbars.AddToast(config);
    }

    private Task OnClose(string key)
    {
        Console.WriteLine($"Close toast key: {key}");
        return Task.CompletedTask;
    }
}