{
  "en-US": {
    "props": {
      "id": "Html document id.",
      "class": "Html document class.",
      "color": "Applies specified color to the control - it can be the name of material color (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). You can find a list of built-in classes on the [colors page](/blazor/styles-and-animations/colors).",
      "dark": "Applies the dark theme variant to the component. You can find more information on the Material Design documentation for [dark themes](https://material.io/design/color/dark-theme.html).",
      "elevation": "Designates an elevation applied to the component between 0 and 24. You can find more information on the [elevation page](/blazor/styles-and-animations/elevation).",
      "height": "Sets the height for the component.",
      "light": "Applies the light theme variant to the component.",
      "maxHeight": "Sets the maximum height for the component.",
      "maxWidth": "Sets the maximum width for the component.",
      "minHeight": "Sets the minimum height for the component.",
      "minWidth": "Sets the minimum width for the component.",
      "rounded": "Designates the `border-radius` applied to the component. You can find more information on the [Border Radius](/blazor/styles-and-animations/border-radius) page.",
      "style": "Html document style",
      "width": "Sets the width for the component.",
      "size": "Sets the height and width of the component.",
      "bottom": "Aligns the component towards the bottom.",
      "tile": "Removes the component’s `border-radius`.",
      "left": "Aligns components to the left.",
      "right": "Aligns components to the right.",
      "icon": "Designates a specific icon.",
      "iconColor": "Designates a specific icon color.",
      "outlined": "Removes elevation (box-shadow) and adds a thin border.",
      "tag": "Specify a custom tag used on the root element.",
      "app": "Designates the component as part of the application layout. Used for dynamically adjusting content sizing. Components using this prop should reside **outside** of [MMain](/blazor/components/mains) component to function properly. You can find more information about layouts on the [MApplication](/blazor/components/applications). Note: this prop automatically applies **position: fixed** to the layout element. You can overwrite this functionality by using the absolute prop",
      "absolute": "Applies position: absolute to the component.",
      "dense": "Reduces the height of the toolbar content to 48px (96px when using the `Prominent` prop).",
      "elevateOnScroll": "Elevates the [MAppbar](/blazor/components/appbars) when scrolling.",
      "fadeImgOnScroll": "When using the `Src` prop or img slot, will fade the `ImgContent` when scrolling.",
      "fixed": "Applies **position: fixed** to the component.",
      "flat": "Removes the toolbar’s box-shadow.",
      "floating": "Applies **display: inline-flex** to the component.",
      "hideOnScroll": "Hides the app-bar when scrolling. Will still show the `extension` slot.",
      "invertedScroll": "Hides the app-bar when scrolling down and displays it when scrolling up.",
      "marginTop": "Applies **margin-top:** to the component.",
      "scrollTarget": "The amount of scroll distance down before `HideOnScroll` activates.",
      "scroll-threshold": "The amount of scroll distance down before `hideOnScroll` activates.",
      "src": "Image source. See [MImage](/blazor/components/images) for details.",
      "required": "Required",
      "extended": "Use this prop to increase the height of the toolbar without using the `Extension` slot for adding content. May be used in conjunction with the `ExtensionHeight` prop, and any of the other props that affect the height of the toolbar, e.g. `Prominent`, `Dense`, etc., WITH THE EXCEPTION of `Height`.",
      "collapse": "Puts the toolbar into a collapsed state reducing its maximum width.",
      "extensionHeight": "Specify an explicit height for the `ExtensionContent` slot.",
      "disabled": "Disables the ability to open the component.",
      "fullscreen": "Changes layout for fullscreen display.",
      "hideOverlay": "Hides the display of the overlay.",
      "link": "Designates that the component is a link. This is automatic when using the href or to prop.",
      "routable": "routable",
      "target": "Designates the target attribute. This should only be applied when using the **href** prop.",
      "backgroundColor": "Change the background color of the component.",
      "exact": "Exactly match the link. Without this, ‘/’ will match every route. You can find more information about the [exact prop](https://router.vuejs.org/api/) on the vue-router documentation.",
      "activeClass": "Configure the active CSS class applied when the link is active. You can find more information about the [active-class prop](https://router.vuejs.org/api/) on the vue-router documentation.",
      "href": "Designates the component as anchor and applies the `Href` attribute.",
      "isActive": "Activate now.",
      "key": "Key",
      "large": "Makes the component large.",
      "loading": "Adds a loading icon animation.",
      "ripple": "Ripples the component.",
      "small": "Makes the component small.",
      "stopPropagation": "Prevent bubbling events for the target element.",
      "top": "Aligns the content towards the top.",
      "xLarge": "Makes the component extra large.",
      "xSmall": "Makes the component extra small.",
      "mandatory": "Forces to always choose a value (if available).",
      "appendIcon": "Appends an icon to the component, uses the same syntax as [MIcon](/blazor/components/icons) ",
      "appendOuterIcon": "Appends an icon to the outside the component's input, uses same syntax as [MIcon](/blazor/components/icons) ",
      "autofocus": "Enables autofocus",
      "cacheItems": "Keeps a local unique copy of all items that have been passed through the `Items` prop.",
      "chips": "Changes display of selections to chips",
      "clearable": "Add input clear functionality, default icon is Material Icons **clear**",
      "clearIcon": "Applied when using `Clearable` and the input is dirty",
      "counter": "Creates counter for input length; if no number is specified, it defaults to 25. Does not apply any validation.",
      "counterValue": "counterValue",
      "debounceInterval": "debounceInterval",
      "deletableChips": "Adds a remove icon to selected chips",
      "error": "Puts the input in a manual error state",
      "errorCount": "The total number of errors that should display at once",
      "errorMessages": "Puts the input in an error state and passes through custom error messages. Will be combined with any validations that occur from the rules prop. This field will not trigger validation",
      "filled": "Applies the alternate filled input style",
      "filter": "The function used for filtering items",
      "fullWidth": "Designates input type as full-width",
      "hideDetails": "Hides hint and validation errors. When set to **auto** messages will be rendered only if there's a message (hint, error message, counter value etc) to display",
      "hideNoData": "Hides the menu when there are no options to show. Useful for preventing the menu from opening before results are fetched asynchronously. Also has the effect of opening the menu when the `Items` array changes if not already open.",
      "hideSelected": "Do not display in the select menu items that are already selected",
      "hint": "Hint text",
      "itemColor": "Sets color of selected items",
      "itemDisabled": "Set property of `Items` disabled value",
      "items": "items",
      "itemText": "Set property of `Items` text value",
      "itemValue": "Set property of items's value - must be primitive. Dot notation is supported.",
      "label": "Sets input label",
      "loaderHeight": "Specifies the height of the loader",
      "menuProps": "Pass props through to the [MMenu](/blazor/components/menus) component.",
      "messages": "Displays a list of messages or message if using a string",
      "multiple": "Changes select to multiple. ",
      "noDataText": "Display text when there is no data",
      "noFilter": "Do not apply filtering when searching. Useful when data is being filtered server side",
      "persistentHint": "Forces hint to always be visible",
      "persistentPlaceholder": "persistentPlaceholder",
      "placeholder": "Sets the input’s placeholder text",
      "prefix": "Displays prefix text",
      "prependIcon": "Prepends an icon to the component, uses the same syntax as [MIcon](/blazor/components/icons)",
      "prependInnerIcon": "Prepends an icon inside the component's input, uses the same syntax as [MIcon](/blazor/components/icons)",
      "readonly": "Puts input in readonly state",
      "reverse": "Reverses the input orientation",
      "rules": "Accepts an array of functions that take an input value as an argument and return either true / false or a string with an error message",
      "searchInput": "Search value.",
      "shaped": "Round if `Outlined` and increase **border-radius** if `Filled`. Must be used with either `Outlined` or `Filled`",
      "singleLine": "Label does not move on focus/dirty",
      "smallChips": "Changes display of selections to chips with the **small** property",
      "solo": "Changes the style of the input",
      "soloInverted": "Reduces element opacity until focused",
      "success": "Puts the input in a manual success state",
      "successMessages": "Puts the input in a success state and passes through custom success messages.",
      "suffix": "Displays suffix text",
      "textColor": "textColor",
      "type": "Sets input type",
      "validateOnBlur": "validateOnBlur",
      "value": "The input's value",
      "valueExpression": "Lambada expression, used to specify the fields for Form form validation",
      "nextContent": "The next slot",
      "prevContent": "The prev slot",
      "closeDelay": "Milliseconds to wait before closing component.",
      "openDelay": "Milliseconds to wait before opening component.",
      "zIndex": "The z-index used for the component",
      "transition": "设置组件转换。可以是一个 (built in transitions)[/styles-and-animations/transitions] 或者是自己自定义的。"
    },
    "contents": {
      "childContent": "Default content",
      "iconContent": "The slot used for the icon’s content.",
      "actionsContent": "The slot used for the action’s content.",
      "appendContent": "Adds an item inside the input and after input content",
      "appendItemContent": "Adds an item after menu content",
      "appendOuterContent": "Adds an item outside the input and after input content",
      "counterContent": "counterContent",
      "itemContent": "Define a custom item appearance",
      "labelContent": "Replaces the default label",
      "messageContent": "Customize the messages slot.",
      "noDataContent": "Displayed when there are no filtered items",
      "prependContent": "Adds an item outside the input and before input content",
      "prependInnerContent": "Adds an item inside the input and before input content",
      "prependItemContent": "Adds an item before menu content",
      "progressContent": "Slot for custom progress linear (displayed when `Loading` prop is not equal to Boolean False)",
      "selectionContent": "Define a custom selection appearance"
    },
    "events": {
      "onClick": "Click event",
      "onIconClick": "Icon Click event",
      "valueChanged": "Value change event",
      "onAppendClick": "Emitted when appended icon is clicked",
      "onAppendOuterClick": "Emitted when appended outer icon is clicked",
      "onBlur": "Emitted when the input is blurred",
      "onChange": "Emitted when the input is changed by user interaction",
      "onClearClick": "Emitted when clearable icon clicked",
      "onEnter": "Enter key event",
      "onFocus": "Emitted when component is focused",
      "onInput": "The updated bound model",
      "onKeyDown": "Emitted when **any** key is pressed",
      "onKeyUp": "Sent when **any** key is released",
      "onMouseDown": "Emitted when click is pressed",
      "onMouseUp": "Emitted when click is released",
      "onPrependClick": "Emitted when prepended icon is clicked",
      "onPrependInnerClick": "Emitted when prepended inner icon is clicked",
      "onSearchInputUpdate": "onSearchInputUpdate",
      "onSelectedItemUpdate": "onSelectedItemUpdate"
    },
    "functions": {
    }
  },
  "zh-CN": {
    "props": {
      "id": "Html document id.",
      "class": "Html document class.",
      "color": "将指定的颜色应用于控件 - 它可以是材料颜色的名称（例如 `success` 或 `purple`）或 css 颜色（`#033` 或 `rgba(255, 0, 0, 0.5)`）。您可以在 [颜色页面](/blazor/styles-and-animations/colors) 上找到内置类的列表。",
      "dark": "将暗色主题变量应用到组件。你可以在 [暗色主题](https://material.io/design/color/dark-theme.html) 的 Material Design 文档中找到更多有关信息。",
      "elevation": "组件的海拔可接受 0 到 24 之间的值。你可以在 [海拔页面](/blazor/styles-and-animations/elevation) 浏览更多信息。",
      "height": "设定组件的高度",
      "light": "为组件设置浅色主题。",
      "maxHeight": "设定组件的最大高度。",
      "maxWidth": "设定组件的最大宽度。",
      "minHeight": "设定组件的最小高度。",
      "minWidth": "设定组件的最小宽度。",
      "rounded": "对指定的组件应用 `border-radius` 样式。您可以在 [边框半径页面](/blazor/styles-and-animations/border-radius) 获取更多有关信息。",
      "style": "Html document style",
      "width": "设定组件的宽度。",
      "size": "设置组件的高度和宽度。",
      "bottom": "将组件向底部对齐。",
      "tile": "删除组件的 `border-radius` 样式。",
      "left": "将组件向左边对齐。",
      "right": "将组件向右边对齐。",
      "icon": "指定特定的图标。",
      "iconColor": "指定特定的图标颜色。",
      "outlined": "去除卡片的实心颜色并添加细边框。",
      "tag": "指定在根元素上使用的自定义标签。",
      "app": "指定该组件作为应用程序布局的一部分。用于动态调整内容的大小。使用此属性的组件只有位于 [MMain](/blazor/components/mains) 组件的**外部**才能正常运行。您可以在[MApplication](/blazor/components/applications)获取更多有关布局的信息。注意： 使用此属性会自动应用 **position: fixed** 到布局元素上。您可以使用 `Absolute` 属性来覆盖这个功能。",
      "absolute": "应用 `position: absolute` 样式到组件.",
      "dense": "将工具栏内容的高度降低到 48px（使用 `prominent` 属性时为 96px）。",
      "elevateOnScroll": "滚动时应用栏显示海拔。",
      "fadeImgOnScroll": "当使用 `Src` 属性或 `ImgContent` 插槽时，滚动时会淡化图像。",
      "fixed": "给组件应用 **position: fixed**。",
      "flat": "删除工具栏的框阴影。",
      "floating": "将 **display: inline-flex** 应用于组件。",
      "hideOnScroll": "滚动时隐藏应用程序栏。 仍会显示 `extension` 插槽。",
      "invertedScroll": "向下滚动时隐藏应用程序栏，向上滚动时显示它。",
      "marginTop": "将 margin-top: 应用于组件。",
      "scrollTarget": "在 `HideOnScroll` 激活之前的滚动距离。",
      "scroll-threshold": "在 `HideOnScroll` 激活之前的滚动距离。",
      "src": "图像源。详情请参阅 [MImage](/blazor/components/images)",
      "required": "必须的",
      "extended": "使用此道具可以增加工具栏的高度，而 不需要 使用 `ExtensionContent` 插槽来添加内容。可以与 `ExtensionHeight` 属性，以及其他会影响工具栏高度的其他属性，例如 `Prominent`, `Dense` 等配合使用，`Height` 除外。",
      "collapse": "将工具栏置于折叠状态，以减小其最大宽度。",
      "extensionHeight": "为 `ExtensionContent` 插槽指定一个明确的高度。",
      "disabled": "禁用打开组件的能力。",
      "fullscreen": "改变全屏显示的布局。",
      "hideOverlay": "隐藏遮罩层的显示.",
      "link": "指定组件为链接。当使用 **href** 或 **to** 属性时，这是自动的设置的。",
      "routable": "routable",
      "target": "指定 target 属性。只在使用 **href** 属性时应用。",
      "backgroundColor": "更改组件的背景颜色。",
      "exact": "完全匹配链接。如果没有这个链接，'/' 将匹配每个路由。你能够在 vue-router 文档浏览更多 [exact prop](https://router.vuejs.org/api/)。",
      "activeClass": "配置在链接激活时应用的 CSS 类。你能够在 vue-router 文档浏览更多 [active-class prop](https://router.vuejs.org/api/)。",
      "href": "指定组件为锚点并应用 `Href` 属性。",
      "isActive": "受否激活。",
      "key": "Key",
      "large": "使组件尺寸变的巨大。",
      "loading": "添加一个加载动画。",
      "ripple": "使组件带波纹效果。",
      "small": "使组件尺寸变小。",
      "stopPropagation": "阻止目标元素的冒泡事件。",
      "top": "将组件向顶部对齐。",
      "xLarge": "使组件尺寸变的无比巨大。",
      "xSmall": "使组件尺寸变的更小。",
      "mandatory": "强制始终选择一个值（如果可用）。",
      "appendIcon": "在组件上附加一个图标，使用与 [MIcon](/blazor/components/icons) 相同的语法",
      "appendOuterIcon": "在组件的外部添加一个图标，使用与 [MIcon](/blazor/components/icons) 相同的语法",
      "autofocus": "启用自动聚焦",
      "cacheItems": "保留已经通过 items 属性的项在本地的唯一副本",
      "chips": "改变一个已选择项为小纸片的显示方式",
      "clearable": "添加输入框清除功能，默认图标是 Material Icons **clear**",
      "clearIcon": "当使用 `Clearable` 且有输入值时应用",
      "counter": "为输入长度创建一个计数器，如果未指定数字，则默认为25，不会应用任何验证。",
      "counterValue": "counterValue",
      "debounceInterval": "debounceInterval",
      "deletableChips": "添加一个去除图标的到选定的小纸片（chips）",
      "error": "将输入框设置为手动错误状态。",
      "errorCount": "一次性显示的错误总数",
      "errorMessages": "将输入框置于错误状态，并传入自定义的错误信息。将与来自 rules 属性的任何验证相结合。这个字段不会触发验证。",
      "filled": "应用替代填充输入样式",
      "filter": "用于过滤条目的功能",
      "fullWidth": "指定输入类型为全宽度",
      "hideDetails": "隐藏提示和验证错误。当设置为 **auto** 时，只有在有信息（提示、错误信息、计数器值等）要显示时，才会显示信息。",
      "hideNoData": "当没有要显示的选项时，隐藏菜单。用于防止在异步获取结果之前打开菜单。也有打开菜单的效果，当 `Items` 数组改变，如果还没有打开。",
      "hideSelected": "不要在选择菜单中显示已选择的项",
      "hint": "提示文本",
      "itemColor": "设置选中项目的颜色",
      "itemDisabled": "禁用 `Items` 的属性值",
      "items": "items",
      "itemText": "设置 `Items` 属性的文本值",
      "itemValue": "设置 `Items` 的值的属性 - **必须是 primitive**。支持点符号。",
      "label": "设置输入标签",
      "loaderHeight": "指定加载器的高度",
      "menuProps": "将属性传递到 [MMenu](/blazor/components/menus) 组件。",
      "messages": "显示消息列表或消息",
      "multiple": "多选，接受数组作为值",
      "noDataText": "当没有数据时显示的文本",
      "noFilter": "搜索时不要应用过滤。在过滤服务器端数据时非常有用",
      "persistentHint": "强制提示总是可见的",
      "persistentPlaceholder": "persistentPlaceholder",
      "placeholder": "设置输入的占位符文本",
      "prefix": "显示前缀",
      "prependIcon": "在组件前添加一个图标，使用与 [MIcon](/blazor/components/icons) 相同的语法",
      "prependInnerIcon": "在组件的输入中添加一个图标，使用与 [MIcon](/blazor/components/icons) 相同的语法",
      "readonly": "将输入设置为只读状态",
      "reverse": "反转输入方向",
      "rules": "接受一个委托数组，该数组接受一个输入值作为参数，并返回 true / false 或 a string 和一个错误消息",
      "searchInput": "搜索值",
      "shaped": "如果 `Outlined` 则为圆形，如果 `Filled` 则增加 **border-radius**。必须与 `Outlined` 或 `Filled` 一起使用",
      "singleLine": "标签在 focus/dirty 上不移动",
      "smallChips": "使用 **small** 属性将选择的显示更改为纸片",
      "solo": "改变输入框的样式",
      "soloInverted": "减少元素的不透明度，知道获得焦点",
      "success": "将输入设置为手动成功状态",
      "successMessages": "将输入设置为成功状态，并传递自定义成功消息。",
      "suffix": "显示后缀",
      "textColor": "textColor",
      "type": "设置输入类型",
      "validateOnBlur": "validateOnBlur",
      "value": "输入的值",
      "valueExpression": "Lambada表达式,用于指定Form表单验证的字段",
      "nextContent": "下一个插槽",
      "prevContent": "前一个插槽",
      "closeDelay": "关闭组件前等待的毫秒数.",
      "openDelay": "打开组件前等待的毫秒数.",
      "zIndex": "用于组件的 z-index",
      "transition": "设置组件转换。可以是一个 (built in transitions)[/styles-and-animations/transitions] 或者是自己自定义的。"
    },
    "contents": {
      "childContent": "默认插槽",
      "iconContent": "用于图标内容的插槽。",
      "actionsContent": "动作内容使用的插槽",
      "appendContent": "在输入内容后添加一个项目",
      "appendItemContent": "在菜单内容后添加项目",
      "appendOuterContent": "在输入内容内追加一个项目",
      "counterContent": "counterContent",
      "itemContent": "定义自定义项外观",
      "labelContent": "替换默认标签",
      "messageContent": "自定义消息插槽。",
      "noDataContent": "没有筛选项目时显示的文本",
      "prependContent": "在输入内容之前添加一个项目",
      "prependInnerContent": "在输入内容中预设一个项目",
      "prependItemContent": "在菜单内容之前添加项目",
      "progressContent": "自定义进度线的插槽（loading属性不等于布尔值False时显示)",
      "selectionContent": "定义自定义选择器外观"
    },
    "events": {
      "onClick": "点击事件",
      "onIconClick": "图标点击事件",
      "valueChanged": "值改变事件",
      "onAppendClick": "单击附加图标时发出",
      "onAppendOuterClick": "单击附加的外部图标时发出",
      "onBlur": "当输入焦点时发出",
      "onChange": "当用户交互更改输入时发出",
      "onClearClick": "单击可清除图标时发出",
      "onEnter": "回车按键事件",
      "onFocus": "组件聚焦时发出",
      "onInput": "被绑定模型的更新",
      "onKeyDown": "按下 **任何** 键时发送",
      "onKeyUp": "释放 **任何** 键时发送",
      "onMouseDown": "单击时发出",
      "onMouseUp": "当单击释放时，发出",
      "onPrependClick": "单击前置图标时发出",
      "onPrependInnerClick": "单击前置的内部图标时发出",
      "onSearchInputUpdate": "onSearchInputUpdate",
      "onSelectedItemUpdate": "onSelectedItemUpdate"
    },
    "functions": {
    }
  }
}
