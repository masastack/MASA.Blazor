@inherits NextTickComponentBase
@inject IJSRuntime JSRuntime

<MHover>
    <div Class="app-code @Class" @attributes="@context.Attrs">
        @if (FileNameExists)
        {
            <MToolbar Dense Class="px-1 elevation-0 text-body-2 rounded-t" Dark Color="#323d6f">
                <MIcon Class="mr-1">mdi-file-tree</MIcon>
                @FileName
            </MToolbar>
        }

        <MSyntaxHighlight Class="@($"white--text overflow-x-auto overflow-y-hidden pa-4 ma-0 {ComputedClass}")"
                          Code="@Code"
                          Language="@Language"
                          OnHighlighted="OnHighlighted"
                          data-line="@LineHighlights">
        </MSyntaxHighlight>
        <FadeTransition>
            <AppCopyButton Show="@context.Hover" Content="@Code" Class="mr-n2 mt-n2"></AppCopyButton>
        </FadeTransition>
    </div>
</MHover>

@code {

    [CascadingParameter(Name = "IsDark")]
    public bool IsDark { get; set; }

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    [EditorRequired]
    public string? Code { get; set; }

    [Parameter]
    [EditorRequired]
    public string? Language { get; set; }

    [Parameter]
    public string? FileName { get; set; }

    [Parameter]
    public string? LineHighlights { get; set; }

    [Parameter]
    public bool RoundedTop0 { get; set; }

    private bool FileNameExists => !string.IsNullOrWhiteSpace(FileName);

    private string ComputedClass
    {
        get
        {
            if (RoundedTop0 || FileNameExists)
            {
                return "rounded-b";
            }

            return "rounded";
        }
    }

    private async Task OnHighlighted(ElementReference elementReference)
    {
        await JSRuntime.InvokeVoidAsync("prismHighlightLines", elementReference);
    }

}
