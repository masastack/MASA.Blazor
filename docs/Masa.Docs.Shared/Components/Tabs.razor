@namespace Masa.Docs.Shared.Components
@inject I18n I18n
@inject MasaBlazor MasaBlazor
@implements IDisposable

<MTabs Class="default-tabs"
       Routable
       @ref="_tabs">
    @foreach (var item in _internalMenus)
    {
        <MTab Ripple="false"
              Href="@item.Href"
              Target="@item.Target"
              MatchPattern="@item.MatchPattern">
            @if (item.Href == "/")
            {
                <MBadge Color="primary"
                        Content="@Project"
                        Class="text-capitalize"
                        Value="@(!string.IsNullOrWhiteSpace(Project))">
                    @I18n.T(item.Title)
                </MBadge>
            }
            else
            {
                <MBadge Color="@item.StateBackgroundColor"
                        Content="@I18n.T(item.State)"
                        Value="@(!string.IsNullOrWhiteSpace(item.State))">
                    @I18n.T(item.Title)
                </MBadge>
            }
        </MTab>
    }

    @if (_externalMenus.Any())
    {
        <MDivider Vertical Class="ml-8 mr-4 my-auto" Style="height:16px" Inset />

        var stateExists = _externalMenus.Any(u => u.State != null);

        <AppMenu Items="_externalMenus" TItem="DefaultItem" Width="@(stateExists ? 250 : 200)">
            <ActivatorContent>
                <MButton Height="48" Text Class="m-tab" @attributes="@context.Attrs">
                    @I18n.T("resources") <AppChevronDown></AppChevronDown>
                </MButton>
            </ActivatorContent>
        </AppMenu>
    }
</MTabs>

@code {

    [CascadingParameter(Name = "Culture")]
    public string? Culture { get; set; }

    [CascadingParameter(Name = "project")]
    public string? Project { get; set; }

    private MTabs? _tabs;
    private string? _prevProject;
    private List<DefaultItem> _internalMenus = new();
    private List<DefaultItem> _externalMenus = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        MasaBlazor.RTLChanged += MasaBlazorOnRTLChanged;
    }

    private void MasaBlazorOnRTLChanged(object? sender, EventArgs e)
    {
        InvokeAsync(() =>
        {
            _tabs?.CallSlider();
            StateHasChanged();
        });
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (_prevProject is null || _prevProject != Project)
        {
            _prevProject = Project;
            var menus = AppService.GetNavMenus(Project);
            _internalMenus = menus.Where(u => u.Target != "_blank").ToList();
            _externalMenus = menus.Where(u => u.Target == "_blank").ToList();
        }
    }

    public void Dispose()
    {
        _tabs?.Dispose();
        MasaBlazor.RTLChanged -= MasaBlazorOnRTLChanged;
    }

}
