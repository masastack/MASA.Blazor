@inherits LayoutComponentBase
@inject I18n I18n
@inject NavigationManager NavigationManager
@inject DocService DocService
@implements IDisposable

<HeadContent>
    <PageTitle>@PageInfo.PageTitle</PageTitle>
    <link rel="icon" href="@PageInfo.PageIcon" type="image/x-icon">
</HeadContent>

<MApp>
    <CascadingValue Value="@I18n.Culture.ToString()" Name="Culture">
        <CascadingValue Value="@_project" Name="project">
            <MErrorHandler>
                <AppBar OnCultureChanged="@OnCultureChanged"
                        OnAppBarNavIconClick="HandleOnAppBarNavIconClick"
                        OnDotClick="HandleOnDotClick"
                        OnSettingsClick="HandleSettingsClick"
                        HideAppBarNavIcon="@_hideAppBarNavIcon" />

                <CascadingValue Value="this" IsFixed>
                    @Body
                </CascadingValue>

                <Settings @bind-Value="_showSettings" />
                <MobileMenuList @bind-Value="_showMobileMenuList" />
            </MErrorHandler>

            <HeadContent>
                <PageTitle>@PageInfo.PageTitle</PageTitle>
                <link rel="icon" href="@PageInfo.PageIcon" type="image/x-icon">
            </HeadContent>
        </CascadingValue>
    </CascadingValue>
</MApp>

@code {

    private CultureInfo? _culture;
    private bool _showMobileMenuList;
    private bool _hideAppBarNavIcon;
    private bool _showSettings;
    private string? _project;

    internal (string? PageTitle, string? PageIcon) PageInfo = new("MASA Stack", "https://cdn.masastack.com/stack/images/logo/MASAStack/logo.png");

    private Dictionary<string, string> _projectMap = new();

    internal bool ShowDrawer;

    internal EventCallback<bool> OnAppBarNavIconClick { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        NavigationManager.LocationChanged += NavigationManagerOnLocationChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            _projectMap = await DocService.ReadProjectMapAsync();

            var segments = NavigationManager.GetSegments();
            var secondSegment = segments.ElementAtOrDefault(1);
            secondSegment = secondSegment?.TrimEnd('/');
            if (secondSegment is null || _projectMap.ContainsKey(secondSegment))
            {
                _project = secondSegment;
            }

            StateHasChanged();
        }
    }

    private void NavigationManagerOnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        var secondSegment = NavigationManager.GetSegments().ElementAtOrDefault(1);
        secondSegment = secondSegment?.TrimEnd('/');

        if (_project != secondSegment)
        {
            if (secondSegment is null || _projectMap.ContainsKey(secondSegment))
            {
                _project = secondSegment;
                InvokeAsync(StateHasChanged);
            }
        }
    }

    private void OnCultureChanged(string cultureName)
    {
        _culture = new CultureInfo(cultureName);
        I18n.SetCulture(_culture);
    }

    private void HandleOnAppBarNavIconClick()
    {
        ShowDrawer = !ShowDrawer;
        OnAppBarNavIconClick.InvokeAsync(ShowDrawer);
    }

    private void HandleOnDotClick()
    {
        _showMobileMenuList = !_showMobileMenuList;
    }

    private void HandleSettingsClick()
    {
        _showSettings = !_showSettings;
    }

    internal void HideAppBarNavIcon()
    {
        if (_hideAppBarNavIcon)
        {
            return;
        }

        _hideAppBarNavIcon = true;
        StateHasChanged();
    }

    internal void ShowAppBarNavIcon()
    {
        if (_hideAppBarNavIcon is false)
        {
            return;
        }

        _hideAppBarNavIcon = false;
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= NavigationManagerOnLocationChanged;
    }

}
