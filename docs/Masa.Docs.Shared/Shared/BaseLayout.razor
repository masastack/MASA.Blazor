@inherits LayoutComponentBase
@inject I18n I18n
@inject NavigationManager NavigationManager
@inject DocService DocService
@inject MasaBlazor MasaBlazor
@inject LocalStorage LocalStorage
@inject IJSRuntime JSRuntime
@implements IDisposable

<HeadContent>
    <PageTitle>@PageInfo.PageTitle</PageTitle>
    <link rel="icon" href="@PageInfo.PageIcon" type="image/x-icon">
</HeadContent>

<MApp Class="body-large">
    <CascadingValue Value="@I18n.Culture.ToString()" Name="Culture">
        <CascadingValue Value="@_project" Name="project">
            <MErrorHandler DisablePopupIfErrorContentRender>
                <ChildContent>
                    @if (_project is "blazor" or "framework")
                    {
                        var path = _project == "blazor" ? "/blazor/getting-started/upgrade-guide" : "/framework/upgrade/1.0.0";
                        <V1Banner UpgradeGuidePath="@path" />
                    }

                    <CascadingValue Value="@_env" Name="Env">
                        <AppBar OnCultureChanged="@OnCultureChanged"
                                OnAppBarNavIconClick="HandleOnAppBarNavIconClick"
                                OnDotClick="HandleOnDotClick"
                                OnSettingsClick="HandleSettingsClick"
                                HideAppBarNavIcon="@_hideAppBarNavIcon" />
                    </CascadingValue>

                    <CascadingValue Value="this" IsFixed>
                        @Body
                    </CascadingValue>

                    <Settings @bind-Value="_showSettings" />

                    <MobileMenuList @bind-Value="_showMobileMenuList" />
                </ChildContent>
                <ErrorContent>
                    <MContainer Class="fill-height justify-center">
                        <div style="white-space: pre-wrap; max-width: 100vw;">
                            <h1 class="error--text text-center mb-6">Something went wrong</h1>

                            <p class="error--text" style="font-size: 1rem;">@context.Message</p>

                            @{
                                var e = context is JSException ? context as JSException : context.InnerException as JSException;
                                if (e is not null)
                                {
                                    <p class="info--text">This could be a JavaScript cache issue. Refresh and try again, or manually hard reload (<kbd>Ctrl+F5</kbd> for Windows, <kbd>Command+Shift+R</kbd> for Mac).</p>
                                }

                                <MButton Block
                                         Class="text-capitalize"
                                         Large
                                         Color="primary"
                                         OnClick="() => RefreshPage(e is not null)">
                                    @I18n.T("pwa.refresh")
                                </MButton>
                            }
                        </div>
                    </MContainer>
                </ErrorContent>
            </MErrorHandler>

            <HeadContent>
                <PageTitle>@PageInfo.PageTitle</PageTitle>
                <link rel="icon" href="@PageInfo.PageIcon" type="image/x-icon">
            </HeadContent>
        </CascadingValue>

        <PwaSnackbar OnRefresh="@RefreshToSkipWaiting" />
    </CascadingValue>
</MApp>

@code {

    private CultureInfo? _culture;
    private bool? _showMobileMenuList;
    private bool _hideAppBarNavIcon;
    private bool? _showSettings;
    private string? _project;
    private string? _env;

    internal (string? PageTitle, string? PageIcon) PageInfo = new("MASA Stack", "https://cdn.masastack.com/stack/images/logo/MASAStack/logo.png");

    private Dictionary<string, string> _projectMap = new();

    internal bool? ShowDrawer;

    internal EventCallback<bool?> OnAppBarNavIconClick { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        NavigationManager.LocationChanged += NavigationManagerOnLocationChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await InitTheme();
            await InitRTL();

            _projectMap = await DocService.ReadProjectMapAsync();

            SetEnv();
            SetProject();
            StateHasChanged();
        }
    }

    private async Task InitRTL()
    {
        var rtlStr = await LocalStorage.GetItemAsync("masablazor@rtl");
        MasaBlazor.RTL = rtlStr == "rtl";
    }

    private async Task InitTheme()
    {
        var themeStr = await LocalStorage.GetItemAsync("masablazor@theme");
        var isDark = themeStr == "dark";
        if (isDark != MasaBlazor.Theme.Dark)
        {
            MasaBlazor.ToggleTheme();
        }
    }

    private void NavigationManagerOnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        SetProject(async () => await InvokeAsync(StateHasChanged));
    }

    private void OnCultureChanged(string cultureName)
    {
        _culture = new CultureInfo(cultureName);
        I18n.SetCulture(_culture);
    }

    private async Task RefreshPage(bool isJsException)
    {
        if (isJsException)
        {
            await RefreshToSkipWaiting();
        }
        else
        {
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
    }

    private async Task RefreshToSkipWaiting()
    {
        await JSRuntime.InvokeVoidAsync("swSkipWaiting");
    }

    private void HandleOnAppBarNavIconClick()
    {
        ShowDrawer = !(ShowDrawer ?? false);
        OnAppBarNavIconClick.InvokeAsync(ShowDrawer);
    }

    private void HandleOnDotClick()
    {
        _showMobileMenuList = !(_showMobileMenuList ?? false);
    }

    private void HandleSettingsClick()
    {
        _showSettings = !(_showSettings ?? false);
    }

    internal void HideAppBarNavIcon()
    {
        if (_hideAppBarNavIcon)
        {
            return;
        }

        _hideAppBarNavIcon = true;
        StateHasChanged();
    }

    internal void ShowAppBarNavIcon()
    {
        if (_hideAppBarNavIcon is false)
        {
            return;
        }

        _hideAppBarNavIcon = false;
        StateHasChanged();
    }

    private void SetEnv()
    {
        var uri = NavigationManager.BaseUri.Replace("http://", "").Replace("https://", "").TrimEnd('/');
        _env = uri switch
        {
            "docs.masastack.com" or "blazor.masastack.com" => "prd_",
            "blazor-dev.masastack.com" or "docs-dev.masastack.com" => "dev_",
            _ => "local_"
        };
    }

    private void SetProject(Action? action = null)
    {
        var segments = NavigationManager.GetSegments();
        var secondSegment = segments.ElementAtOrDefault(1);
        secondSegment = secondSegment?.TrimEnd('/');
        if (secondSegment is null || _projectMap.ContainsKey(secondSegment))
        {
            if (_project != secondSegment)
            {
                _project = secondSegment;
                if (action is not null)
                {
                    action();
                }
            }
        }
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= NavigationManagerOnLocationChanged;
    }

}
