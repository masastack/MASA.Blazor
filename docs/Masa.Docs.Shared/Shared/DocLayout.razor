@using BlazorComponent.Web;
@layout BaseLayout
@inherits LayoutComponentBase
@implements IAsyncDisposable

<NavDrawer @bind-Value="_showDrawer"
           RTL="MasaBlazor.RTL" />

<MMain Class="doc-main">@Body</MMain>

<Toc RTL="@MasaBlazor.RTL" />

<FabTransition>
    <MButton Show="_showBackTop" Large Fab Fixed Bottom Right Class="transition-swing" Color="primary" OnClick="ToTopAsync">
        <MIcon>mdi-chevron-up</MIcon>
    </MButton>
</FabTransition>

@code {

    [Inject]
    MasaBlazor MasaBlazor { get; set; } = null!;

    [Inject]
    public IJSRuntime Js { get; set; } = null!;

    [CascadingParameter]
    private BaseLayout BaseLayout { get; set; } = null!;

    private bool? _showDrawer;
    private bool _showBackTop;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        BaseLayout.OnAppBarNavIconClick = () => _showDrawer = !_showDrawer;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        BaseLayout.ShowAppBarNavIcon();

        if (firstRender)
        {
            await Js.AddHtmlElementEventListener("window", "scroll", OnScroll, false, new EventListenerExtras(0, 100));
        }
    }

    private async Task OnScroll()
    {
        var window = await Js.InvokeAsync<Window>(JsInteropConstants.GetWindow);
        var top = window.PageYOffset;

        _showBackTop = top > 300;

        await InvokeAsync(StateHasChanged);
    }

    private async Task ToTopAsync()
    {
        await Js.InvokeVoidAsync("backTop");
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            await Js.RemoveHtmlElementEventListener("window", "scroll");
        }
        catch (Exception e)
        {
            // ignored
        }
    }

}
