@page "/"
@layout BaseLayout
@inject DocService DocService
@inject I18n I18n
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject MasaBlazor MasaBlazor
@inject IntersectJSModule IntersectJSModule
@using Element = BlazorComponent.Web.Element
@inherits NextTickComponentBase
@implements IAsyncDisposable

<MNavigationDrawer App
                   Class="default-nav"
                   Floating
                   Width="300"
                   @bind-Value="_drawer"
                   Clipped
                   Right="@MasaBlazor.RTL">
    <ChildContent>
        @if (_projectToNavs.Any())
        {
            <MListItem>
                <MListItemContent>
                    <MSelect Items="s_versions"
                             @bind-Value="@_selectVersion"
                             Class="light-border"
                             ItemText="u => u"
                             ItemValue="u => u"
                             HideDetails="true"
                             Outlined
                             Dense>
                    </MSelect>
                </MListItemContent>
            </MListItem>
            <MDivider></MDivider>

            <MList Class="doc-list-nav">
                <MListItemGroup Value="_activeHash" Mandatory ActiveClass="primary--text">
                    <MListItem Value="@("#getting-started")"
                               Class="doc-list-nav--item-hash"
                               Href="@("#getting-started")"
                               OnClick='() => ScrollIntoView("#getting-started")'
                               OnClickPreventDefault>
                        <MListItemIcon>
                            <MIcon Color="#FFB547" Size="32" Style="margin-right: 2px">fa:fas fa-rocket</MIcon>
                        </MListItemIcon>
                        <MListItemContent>
                            <MListItemTitle>@I18n.T("getting-started")</MListItemTitle>
                        </MListItemContent>
                    </MListItem>
                    @foreach (var (project, navs) in _projectToNavs.OrderByDescending(u => u.Key))
                    {
                        var hash = $"#{project}";
                        var isActive = _activeHash == hash;

                        <MListItem Value="hash"
                                   Class="doc-list-nav--item-hash"
                                   Href="@hash"
                                   OnClick="() => ScrollIntoView(hash)"
                                   OnClickPreventDefault>
                            <MListItemIcon>
                                <MIcon Color="@(isActive ? "" : "#4318ff")" Size="34">@($"$masa{project.ToUpperFirst()}")</MIcon>
                            </MListItemIcon>
                            <MListItemContent>
                                <MListItemTitle>@I18n.T("product", project)</MListItemTitle>
                            </MListItemContent>
                        </MListItem>
                    }
                </MListItemGroup>
            </MList>
        }
    </ChildContent>
</MNavigationDrawer>

<MMain>
    <MContainer Fluid Class="px-9">
        <MResponsive Class="mx-auto overflow-visible overview" MaxWidth="1260">
            @if (!_loading)
            {
                <div class="project" id="getting-started">
                    <div class="heading-5 mb-6 d-flex align-center">
                        <MIcon Color="#FFB547" Size="32" Style="margin-right: 10px">fa:fas fa-rocket</MIcon>
                        @I18n.T("getting-started")
                    </div>
                    @ProductCard(s_gettingStartedNavs)
                </div>

                @foreach (var (project, navs) in _projectToNavs.OrderByDescending(u => u.Key))
                {
                    <MLazy Class="project" Id="@project" MinHeight="1200">
                        <div class="heading-5 mb-6 d-flex align-center">
                            <MIcon Color="#4318ff" Size="34" Class="mr-2">@($"$masa{project.ToUpperFirst()}")</MIcon>
                            @I18n.T("product", project)
                        </div>

                        @{
                            var groupedNavs = navs.GroupBy(u => u.Children is null || u.Children.Count == 0).ToList();
                            var groupNavsWithoutChildren = groupedNavs.FirstOrDefault(u => u.Key);
                            if (groupNavsWithoutChildren is not null)
                            {
                                @ProductCard(groupNavsWithoutChildren.Select(u => (u.Title, u.Href)))
                            }

                            var groupNavsWithChildren = groupedNavs.FirstOrDefault(u => u.Key == false);
                            if (groupNavsWithChildren is not null)
                            {
                                foreach (var navItem in groupNavsWithChildren)
                                {
                                    if (navItem.IsHidden)
                                    {
                                        continue;
                                    }

                                    var children = navItem is { Hidden: true } ? navItem.Children.Where(c => c is { Hidden: false }) : navItem.Children;

                                    @ProductCard(children.Select(u =>
                                    {
                                        var href = u.Href;
                                        if (string.IsNullOrWhiteSpace(href))
                                        {
                                            href = u.Children?.FirstOrDefault()?.Href;
                                        }

                                        return (u.Title, href);
                                    }), navItem.Title)
                                }
                            }
                        }
                    </MLazy>
                }
            }
        </MResponsive>
    </MContainer>
</MMain>

@code {

    [CascadingParameter(Name = "Culture")]
    private string Culture { get; set; } = null!;

    [CascadingParameter]
    private BaseLayout BaseLayout { get; set; } = null!;

    private static readonly List<(string title, string href)> s_gettingStartedNavs = new()
    {
        ("MASA Stack", "/stack/stack/introduce"),
        ("MASA Framework", "/framework/getting-started/overview"),
        ("MASA Blazor", "/blazor/getting-started/installation"),
    };

    private readonly Dictionary<string, List<NavItem>> _projectToNavs = new();

    private static readonly List<string> s_versions = new()
    {
        "1.0",
    };

    private CancellationTokenSource _ctsForIntersect = new();

    private string _selectVersion = "1.0";

    private bool? _drawer;

    private string? _activeHash;
    private bool _loading = true;
    private bool _internalScrolling;

    protected override void OnInitialized()
    {
        BaseLayout.OnAppBarNavIconClick = () =>
        {
            _drawer = !_drawer;
            StateHasChanged();
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            var projectMap = await DocService.ReadProjectMapAsync();

            foreach (var key in projectMap.Keys)
            {
                _projectToNavs[key] = await DocService.ReadNavsAsync(key);
            }

            _loading = false;

            StateHasChanged();

            await ObserveToc();
        }
    }

    private async Task ObserveToc()
    {
        var marginTop = AppService.AppBarHeight + 48;
        var document = await JsRuntime.InvokeAsync<Element>(JsInteropConstants.GetDomInfo, "document");
        var marginBottom = document.ClientHeight - marginTop - 36;

        var navHashes = new[] { "#getting-started" }.Concat(_projectToNavs.Select(u => $"#{u.Key}"));
        foreach (var hash in navHashes)
        {
            await IntersectJSModule.ObserverAsync(hash, (e) => HandleOnIntersect(e, hash), new IntersectionObserverInit()
            {
                RootMargin = $"-{marginTop}px 0px -{marginBottom}px 0px"
            });
        }
    }

    private async Task UnobserveToc()
    {
        var navHashes = new[] { "#getting-started" }.Concat(_projectToNavs.Select(u => $"#{u.Key}"));
        foreach (var hash in navHashes)
        {
            await IntersectJSModule.UnobserveAsync(hash);
        }
    }

    private async Task HandleOnIntersect(IntersectEventArgs e, string hash)
    {
        if (_internalScrolling)
        {
            return;
        }
        
        if (e.IsIntersecting)
        {
            _activeHash = hash;
            
            _ctsForIntersect.Cancel();
            _ctsForIntersect = new CancellationTokenSource();
            await Task.Delay(300, _ctsForIntersect.Token);
            await InvokeAsync(StateHasChanged);
        }
    }

    private RenderFragment ProductCard(IEnumerable<(string title, string href)> items, string? group = null) => __builder =>
    {
        <OutlineCard Title="@I18n.T(group)" Class="project-content" TitleClass="project-content__title" Filled>
            <MRow Dense Class="ma-0">
                @foreach (var (title, href) in items)
                {
                    <MCol Cols="12" Sm="6" Md="4" Class="text-center rounded text-truncate">
                        @LinkableTitle(title, href)
                    </MCol>
                }
            </MRow>
        </OutlineCard>
    };

    private RenderFragment LinkableTitle(string title, string href) => __builder =>
    {
        <MButton Text Href="@href" Class="text-none text-truncate" Style="font-size: inherit; font-weight: inherit;">@I18n.T(title)</MButton>
    };

    private async Task ScrollIntoView(string hash)
    {
        _internalScrolling = true;
        _activeHash = hash;
        _ = JsRuntime.InvokeVoidAsync("scrollToElement", hash, AppService.AppBarHeight + 48);

        await Task.Run(async () =>
        {
            await Task.Delay(1000);
            _internalScrolling = false;
        });
    }
    
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        try
        {
            await UnobserveToc();
        }
        catch (JSDisconnectedException)
        {
            // ignored
        }
        catch (InvalidOperationException)
        {
            // ignored
        }
    }

}
